
F429ZI_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008388  08008388  00018388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c0  080085c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080085c0  080085c0  000185c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085c8  080085c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085cc  080085cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080085d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000a5f0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a660  2000a660  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018845  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea0  00000000  00000000  000388e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e56  00000000  00000000  0003df40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017203  00000000  00000000  00064d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0605  00000000  00000000  0007bf99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016c59e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fc0  00000000  00000000  0016c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800836c 	.word	0x0800836c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800836c 	.word	0x0800836c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b974 	b.w	8000ecc <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468e      	mov	lr, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14d      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	d969      	bls.n	8000ce4 <__udivmoddi4+0xe8>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b152      	cbz	r2, 8000c2c <__udivmoddi4+0x30>
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	f1c2 0120 	rsb	r1, r2, #32
 8000c1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c26:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2a:	4094      	lsls	r4, r2
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	0c21      	lsrs	r1, r4, #16
 8000c32:	fbbe f6f8 	udiv	r6, lr, r8
 8000c36:	fa1f f78c 	uxth.w	r7, ip
 8000c3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c42:	fb06 f107 	mul.w	r1, r6, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c52:	f080 811f 	bcs.w	8000e94 <__udivmoddi4+0x298>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 811c 	bls.w	8000e94 <__udivmoddi4+0x298>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 f707 	mul.w	r7, r0, r7
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x92>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c80:	f080 810a 	bcs.w	8000e98 <__udivmoddi4+0x29c>
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	f240 8107 	bls.w	8000e98 <__udivmoddi4+0x29c>
 8000c8a:	4464      	add	r4, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	1be4      	subs	r4, r4, r7
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa4>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xc2>
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	f000 80ef 	beq.w	8000e8e <__udivmoddi4+0x292>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f683 	clz	r6, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d14a      	bne.n	8000d5c <__udivmoddi4+0x160>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd4>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80f9 	bhi.w	8000ec2 <__udivmoddi4+0x2c6>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	469e      	mov	lr, r3
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa4>
 8000cde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xec>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 8092 	bne.w	8000e16 <__udivmoddi4+0x21a>
 8000cf2:	eba1 010c 	sub.w	r1, r1, ip
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	2601      	movs	r6, #1
 8000d00:	0c20      	lsrs	r0, r4, #16
 8000d02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d06:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0e:	fb0e f003 	mul.w	r0, lr, r3
 8000d12:	4288      	cmp	r0, r1
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x12c>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x12a>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f200 80cb 	bhi.w	8000ebc <__udivmoddi4+0x2c0>
 8000d26:	4643      	mov	r3, r8
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d30:	fb07 1110 	mls	r1, r7, r0, r1
 8000d34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d38:	fb0e fe00 	mul.w	lr, lr, r0
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x156>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d48:	d202      	bcs.n	8000d50 <__udivmoddi4+0x154>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f200 80bb 	bhi.w	8000ec6 <__udivmoddi4+0x2ca>
 8000d50:	4608      	mov	r0, r1
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x9a>
 8000d5c:	f1c6 0720 	rsb	r7, r6, #32
 8000d60:	40b3      	lsls	r3, r6
 8000d62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d72:	431c      	orrs	r4, r3
 8000d74:	40f9      	lsrs	r1, r7
 8000d76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d82:	0c20      	lsrs	r0, r4, #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fb09 1118 	mls	r1, r9, r8, r1
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	fb08 f00e 	mul.w	r0, r8, lr
 8000d94:	4288      	cmp	r0, r1
 8000d96:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9a:	d90b      	bls.n	8000db4 <__udivmoddi4+0x1b8>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da4:	f080 8088 	bcs.w	8000eb8 <__udivmoddi4+0x2bc>
 8000da8:	4288      	cmp	r0, r1
 8000daa:	f240 8085 	bls.w	8000eb8 <__udivmoddi4+0x2bc>
 8000dae:	f1a8 0802 	sub.w	r8, r8, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	458e      	cmp	lr, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x1e2>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dd4:	d26c      	bcs.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dd6:	458e      	cmp	lr, r1
 8000dd8:	d96a      	bls.n	8000eb0 <__udivmoddi4+0x2b4>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de2:	fba0 9402 	umull	r9, r4, r0, r2
 8000de6:	eba1 010e 	sub.w	r1, r1, lr
 8000dea:	42a1      	cmp	r1, r4
 8000dec:	46c8      	mov	r8, r9
 8000dee:	46a6      	mov	lr, r4
 8000df0:	d356      	bcc.n	8000ea0 <__udivmoddi4+0x2a4>
 8000df2:	d053      	beq.n	8000e9c <__udivmoddi4+0x2a0>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x212>
 8000df6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000e02:	fa22 f306 	lsr.w	r3, r2, r6
 8000e06:	40f1      	lsrs	r1, r6
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	f1c2 0320 	rsb	r3, r2, #32
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa21 f303 	lsr.w	r3, r1, r3
 8000e24:	4091      	lsls	r1, r2
 8000e26:	4301      	orrs	r1, r0
 8000e28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e34:	fb07 3610 	mls	r6, r7, r0, r3
 8000e38:	0c0b      	lsrs	r3, r1, #16
 8000e3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e42:	429e      	cmp	r6, r3
 8000e44:	fa04 f402 	lsl.w	r4, r4, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x260>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e52:	d22f      	bcs.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e54:	429e      	cmp	r6, r3
 8000e56:	d92d      	bls.n	8000eb4 <__udivmoddi4+0x2b8>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1b9b      	subs	r3, r3, r6
 8000e5e:	b289      	uxth	r1, r1
 8000e60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e64:	fb07 3316 	mls	r3, r7, r6, r3
 8000e68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x28a>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e7c:	d216      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d914      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e82:	3e02      	subs	r6, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e8c:	e738      	b.n	8000d00 <__udivmoddi4+0x104>
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e705      	b.n	8000ca0 <__udivmoddi4+0xa4>
 8000e94:	4606      	mov	r6, r0
 8000e96:	e6e3      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6f8      	b.n	8000c8e <__udivmoddi4+0x92>
 8000e9c:	454b      	cmp	r3, r9
 8000e9e:	d2a9      	bcs.n	8000df4 <__udivmoddi4+0x1f8>
 8000ea0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	e7a3      	b.n	8000df4 <__udivmoddi4+0x1f8>
 8000eac:	4646      	mov	r6, r8
 8000eae:	e7ea      	b.n	8000e86 <__udivmoddi4+0x28a>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	e794      	b.n	8000dde <__udivmoddi4+0x1e2>
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	e7d1      	b.n	8000e5c <__udivmoddi4+0x260>
 8000eb8:	46d0      	mov	r8, sl
 8000eba:	e77b      	b.n	8000db4 <__udivmoddi4+0x1b8>
 8000ebc:	3b02      	subs	r3, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e732      	b.n	8000d28 <__udivmoddi4+0x12c>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e709      	b.n	8000cda <__udivmoddi4+0xde>
 8000ec6:	4464      	add	r4, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e742      	b.n	8000d52 <__udivmoddi4+0x156>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <RCFilter_Init>:
 *  Created on: 28 Mar 2024
 *      Author: liwaiho
 */
#include "RCFilter.h"

void RCFilter_Init(RCFilter *self, float cutoffFreqHz, float sampleTimeS){
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000edc:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f/ (6.28318530718f * cutoffFreqHz);
 8000ee0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ee4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f48 <RCFilter_Init+0x78>
 8000ee8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef4:	edc7 7a05 	vstr	s15, [r7, #20]

	/* pre-compute the filter coefficients for 1st RC low-pass filter */
	self->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8000ef8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000efc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f04:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	edc3 7a00 	vstr	s15, [r3]
	self->coeff[1] = RC / (sampleTimeS + RC);
 8000f12:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f1e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	edc3 7a01 	vstr	s15, [r3, #4]

	/* clear output buffer */
	self->out[0] = 0.0f;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
	self->out[1] = 0.0f;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40c90fdb 	.word	0x40c90fdb

08000f4c <RCfilter_Update>:

float RCfilter_Update(RCFilter *self, float inp){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	ed87 0a00 	vstr	s0, [r7]

	/* shift output samples */
	self->out[1] = self->out[0];
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]

	/* compute new output sample */
	self->out[0] = self->coeff[0] * inp + self->coeff[1] * self->out[1];
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	ed93 7a00 	vldr	s14, [r3]
 8000f66:	edd7 7a00 	vldr	s15, [r7]
 8000f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edc3 7a02 	vstr	s15, [r3, #8]

	/* return filtered sample */
	return self->out[0];
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	ee07 3a90 	vmov	s15, r3
}
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <get_sineval>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_sineval(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_SAMPLES; i++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	e038      	b.n	800101e <get_sineval+0x7e>
		sine_val[i] = (sin(2 * PI * i / MAX_SAMPLES) + 1) * (RES_12BIT / 2);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fac1 	bl	8000534 <__aeabi_i2d>
 8000fb2:	a324      	add	r3, pc, #144	; (adr r3, 8001044 <get_sineval+0xa4>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fb26 	bl	8000608 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	a321      	add	r3, pc, #132	; (adr r3, 800104c <get_sineval+0xac>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fc47 	bl	800085c <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	ec43 2b17 	vmov	d7, r2, r3
 8000fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fda:	eef0 0a67 	vmov.f32	s1, s15
 8000fde:	f006 f97b 	bl	80072d8 <sin>
 8000fe2:	ec51 0b10 	vmov	r0, r1, d0
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <get_sineval+0x98>)
 8000fec:	f7ff f956 	bl	800029c <__adddf3>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <get_sineval+0x9c>)
 8000ffe:	f7ff fb03 	bl	8000608 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fdbf 	bl	8000b8c <__aeabi_d2uiz>
 800100e:	4602      	mov	r2, r0
 8001010:	490b      	ldr	r1, [pc, #44]	; (8001040 <get_sineval+0xa0>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_SAMPLES; i++){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3301      	adds	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f242 720f 	movw	r2, #9999	; 0x270f
 8001024:	4293      	cmp	r3, r2
 8001026:	ddc1      	ble.n	8000fac <get_sineval+0xc>
	}
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	3ff00000 	.word	0x3ff00000
 800103c:	40a00000 	.word	0x40a00000
 8001040:	200009c8 	.word	0x200009c8
 8001044:	f01b866e 	.word	0xf01b866e
 8001048:	401921f9 	.word	0x401921f9
 800104c:	00000000 	.word	0x00000000
 8001050:	40c38800 	.word	0x40c38800

08001054 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	RCfilter_Update(&lpf_adc, adc_buffer[0]);
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_ADC_ConvCpltCallback+0x28>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <HAL_ADC_ConvCpltCallback+0x2c>)
 800106e:	f7ff ff6d 	bl	8000f4c <RCfilter_Update>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000a608 	.word	0x2000a608
 8001080:	2000a630 	.word	0x2000a630

08001084 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	RCfilter_Update(&lpf_adc, adc_buffer[1]);
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800109e:	f7ff ff55 	bl	8000f4c <RCfilter_Update>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000a608 	.word	0x2000a608
 80010b0:	2000a630 	.word	0x2000a630

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ba:	f000 fecd 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010be:	f000 f855 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f000 fa51 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 80010c6:	f000 fa11 	bl	80014ec <MX_DMA_Init>
  MX_ETH_Init();
 80010ca:	f000 f935 	bl	8001338 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010ce:	f000 f9b5 	bl	800143c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010d2:	f000 f9dd 	bl	8001490 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80010d6:	f000 f8b3 	bl	8001240 <MX_ADC1_Init>
  MX_DAC_Init();
 80010da:	f000 f903 	bl	80012e4 <MX_DAC_Init>
  MX_TIM7_Init();
 80010de:	f000 f979 	bl	80013d4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  get_sineval();
 80010e2:	f7ff ff5d 	bl	8000fa0 <get_sineval>
  RCFilter_Init(&lpf_adc, 1000.0f, 0.0005f);
 80010e6:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001140 <main+0x8c>
 80010ea:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001144 <main+0x90>
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <main+0x94>)
 80010f0:	f7ff feee 	bl	8000ed0 <RCFilter_Init>



  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_val, MAX_SAMPLES, DAC_ALIGN_12B_R);
 80010f4:	2300      	movs	r3, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <main+0x98>)
 80010fe:	2110      	movs	r1, #16
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <main+0x9c>)
 8001102:	f001 fda5 	bl	8002c50 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim7);
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <main+0xa0>)
 8001108:	f003 fe5c 	bl	8004dc4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_LENGTH);
 800110c:	2202      	movs	r2, #2
 800110e:	4912      	ldr	r1, [pc, #72]	; (8001158 <main+0xa4>)
 8001110:	4812      	ldr	r0, [pc, #72]	; (800115c <main+0xa8>)
 8001112:	f001 f88b 	bl	800222c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a=0;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  a++;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
	  sprintf(TxData, "%d %d\r\n", adc_buffer[0], adc_buffer[1]);
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <main+0xa4>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <main+0xa4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	490d      	ldr	r1, [pc, #52]	; (8001160 <main+0xac>)
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <main+0xb0>)
 800112c:	f005 fc64 	bl	80069f8 <siprintf>
	  HAL_UART_Transmit(&huart3, TxData, 32, HAL_MAX_DELAY);
 8001130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001134:	2220      	movs	r2, #32
 8001136:	490b      	ldr	r1, [pc, #44]	; (8001164 <main+0xb0>)
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <main+0xb4>)
 800113a:	f004 f962 	bl	8005402 <HAL_UART_Transmit>
  {
 800113e:	e7ec      	b.n	800111a <main+0x66>
 8001140:	3a03126f 	.word	0x3a03126f
 8001144:	447a0000 	.word	0x447a0000
 8001148:	2000a630 	.word	0x2000a630
 800114c:	200009c8 	.word	0x200009c8
 8001150:	200002ac 	.word	0x200002ac
 8001154:	200003d0 	.word	0x200003d0
 8001158:	2000a608 	.word	0x2000a608
 800115c:	20000204 	.word	0x20000204
 8001160:	08008388 	.word	0x08008388
 8001164:	2000a610 	.word	0x2000a610
 8001168:	20000418 	.word	0x20000418

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	; 0x50
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	2230      	movs	r2, #48	; 0x30
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fc34 	bl	80069e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <SystemClock_Config+0xcc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <SystemClock_Config+0xcc>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <SystemClock_Config+0xcc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <SystemClock_Config+0xd0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <SystemClock_Config+0xd0>)
 80011b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <SystemClock_Config+0xd0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011e0:	23a8      	movs	r3, #168	; 0xa8
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e8:	2307      	movs	r3, #7
 80011ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 f8ff 	bl	80043f4 <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011fc:	f000 fa62 	bl	80016c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2302      	movs	r3, #2
 8001206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800120c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001216:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2105      	movs	r1, #5
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fb60 	bl	80048e4 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800122a:	f000 fa4b 	bl	80016c4 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3750      	adds	r7, #80	; 0x50
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_ADC1_Init+0x98>)
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <MX_ADC1_Init+0x9c>)
 8001256:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_ADC1_Init+0x98>)
 800125a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800125e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_ADC1_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_ADC1_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_ADC1_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_ADC1_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_ADC1_Init+0x98>)
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <MX_ADC1_Init+0xa0>)
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_ADC1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_ADC1_Init+0x98>)
 800128e:	2201      	movs	r2, #1
 8001290:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_ADC1_Init+0x98>)
 800129c:	2201      	movs	r2, #1
 800129e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_ADC1_Init+0x98>)
 80012a2:	f000 fe6f 	bl	8001f84 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012ac:	f000 fa0a 	bl	80016c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_ADC1_Init+0x98>)
 80012c2:	f001 f8d7 	bl	8002474 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012cc:	f000 f9fa 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000204 	.word	0x20000204
 80012dc:	40012000 	.word	0x40012000
 80012e0:	0f000001 	.word	0x0f000001

080012e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_DAC_Init+0x4c>)
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <MX_DAC_Init+0x50>)
 80012f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_DAC_Init+0x4c>)
 80012fa:	f001 fc86 	bl	8002c0a <HAL_DAC_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001304:	f000 f9de 	bl	80016c4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001308:	2314      	movs	r3, #20
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	2210      	movs	r2, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_DAC_Init+0x4c>)
 8001318:	f001 fd86 	bl	8002e28 <HAL_DAC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001322:	f000 f9cf 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002ac 	.word	0x200002ac
 8001334:	40007400 	.word	0x40007400

08001338 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_ETH_Init+0x84>)
 800133e:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <MX_ETH_Init+0x88>)
 8001340:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_ETH_Init+0x8c>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001350:	22e1      	movs	r2, #225	; 0xe1
 8001352:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001356:	2200      	movs	r2, #0
 8001358:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_ETH_Init+0x8c>)
 800135c:	2200      	movs	r2, #0
 800135e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001362:	2200      	movs	r2, #0
 8001364:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_ETH_Init+0x84>)
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <MX_ETH_Init+0x8c>)
 800136a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_ETH_Init+0x84>)
 800136e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001372:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_ETH_Init+0x84>)
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <MX_ETH_Init+0x90>)
 8001378:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_ETH_Init+0x84>)
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <MX_ETH_Init+0x94>)
 800137e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_ETH_Init+0x84>)
 8001382:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001386:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_ETH_Init+0x84>)
 800138a:	f002 fa29 	bl	80037e0 <HAL_ETH_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001394:	f000 f996 	bl	80016c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001398:	2238      	movs	r2, #56	; 0x38
 800139a:	2100      	movs	r1, #0
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_ETH_Init+0x98>)
 800139e:	f005 fb23 	bl	80069e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_ETH_Init+0x98>)
 80013a4:	2221      	movs	r2, #33	; 0x21
 80013a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_ETH_Init+0x98>)
 80013aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80013ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_ETH_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000320 	.word	0x20000320
 80013c0:	40028000 	.word	0x40028000
 80013c4:	2000a640 	.word	0x2000a640
 80013c8:	20000164 	.word	0x20000164
 80013cc:	200000c4 	.word	0x200000c4
 80013d0:	2000008c 	.word	0x2000008c

080013d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_TIM7_Init+0x60>)
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <MX_TIM7_Init+0x64>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_TIM7_Init+0x60>)
 80013ea:	2253      	movs	r2, #83	; 0x53
 80013ec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_TIM7_Init+0x60>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_TIM7_Init+0x60>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_TIM7_Init+0x60>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_TIM7_Init+0x60>)
 8001402:	f003 fc8f 	bl	8004d24 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800140c:	f000 f95a 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001410:	2320      	movs	r3, #32
 8001412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_TIM7_Init+0x60>)
 800141e:	f003 ff13 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001428:	f000 f94c 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200003d0 	.word	0x200003d0
 8001438:	40001400 	.word	0x40001400

0800143c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_USART3_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART3_UART_Init+0x4c>)
 8001474:	f003 ff78 	bl	8005368 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f000 f921 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000418 	.word	0x20000418
 800148c:	40004800 	.word	0x40004800

08001490 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800149a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149e:	2204      	movs	r2, #4
 80014a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a4:	2202      	movs	r2, #2
 80014a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d4:	f002 fe71 	bl	80041ba <HAL_PCD_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014de:	f000 f8f1 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200004bc 	.word	0x200004bc

080014ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_DMA_Init+0x78>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <MX_DMA_Init+0x78>)
 80014fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_DMA_Init+0x78>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_DMA_Init+0x78>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <MX_DMA_Init+0x78>)
 8001518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_DMA_Init+0x78>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	200e      	movs	r0, #14
 8001530:	f001 fb35 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001534:	200e      	movs	r0, #14
 8001536:	f001 fb4e 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2011      	movs	r0, #17
 8001540:	f001 fb2d 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001544:	2011      	movs	r0, #17
 8001546:	f001 fb46 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2038      	movs	r0, #56	; 0x38
 8001550:	f001 fb25 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001554:	2038      	movs	r0, #56	; 0x38
 8001556:	f001 fb3e 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <MX_GPIO_Init+0x14c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <MX_GPIO_Init+0x14c>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <MX_GPIO_Init+0x14c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a44      	ldr	r2, [pc, #272]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a2f      	ldr	r2, [pc, #188]	; (80016b4 <MX_GPIO_Init+0x14c>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <MX_GPIO_Init+0x14c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <MX_GPIO_Init+0x14c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <MX_GPIO_Init+0x14c>)
 8001614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <MX_GPIO_Init+0x14c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f244 0181 	movw	r1, #16513	; 0x4081
 800162c:	4822      	ldr	r0, [pc, #136]	; (80016b8 <MX_GPIO_Init+0x150>)
 800162e:	f002 fdab 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4821      	ldr	r0, [pc, #132]	; (80016bc <MX_GPIO_Init+0x154>)
 8001638:	f002 fda6 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800163c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001642:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	481b      	ldr	r0, [pc, #108]	; (80016c0 <MX_GPIO_Init+0x158>)
 8001654:	f002 fbec 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001658:	f244 0381 	movw	r3, #16513	; 0x4081
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <MX_GPIO_Init+0x150>)
 8001672:	f002 fbdd 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <MX_GPIO_Init+0x154>)
 800168e:	f002 fbcf 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_GPIO_Init+0x154>)
 80016a6:	f002 fbc3 	bl	8003e30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016aa:	bf00      	nop
 80016ac:	3730      	adds	r7, #48	; 0x30
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40020800 	.word	0x40020800

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_MspInit+0x4c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x4c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x4c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a33      	ldr	r2, [pc, #204]	; (800180c <HAL_ADC_MspInit+0xec>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d15f      	bne.n	8001802 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b32      	ldr	r3, [pc, #200]	; (8001810 <HAL_ADC_MspInit+0xf0>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a31      	ldr	r2, [pc, #196]	; (8001810 <HAL_ADC_MspInit+0xf0>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_ADC_MspInit+0xf0>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_ADC_MspInit+0xf0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <HAL_ADC_MspInit+0xf0>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_ADC_MspInit+0xf0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800177a:	2310      	movs	r3, #16
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4821      	ldr	r0, [pc, #132]	; (8001814 <HAL_ADC_MspInit+0xf4>)
 800178e:	f002 fb4f 	bl	8003e30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <HAL_ADC_MspInit+0xfc>)
 8001796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017d8:	f001 fc00 	bl	8002fdc <HAL_DMA_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80017e2:	f7ff ff6f 	bl	80016c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_ADC_MspInit+0xf8>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2101      	movs	r1, #1
 80017f6:	2012      	movs	r0, #18
 80017f8:	f001 f9d1 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017fc:	2012      	movs	r0, #18
 80017fe:	f001 f9ea 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40012000 	.word	0x40012000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000
 8001818:	2000024c 	.word	0x2000024c
 800181c:	40026410 	.word	0x40026410

08001820 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <HAL_DAC_MspInit+0xdc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d158      	bne.n	80018f4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_DAC_MspInit+0xe0>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <HAL_DAC_MspInit+0xe0>)
 800184c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_DAC_MspInit+0xe0>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_DAC_MspInit+0xe0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a26      	ldr	r2, [pc, #152]	; (8001900 <HAL_DAC_MspInit+0xe0>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_DAC_MspInit+0xe0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800187a:	2320      	movs	r3, #32
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	481d      	ldr	r0, [pc, #116]	; (8001904 <HAL_DAC_MspInit+0xe4>)
 800188e:	f002 facf 	bl	8003e30 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_DAC_MspInit+0xec>)
 8001896:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 800189a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800189e:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b2:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ba:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c2:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ca:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018da:	f001 fb7f 	bl	8002fdc <HAL_DMA_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80018e4:	f7ff feee 	bl	80016c4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_DAC_MspInit+0xe8>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40007400 	.word	0x40007400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	200002c0 	.word	0x200002c0
 800190c:	400260a0 	.word	0x400260a0

08001910 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_ETH_MspInit+0x174>)
 800192e:	4293      	cmp	r3, r2
 8001930:	f040 80a4 	bne.w	8001a7c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 800193e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 800195a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4a44      	ldr	r2, [pc, #272]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 8001976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a3d      	ldr	r2, [pc, #244]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	6313      	str	r3, [r2, #48]	; 0x30
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ea:	6313      	str	r3, [r2, #48]	; 0x30
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_ETH_MspInit+0x178>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019f8:	2332      	movs	r3, #50	; 0x32
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a08:	230b      	movs	r3, #11
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	481e      	ldr	r0, [pc, #120]	; (8001a8c <HAL_ETH_MspInit+0x17c>)
 8001a14:	f002 fa0c 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a18:	2386      	movs	r3, #134	; 0x86
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a28:	230b      	movs	r3, #11
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a30:	4619      	mov	r1, r3
 8001a32:	4817      	ldr	r0, [pc, #92]	; (8001a90 <HAL_ETH_MspInit+0x180>)
 8001a34:	f002 f9fc 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a4a:	230b      	movs	r3, #11
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	4619      	mov	r1, r3
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <HAL_ETH_MspInit+0x184>)
 8001a56:	f002 f9eb 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a6c:	230b      	movs	r3, #11
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	4619      	mov	r1, r3
 8001a76:	4808      	ldr	r0, [pc, #32]	; (8001a98 <HAL_ETH_MspInit+0x188>)
 8001a78:	f002 f9da 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3738      	adds	r7, #56	; 0x38
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40028000 	.word	0x40028000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40021800 	.word	0x40021800

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_TIM_Base_MspInit+0x48>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d115      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2037      	movs	r0, #55	; 0x37
 8001ad0:	f001 f865 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ad4:	2037      	movs	r0, #55	; 0x37
 8001ad6:	f001 f87e 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40001400 	.word	0x40001400
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a35      	ldr	r2, [pc, #212]	; (8001be0 <HAL_UART_MspInit+0xf4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d163      	bne.n	8001bd6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <HAL_UART_MspInit+0xf8>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <HAL_UART_MspInit+0xf8>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_UART_MspInit+0xf8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_UART_MspInit+0xf8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <HAL_UART_MspInit+0xf8>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_UART_MspInit+0xf8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4821      	ldr	r0, [pc, #132]	; (8001be8 <HAL_UART_MspInit+0xfc>)
 8001b64:	f002 f964 	bl	8003e30 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b6a:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_UART_MspInit+0x104>)
 8001b6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b74:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b88:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001baa:	4810      	ldr	r0, [pc, #64]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001bac:	f001 fa16 	bl	8002fdc <HAL_DMA_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001bb6:	f7ff fd85 	bl	80016c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2027      	movs	r0, #39	; 0x27
 8001bcc:	f000 ffe7 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bd0:	2027      	movs	r0, #39	; 0x27
 8001bd2:	f001 f800 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004800 	.word	0x40004800
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	2000045c 	.word	0x2000045c
 8001bf0:	40026058 	.word	0x40026058

08001bf4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c14:	d13f      	bne.n	8001c96 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a20      	ldr	r2, [pc, #128]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c44:	230a      	movs	r3, #10
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4815      	ldr	r0, [pc, #84]	; (8001ca4 <HAL_PCD_MspInit+0xb0>)
 8001c50:	f002 f8ee 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <HAL_PCD_MspInit+0xb0>)
 8001c6a:	f002 f8e1 	bl	8003e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c78:	6353      	str	r3, [r2, #52]	; 0x34
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_PCD_MspInit+0xac>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	; 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf4:	f000 f902 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <DMA1_Stream3_IRQHandler+0x10>)
 8001d02:	f001 fb03 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000045c 	.word	0x2000045c

08001d10 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA1_Stream6_IRQHandler+0x10>)
 8001d16:	f001 faf9 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200002c0 	.word	0x200002c0

08001d24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <ADC_IRQHandler+0x10>)
 8001d2a:	f000 f96e 	bl	800200a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000204 	.word	0x20000204

08001d38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <USART3_IRQHandler+0x10>)
 8001d3e:	f003 fbf3 	bl	8005528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000418 	.word	0x20000418

08001d4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <TIM7_IRQHandler+0x10>)
 8001d52:	f003 f89f 	bl	8004e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003d0 	.word	0x200003d0

08001d60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <DMA2_Stream0_IRQHandler+0x10>)
 8001d66:	f001 fad1 	bl	800330c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000024c 	.word	0x2000024c

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f004 fdf6 	bl	8006994 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20030000 	.word	0x20030000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	2000a648 	.word	0x2000a648
 8001ddc:	2000a660 	.word	0x2000a660

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0a:	490e      	ldr	r1, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e20:	4c0b      	ldr	r4, [pc, #44]	; (8001e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2e:	f7ff ffd7 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f004 fdb5 	bl	80069a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7ff f93d 	bl	80010b4 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e48:	080085d0 	.word	0x080085d0
  ldr r2, =_sbss
 8001e4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e50:	2000a660 	.word	0x2000a660

08001e54 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <CAN1_RX0_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_Init+0x40>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_Init+0x40>)
 8001e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x40>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 fe81 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fc20 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fe99 	bl	8002bf2 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed8:	f000 fe61 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	2000a64c 	.word	0x2000a64c

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2000a64c 	.word	0x2000a64c

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e033      	b.n	8002002 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fbbc 	bl	8001720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fca:	f023 0302 	bic.w	r3, r3, #2
 8001fce:	f043 0202 	orr.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fb7e 	bl	80026d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ff2:	e001      	b.n	8001ff8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d049      	beq.n	80020d4 <HAL_ADC_IRQHandler+0xca>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d046      	beq.n	80020d4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d12b      	bne.n	80020c4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d127      	bne.n	80020c4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800208c:	2b00      	cmp	r3, #0
 800208e:	d119      	bne.n	80020c4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0220 	bic.w	r2, r2, #32
 800209e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7fe ffc5 	bl	8001054 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0212 	mvn.w	r2, #18
 80020d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d057      	beq.n	800219a <HAL_ADC_IRQHandler+0x190>
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d054      	beq.n	800219a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d139      	bne.n	800218a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12b      	bne.n	800218a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d124      	bne.n	800218a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11d      	bne.n	800218a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d119      	bne.n	800218a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002164:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fc22 	bl	80029d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 020c 	mvn.w	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d017      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x1d6>
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d014      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10d      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f93b 	bl	800244c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f06f 0201 	mvn.w	r2, #1
 80021de:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_ADC_IRQHandler+0x218>
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0220 	mvn.w	r2, #32
 8002210:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f924 	bl	8002460 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0220 	mvn.w	r2, #32
 8002220:	601a      	str	r2, [r3, #0]
  }
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_ADC_Start_DMA+0x1e>
 8002246:	2302      	movs	r3, #2
 8002248:	e0e9      	b.n	800241e <HAL_ADC_Start_DMA+0x1f2>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d018      	beq.n	8002292 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002270:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <HAL_ADC_Start_DMA+0x1fc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6d      	ldr	r2, [pc, #436]	; (800242c <HAL_ADC_Start_DMA+0x200>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0c9a      	lsrs	r2, r3, #18
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002284:	e002      	b.n	800228c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	3b01      	subs	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a0:	d107      	bne.n	80022b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 80a1 	bne.w	8002404 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002300:	d106      	bne.n	8002310 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f023 0206 	bic.w	r2, r3, #6
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
 800230e:	e002      	b.n	8002316 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231e:	4b44      	ldr	r3, [pc, #272]	; (8002430 <HAL_ADC_Start_DMA+0x204>)
 8002320:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	4a43      	ldr	r2, [pc, #268]	; (8002434 <HAL_ADC_Start_DMA+0x208>)
 8002328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4a42      	ldr	r2, [pc, #264]	; (8002438 <HAL_ADC_Start_DMA+0x20c>)
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	4a41      	ldr	r2, [pc, #260]	; (800243c <HAL_ADC_Start_DMA+0x210>)
 8002338:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002342:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002352:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002362:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	334c      	adds	r3, #76	; 0x4c
 800236e:	4619      	mov	r1, r3
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f000 fee0 	bl	8003138 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2b00      	cmp	r3, #0
 8002382:	d12a      	bne.n	80023da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <HAL_ADC_Start_DMA+0x214>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d015      	beq.n	80023ba <HAL_ADC_Start_DMA+0x18e>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <HAL_ADC_Start_DMA+0x218>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_Start_DMA+0x178>
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_ADC_Start_DMA+0x204>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_ADC_Start_DMA+0x21c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d136      	bne.n	800241c <HAL_ADC_Start_DMA+0x1f0>
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <HAL_ADC_Start_DMA+0x204>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d130      	bne.n	800241c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d129      	bne.n	800241c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e020      	b.n	800241c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_ADC_Start_DMA+0x214>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d11b      	bne.n	800241c <HAL_ADC_Start_DMA+0x1f0>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d114      	bne.n	800241c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	e00b      	b.n	800241c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f043 0210 	orr.w	r2, r3, #16
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000
 800242c:	431bde83 	.word	0x431bde83
 8002430:	40012300 	.word	0x40012300
 8002434:	080028d1 	.word	0x080028d1
 8002438:	0800298b 	.word	0x0800298b
 800243c:	080029a7 	.word	0x080029a7
 8002440:	40012000 	.word	0x40012000
 8002444:	40012100 	.word	0x40012100
 8002448:	40012200 	.word	0x40012200

0800244c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1c>
 800248c:	2302      	movs	r3, #2
 800248e:	e113      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x244>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b09      	cmp	r3, #9
 800249e:	d925      	bls.n	80024ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68d9      	ldr	r1, [r3, #12]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	3b1e      	subs	r3, #30
 80024b6:	2207      	movs	r2, #7
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43da      	mvns	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	400a      	ands	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68d9      	ldr	r1, [r3, #12]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	4603      	mov	r3, r0
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4403      	add	r3, r0
 80024de:	3b1e      	subs	r3, #30
 80024e0:	409a      	lsls	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	e022      	b.n	8002532 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6919      	ldr	r1, [r3, #16]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	2207      	movs	r2, #7
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	400a      	ands	r2, r1
 800250e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6919      	ldr	r1, [r3, #16]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	4603      	mov	r3, r0
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4403      	add	r3, r0
 8002528:	409a      	lsls	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d824      	bhi.n	8002584 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b05      	subs	r3, #5
 800254c:	221f      	movs	r2, #31
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	400a      	ands	r2, r1
 800255a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	3b05      	subs	r3, #5
 8002576:	fa00 f203 	lsl.w	r2, r0, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	635a      	str	r2, [r3, #52]	; 0x34
 8002582:	e04c      	b.n	800261e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	d824      	bhi.n	80025d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b23      	subs	r3, #35	; 0x23
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43da      	mvns	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	400a      	ands	r2, r1
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3b23      	subs	r3, #35	; 0x23
 80025c8:	fa00 f203 	lsl.w	r2, r0, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
 80025d4:	e023      	b.n	800261e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b41      	subs	r3, #65	; 0x41
 80025e8:	221f      	movs	r2, #31
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	400a      	ands	r2, r1
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	3b41      	subs	r3, #65	; 0x41
 8002612:	fa00 f203 	lsl.w	r2, r0, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_ADC_ConfigChannel+0x250>)
 8002620:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a28      	ldr	r2, [pc, #160]	; (80026c8 <HAL_ADC_ConfigChannel+0x254>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d10f      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1d8>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b12      	cmp	r3, #18
 8002632:	d10b      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_ADC_ConfigChannel+0x254>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d12b      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x23a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_ADC_ConfigChannel+0x258>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <HAL_ADC_ConfigChannel+0x1f4>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b11      	cmp	r3, #17
 8002666:	d122      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_ADC_ConfigChannel+0x258>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d111      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_ADC_ConfigChannel+0x25c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_ADC_ConfigChannel+0x260>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	0c9a      	lsrs	r2, r3, #18
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026a0:	e002      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f9      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40012300 	.word	0x40012300
 80026c8:	40012000 	.word	0x40012000
 80026cc:	10000012 	.word	0x10000012
 80026d0:	20000000 	.word	0x20000000
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <ADC_Init+0x1f0>)
 80026e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800270c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	021a      	lsls	r2, r3, #8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	4a58      	ldr	r2, [pc, #352]	; (80028cc <ADC_Init+0x1f4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d022      	beq.n	80027b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800277e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e00f      	b.n	80027d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0202 	bic.w	r2, r2, #2
 80027e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7e1b      	ldrb	r3, [r3, #24]
 80027f0:	005a      	lsls	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	3b01      	subs	r3, #1
 8002830:	035a      	lsls	r2, r3, #13
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	e007      	b.n	800284c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	3b01      	subs	r3, #1
 8002868:	051a      	lsls	r2, r3, #20
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800288e:	025a      	lsls	r2, r3, #9
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6899      	ldr	r1, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	029a      	lsls	r2, r3, #10
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40012300 	.word	0x40012300
 80028cc:	0f000001 	.word	0x0f000001

080028d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13c      	bne.n	8002964 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d12b      	bne.n	800295c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002908:	2b00      	cmp	r3, #0
 800290a:	d127      	bne.n	800295c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002924:	2b00      	cmp	r3, #0
 8002926:	d119      	bne.n	800295c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0220 	bic.w	r2, r2, #32
 8002936:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d105      	bne.n	800295c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7fe fb79 	bl	8001054 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002962:	e00e      	b.n	8002982 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff fd75 	bl	8002460 <HAL_ADC_ErrorCallback>
}
 8002976:	e004      	b.n	8002982 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7fe fb73 	bl	8001084 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f043 0204 	orr.w	r2, r3, #4
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fd4a 	bl	8002460 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e014      	b.n	8002c46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	791b      	ldrb	r3, [r3, #4]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7fe fdf7 	bl	8001820 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	795b      	ldrb	r3, [r3, #5]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_DAC_Start_DMA+0x22>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0ab      	b.n	8002dca <HAL_DAC_Start_DMA+0x17a>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12f      	bne.n	8002ce4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_DAC_Start_DMA+0x184>)
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <HAL_DAC_Start_DMA+0x188>)
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_DAC_Start_DMA+0x18c>)
 8002c9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002caa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d013      	beq.n	8002cda <HAL_DAC_Start_DMA+0x8a>
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d845      	bhi.n	8002d44 <HAL_DAC_Start_DMA+0xf4>
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_DAC_Start_DMA+0x76>
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d005      	beq.n	8002cd0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002cc4:	e03e      	b.n	8002d44 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	613b      	str	r3, [r7, #16]
        break;
 8002cce:	e03c      	b.n	8002d4a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	613b      	str	r3, [r7, #16]
        break;
 8002cd8:	e037      	b.n	8002d4a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3310      	adds	r3, #16
 8002ce0:	613b      	str	r3, [r7, #16]
        break;
 8002ce2:	e032      	b.n	8002d4a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <HAL_DAC_Start_DMA+0x190>)
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	; (8002de4 <HAL_DAC_Start_DMA+0x194>)
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a3b      	ldr	r2, [pc, #236]	; (8002de8 <HAL_DAC_Start_DMA+0x198>)
 8002cfa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d013      	beq.n	8002d3a <HAL_DAC_Start_DMA+0xea>
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d817      	bhi.n	8002d48 <HAL_DAC_Start_DMA+0xf8>
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_DAC_Start_DMA+0xd6>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d005      	beq.n	8002d30 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d24:	e010      	b.n	8002d48 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	613b      	str	r3, [r7, #16]
        break;
 8002d2e:	e00c      	b.n	8002d4a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3318      	adds	r3, #24
 8002d36:	613b      	str	r3, [r7, #16]
        break;
 8002d38:	e007      	b.n	8002d4a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	331c      	adds	r3, #28
 8002d40:	613b      	str	r3, [r7, #16]
        break;
 8002d42:	e002      	b.n	8002d4a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002d44:	bf00      	nop
 8002d46:	e000      	b.n	8002d4a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002d48:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6898      	ldr	r0, [r3, #8]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	f000 f9e5 	bl	8003138 <HAL_DMA_Start_IT>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	75fb      	strb	r3, [r7, #23]
 8002d72:	e010      	b.n	8002d96 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68d8      	ldr	r0, [r3, #12]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	f000 f9d3 	bl	8003138 <HAL_DMA_Start_IT>
 8002d92:	4603      	mov	r3, r0
 8002d94:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e005      	b.n	8002dc8 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f043 0204 	orr.w	r2, r3, #4
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	08002ec7 	.word	0x08002ec7
 8002dd8:	08002ee9 	.word	0x08002ee9
 8002ddc:	08002f05 	.word	0x08002f05
 8002de0:	08002f6f 	.word	0x08002f6f
 8002de4:	08002f91 	.word	0x08002f91
 8002de8:	08002fad 	.word	0x08002fad

08002dec <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	795b      	ldrb	r3, [r3, #5]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_DAC_ConfigChannel+0x18>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e03c      	b.n	8002eba <HAL_DAC_ConfigChannel+0x92>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4013      	ands	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	22c0      	movs	r2, #192	; 0xc0
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff ff89 	bl	8002dec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	711a      	strb	r2, [r3, #4]
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff82 	bl	8002e00 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f043 0204 	orr.w	r2, r3, #4
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff ff78 	bl	8002e14 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	711a      	strb	r2, [r3, #4]
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ffd8 	bl	8002f32 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	711a      	strb	r2, [r3, #4]
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff ffd1 	bl	8002f46 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f7ff ffc7 	bl	8002f5a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	711a      	strb	r2, [r3, #4]
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7fe ff9c 	bl	8001f24 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e099      	b.n	800312c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003018:	e00f      	b.n	800303a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800301a:	f7fe ff83 	bl	8001f24 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b05      	cmp	r3, #5
 8003026:	d908      	bls.n	800303a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2203      	movs	r2, #3
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e078      	b.n	800312c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e8      	bne.n	800301a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_DMA_Init+0x158>)
 8003054:	4013      	ands	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b04      	cmp	r3, #4
 8003092:	d107      	bne.n	80030a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	4313      	orrs	r3, r2
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0307 	bic.w	r3, r3, #7
 80030ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d117      	bne.n	80030fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fb01 	bl	80036e8 <DMA_CheckFifoParam>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030fa:	2301      	movs	r3, #1
 80030fc:	e016      	b.n	800312c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fab8 	bl	800367c <DMA_CalcBaseAndBitshift>
 800310c:	4603      	mov	r3, r0
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	223f      	movs	r2, #63	; 0x3f
 8003116:	409a      	lsls	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	f010803f 	.word	0xf010803f

08003138 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_DMA_Start_IT+0x26>
 800315a:	2302      	movs	r3, #2
 800315c:	e040      	b.n	80031e0 <HAL_DMA_Start_IT+0xa8>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d12f      	bne.n	80031d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fa4a 	bl	8003620 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	223f      	movs	r2, #63	; 0x3f
 8003192:	409a      	lsls	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0216 	orr.w	r2, r2, #22
 80031a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0208 	orr.w	r2, r2, #8
 80031be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e005      	b.n	80031de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031f6:	f7fe fe95 	bl	8001f24 <HAL_GetTick>
 80031fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d008      	beq.n	800321a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e052      	b.n	80032c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0216 	bic.w	r2, r2, #22
 8003228:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003238:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_DMA_Abort+0x62>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0208 	bic.w	r2, r2, #8
 8003258:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326a:	e013      	b.n	8003294 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800326c:	f7fe fe5a 	bl	8001f24 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b05      	cmp	r3, #5
 8003278:	d90c      	bls.n	8003294 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2203      	movs	r2, #3
 8003284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e015      	b.n	80032c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e4      	bne.n	800326c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	223f      	movs	r2, #63	; 0x3f
 80032a8:	409a      	lsls	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d004      	beq.n	80032e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00c      	b.n	8003300 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2205      	movs	r2, #5
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003318:	4b8e      	ldr	r3, [pc, #568]	; (8003554 <HAL_DMA_IRQHandler+0x248>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a8e      	ldr	r2, [pc, #568]	; (8003558 <HAL_DMA_IRQHandler+0x24c>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2208      	movs	r2, #8
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2208      	movs	r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2201      	movs	r2, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2204      	movs	r2, #4
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00b      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2204      	movs	r2, #4
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2210      	movs	r2, #16
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d043      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03c      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2210      	movs	r2, #16
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d018      	beq.n	800344e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d024      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
 800343a:	e01f      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e016      	b.n	800347c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0208 	bic.w	r2, r2, #8
 800346a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	2220      	movs	r2, #32
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 808f 	beq.w	80035ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8087 	beq.w	80035ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2220      	movs	r2, #32
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d136      	bne.n	8003524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0216 	bic.w	r2, r2, #22
 80034c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <HAL_DMA_IRQHandler+0x1da>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0208 	bic.w	r2, r2, #8
 80034f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	223f      	movs	r2, #63	; 0x3f
 80034fc:	409a      	lsls	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d07e      	beq.n	8003618 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
        }
        return;
 8003522:	e079      	b.n	8003618 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01d      	beq.n	800356e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10d      	bne.n	800355c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	2b00      	cmp	r3, #0
 8003546:	d031      	beq.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
 8003550:	e02c      	b.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
 8003552:	bf00      	nop
 8003554:	20000000 	.word	0x20000000
 8003558:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d023      	beq.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e01e      	b.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10f      	bne.n	800359c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0210 	bic.w	r2, r2, #16
 800358a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d032      	beq.n	800361a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d022      	beq.n	8003606 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2205      	movs	r2, #5
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3301      	adds	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d307      	bcc.n	80035f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f2      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x2cc>
 80035f2:	e000      	b.n	80035f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
 8003616:	e000      	b.n	800361a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003618:	bf00      	nop
    }
  }
}
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800363c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d108      	bne.n	8003660 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800365e:	e007      	b.n	8003670 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3b10      	subs	r3, #16
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <DMA_CalcBaseAndBitshift+0x64>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003696:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d909      	bls.n	80036be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	1d1a      	adds	r2, r3, #4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	; 0x58
 80036bc:	e007      	b.n	80036ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	aaaaaaab 	.word	0xaaaaaaab
 80036e4:	080083a8 	.word	0x080083a8

080036e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11f      	bne.n	8003742 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d856      	bhi.n	80037b6 <DMA_CheckFifoParam+0xce>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <DMA_CheckFifoParam+0x28>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003721 	.word	0x08003721
 8003714:	08003733 	.word	0x08003733
 8003718:	08003721 	.word	0x08003721
 800371c:	080037b7 	.word	0x080037b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d046      	beq.n	80037ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003730:	e043      	b.n	80037ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800373a:	d140      	bne.n	80037be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e03d      	b.n	80037be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374a:	d121      	bne.n	8003790 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d837      	bhi.n	80037c2 <DMA_CheckFifoParam+0xda>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <DMA_CheckFifoParam+0x70>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	08003769 	.word	0x08003769
 800375c:	0800376f 	.word	0x0800376f
 8003760:	08003769 	.word	0x08003769
 8003764:	08003781 	.word	0x08003781
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      break;
 800376c:	e030      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d025      	beq.n	80037c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377e:	e022      	b.n	80037c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003788:	d11f      	bne.n	80037ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800378e:	e01c      	b.n	80037ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d903      	bls.n	800379e <DMA_CheckFifoParam+0xb6>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d003      	beq.n	80037a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800379c:	e018      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      break;
 80037a2:	e015      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00e      	beq.n	80037ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e00b      	b.n	80037ce <DMA_CheckFifoParam+0xe6>
      break;
 80037b6:	bf00      	nop
 80037b8:	e00a      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e008      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e006      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e004      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037c6:	bf00      	nop
 80037c8:	e002      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
    }
  } 
  
  return status; 
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06c      	b.n	80038cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2223      	movs	r2, #35	; 0x23
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fe f883 	bl	8001910 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_ETH_Init+0xf4>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <HAL_ETH_Init+0xf4>)
 8003814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003818:	6453      	str	r3, [r2, #68]	; 0x44
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_ETH_Init+0xf4>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003826:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_ETH_Init+0xf8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <HAL_ETH_Init+0xf8>)
 800382c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003830:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <HAL_ETH_Init+0xf8>)
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4927      	ldr	r1, [pc, #156]	; (80038d8 <HAL_ETH_Init+0xf8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_ETH_Init+0xf8>)
 8003842:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800385a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800385c:	f7fe fb62 	bl	8001f24 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003862:	e011      	b.n	8003888 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003864:	f7fe fb5e 	bl	8001f24 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003872:	d909      	bls.n	8003888 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2204      	movs	r2, #4
 8003878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	22e0      	movs	r2, #224	; 0xe0
 8003880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e021      	b.n	80038cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e4      	bne.n	8003864 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f958 	bl	8003b50 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f9ff 	bl	8003ca4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa55 	bl	8003d56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	461a      	mov	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f9bd 	bl	8003c34 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2210      	movs	r2, #16
 80038c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40013800 	.word	0x40013800

080038dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <ETH_SetMACConfig+0x15c>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	7c1b      	ldrb	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <ETH_SetMACConfig+0x28>
 80038fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003902:	e000      	b.n	8003906 <ETH_SetMACConfig+0x2a>
 8003904:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	7c5b      	ldrb	r3, [r3, #17]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <ETH_SetMACConfig+0x38>
 800390e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003912:	e000      	b.n	8003916 <ETH_SetMACConfig+0x3a>
 8003914:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003916:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800391c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	7fdb      	ldrb	r3, [r3, #31]
 8003922:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003924:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800392a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	7f92      	ldrb	r2, [r2, #30]
 8003930:	2a00      	cmp	r2, #0
 8003932:	d102      	bne.n	800393a <ETH_SetMACConfig+0x5e>
 8003934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003938:	e000      	b.n	800393c <ETH_SetMACConfig+0x60>
 800393a:	2200      	movs	r2, #0
                        macconf->Speed |
 800393c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	7f1b      	ldrb	r3, [r3, #28]
 8003942:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003944:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800394a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	791b      	ldrb	r3, [r3, #4]
 8003950:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003952:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	f892 2020 	ldrb.w	r2, [r2, #32]
 800395a:	2a00      	cmp	r2, #0
 800395c:	d102      	bne.n	8003964 <ETH_SetMACConfig+0x88>
 800395e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003962:	e000      	b.n	8003966 <ETH_SetMACConfig+0x8a>
 8003964:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003966:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	7bdb      	ldrb	r3, [r3, #15]
 800396c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800396e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003974:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800397c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800397e:	4313      	orrs	r3, r2
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003996:	2001      	movs	r0, #1
 8003998:	f7fe fad0 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80039b2:	4013      	ands	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	d101      	bne.n	80039ca <ETH_SetMACConfig+0xee>
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	e000      	b.n	80039cc <ETH_SetMACConfig+0xf0>
 80039ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80039d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80039da:	2a01      	cmp	r2, #1
 80039dc:	d101      	bne.n	80039e2 <ETH_SetMACConfig+0x106>
 80039de:	2208      	movs	r2, #8
 80039e0:	e000      	b.n	80039e4 <ETH_SetMACConfig+0x108>
 80039e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80039e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80039ec:	2a01      	cmp	r2, #1
 80039ee:	d101      	bne.n	80039f4 <ETH_SetMACConfig+0x118>
 80039f0:	2204      	movs	r2, #4
 80039f2:	e000      	b.n	80039f6 <ETH_SetMACConfig+0x11a>
 80039f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80039f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80039fe:	2a01      	cmp	r2, #1
 8003a00:	d101      	bne.n	8003a06 <ETH_SetMACConfig+0x12a>
 8003a02:	2202      	movs	r2, #2
 8003a04:	e000      	b.n	8003a08 <ETH_SetMACConfig+0x12c>
 8003a06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a20:	2001      	movs	r0, #1
 8003a22:	f7fe fa8b 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	619a      	str	r2, [r3, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	ff20810f 	.word	0xff20810f

08003a3c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <ETH_SetDMAConfig+0x110>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	7b1b      	ldrb	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <ETH_SetDMAConfig+0x2c>
 8003a62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a66:	e000      	b.n	8003a6a <ETH_SetDMAConfig+0x2e>
 8003a68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	7b5b      	ldrb	r3, [r3, #13]
 8003a6e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a70:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	7f52      	ldrb	r2, [r2, #29]
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d102      	bne.n	8003a80 <ETH_SetDMAConfig+0x44>
 8003a7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a7e:	e000      	b.n	8003a82 <ETH_SetDMAConfig+0x46>
 8003a80:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	7b9b      	ldrb	r3, [r3, #14]
 8003a88:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a8a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	7f1b      	ldrb	r3, [r3, #28]
 8003a96:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	7f9b      	ldrb	r3, [r3, #30]
 8003a9e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003aa0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003aa6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7fe fa32 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003af0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003af6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003afc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b04:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003b06:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b0e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b14:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b22:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b30:	2001      	movs	r0, #1
 8003b32:	f7fe fa03 	bl	8001f3c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	f8de3f23 	.word	0xf8de3f23

08003b50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0a6      	sub	sp, #152	; 0x98
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003b64:	2300      	movs	r3, #0
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003bb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003bc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fe86 	bl	80038dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c04:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c0a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c10:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003c20:	f107 0308 	add.w	r3, r7, #8
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ff08 	bl	8003a3c <ETH_SetDMAConfig>
}
 8003c2c:	bf00      	nop
 8003c2e:	3798      	adds	r7, #152	; 0x98
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3305      	adds	r3, #5
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	3204      	adds	r2, #4
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <ETH_MACAddressConfig+0x68>)
 8003c56:	4413      	add	r3, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3303      	adds	r3, #3
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	061a      	lsls	r2, r3, #24
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3302      	adds	r3, #2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3301      	adds	r3, #1
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <ETH_MACAddressConfig+0x6c>)
 8003c86:	4413      	add	r3, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6013      	str	r3, [r2, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40028040 	.word	0x40028040
 8003ca0:	40028044 	.word	0x40028044

08003ca4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e03e      	b.n	8003d30 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68d9      	ldr	r1, [r3, #12]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	3206      	adds	r2, #6
 8003ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d80c      	bhi.n	8003d14 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	e004      	b.n	8003d1e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d9bd      	bls.n	8003cb2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d48:	611a      	str	r2, [r3, #16]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e046      	b.n	8003df2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6919      	ldr	r1, [r3, #16]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003da0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003da8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	3212      	adds	r2, #18
 8003dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d80c      	bhi.n	8003de2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6919      	ldr	r1, [r3, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	e004      	b.n	8003dec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3301      	adds	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d9b5      	bls.n	8003d64 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e22:	60da      	str	r2, [r3, #12]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e177      	b.n	800413c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	f040 8166 	bne.w	8004136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d005      	beq.n	8003e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d130      	bne.n	8003ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eb8:	2201      	movs	r2, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 0201 	and.w	r2, r3, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d017      	beq.n	8003f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d123      	bne.n	8003f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	08da      	lsrs	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3208      	adds	r2, #8
 8003f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	220f      	movs	r2, #15
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	08da      	lsrs	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3208      	adds	r2, #8
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0203 	and.w	r2, r3, #3
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80c0 	beq.w	8004136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_GPIO_Init+0x324>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a65      	ldr	r2, [pc, #404]	; (8004154 <HAL_GPIO_Init+0x324>)
 8003fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b63      	ldr	r3, [pc, #396]	; (8004154 <HAL_GPIO_Init+0x324>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fd2:	4a61      	ldr	r2, [pc, #388]	; (8004158 <HAL_GPIO_Init+0x328>)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	089b      	lsrs	r3, r3, #2
 8003fd8:	3302      	adds	r3, #2
 8003fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	220f      	movs	r2, #15
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_GPIO_Init+0x32c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d037      	beq.n	800406e <HAL_GPIO_Init+0x23e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a57      	ldr	r2, [pc, #348]	; (8004160 <HAL_GPIO_Init+0x330>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <HAL_GPIO_Init+0x23a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a56      	ldr	r2, [pc, #344]	; (8004164 <HAL_GPIO_Init+0x334>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02b      	beq.n	8004066 <HAL_GPIO_Init+0x236>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a55      	ldr	r2, [pc, #340]	; (8004168 <HAL_GPIO_Init+0x338>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d025      	beq.n	8004062 <HAL_GPIO_Init+0x232>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a54      	ldr	r2, [pc, #336]	; (800416c <HAL_GPIO_Init+0x33c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <HAL_GPIO_Init+0x22e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a53      	ldr	r2, [pc, #332]	; (8004170 <HAL_GPIO_Init+0x340>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d019      	beq.n	800405a <HAL_GPIO_Init+0x22a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_GPIO_Init+0x344>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_GPIO_Init+0x226>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_GPIO_Init+0x348>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00d      	beq.n	8004052 <HAL_GPIO_Init+0x222>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a50      	ldr	r2, [pc, #320]	; (800417c <HAL_GPIO_Init+0x34c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <HAL_GPIO_Init+0x21e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4f      	ldr	r2, [pc, #316]	; (8004180 <HAL_GPIO_Init+0x350>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_GPIO_Init+0x21a>
 8004046:	2309      	movs	r3, #9
 8004048:	e012      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800404a:	230a      	movs	r3, #10
 800404c:	e010      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800404e:	2308      	movs	r3, #8
 8004050:	e00e      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004052:	2307      	movs	r3, #7
 8004054:	e00c      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004056:	2306      	movs	r3, #6
 8004058:	e00a      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800405a:	2305      	movs	r3, #5
 800405c:	e008      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800405e:	2304      	movs	r3, #4
 8004060:	e006      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004062:	2303      	movs	r3, #3
 8004064:	e004      	b.n	8004070 <HAL_GPIO_Init+0x240>
 8004066:	2302      	movs	r3, #2
 8004068:	e002      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_GPIO_Init+0x240>
 800406e:	2300      	movs	r3, #0
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f002 0203 	and.w	r2, r2, #3
 8004076:	0092      	lsls	r2, r2, #2
 8004078:	4093      	lsls	r3, r2
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004080:	4935      	ldr	r1, [pc, #212]	; (8004158 <HAL_GPIO_Init+0x328>)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	089b      	lsrs	r3, r3, #2
 8004086:	3302      	adds	r3, #2
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_GPIO_Init+0x354>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040b2:	4a34      	ldr	r2, [pc, #208]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040dc:	4a29      	ldr	r2, [pc, #164]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_GPIO_Init+0x354>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004106:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <HAL_GPIO_Init+0x354>)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_GPIO_Init+0x354>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <HAL_GPIO_Init+0x354>)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3301      	adds	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	f67f ae84 	bls.w	8003e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3724      	adds	r7, #36	; 0x24
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	40013800 	.word	0x40013800
 800415c:	40020000 	.word	0x40020000
 8004160:	40020400 	.word	0x40020400
 8004164:	40020800 	.word	0x40020800
 8004168:	40020c00 	.word	0x40020c00
 800416c:	40021000 	.word	0x40021000
 8004170:	40021400 	.word	0x40021400
 8004174:	40021800 	.word	0x40021800
 8004178:	40021c00 	.word	0x40021c00
 800417c:	40022000 	.word	0x40022000
 8004180:	40022400 	.word	0x40022400
 8004184:	40013c00 	.word	0x40013c00

08004188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041a4:	e003      	b.n	80041ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	041a      	lsls	r2, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	619a      	str	r2, [r3, #24]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041bc:	b08f      	sub	sp, #60	; 0x3c
 80041be:	af0a      	add	r7, sp, #40	; 0x28
 80041c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e10f      	b.n	80043ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd fd04 	bl	8001bf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2203      	movs	r2, #3
 80041f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f002 f921 	bl	8006452 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	687e      	ldr	r6, [r7, #4]
 8004218:	466d      	mov	r5, sp
 800421a:	f106 0410 	add.w	r4, r6, #16
 800421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800422a:	e885 0003 	stmia.w	r5, {r0, r1}
 800422e:	1d33      	adds	r3, r6, #4
 8004230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004232:	6838      	ldr	r0, [r7, #0]
 8004234:	f002 f8ac 	bl	8006390 <USB_CoreInit>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0d0      	b.n	80043ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f002 f90f 	bl	8006474 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e04a      	b.n	80042f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800425c:	7bfa      	ldrb	r2, [r7, #15]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	333d      	adds	r3, #61	; 0x3d
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	333c      	adds	r3, #60	; 0x3c
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	b298      	uxth	r0, r3
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3344      	adds	r3, #68	; 0x44
 8004298:	4602      	mov	r2, r0
 800429a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	3340      	adds	r3, #64	; 0x40
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042b0:	7bfa      	ldrb	r2, [r7, #15]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	3348      	adds	r3, #72	; 0x48
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042c4:	7bfa      	ldrb	r2, [r7, #15]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	334c      	adds	r3, #76	; 0x4c
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3354      	adds	r3, #84	; 0x54
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	3301      	adds	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3af      	bcc.n	800425c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
 8004300:	e044      	b.n	800438c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004318:	7bfa      	ldrb	r2, [r7, #15]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	3301      	adds	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d3b5      	bcc.n	8004302 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	687e      	ldr	r6, [r7, #4]
 800439e:	466d      	mov	r5, sp
 80043a0:	f106 0410 	add.w	r4, r6, #16
 80043a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80043b4:	1d33      	adds	r3, r6, #4
 80043b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	f002 f8a7 	bl	800650c <USB_DevInit>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e00d      	b.n	80043ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f002 fa72 	bl	80068ce <USB_DevDisconnect>

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e267      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d075      	beq.n	80044fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004412:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b04      	cmp	r3, #4
 800441c:	d00c      	beq.n	8004438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441e:	4b85      	ldr	r3, [pc, #532]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004426:	2b08      	cmp	r3, #8
 8004428:	d112      	bne.n	8004450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442a:	4b82      	ldr	r3, [pc, #520]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004436:	d10b      	bne.n	8004450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	4b7e      	ldr	r3, [pc, #504]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05b      	beq.n	80044fc <HAL_RCC_OscConfig+0x108>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d157      	bne.n	80044fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e242      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d106      	bne.n	8004468 <HAL_RCC_OscConfig+0x74>
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e01d      	b.n	80044a4 <HAL_RCC_OscConfig+0xb0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x98>
 8004472:	4b70      	ldr	r3, [pc, #448]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6f      	ldr	r2, [pc, #444]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_OscConfig+0xb0>
 800448c:	4b69      	ldr	r3, [pc, #420]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a68      	ldr	r2, [pc, #416]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b66      	ldr	r3, [pc, #408]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a65      	ldr	r2, [pc, #404]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800449e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d013      	beq.n	80044d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fd fd3a 	bl	8001f24 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fd fd36 	bl	8001f24 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e207      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0xc0>
 80044d2:	e014      	b.n	80044fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fd fd26 	bl	8001f24 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fd fd22 	bl	8001f24 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1f3      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ee:	4b51      	ldr	r3, [pc, #324]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0xe8>
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d063      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450a:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800451e:	2b08      	cmp	r3, #8
 8004520:	d11c      	bne.n	800455c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b44      	ldr	r3, [pc, #272]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d116      	bne.n	800455c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452e:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_RCC_OscConfig+0x152>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e1c7      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4937      	ldr	r1, [pc, #220]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455a:	e03a      	b.n	80045d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCC_OscConfig+0x244>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd fcdb 	bl	8001f24 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7fd fcd7 	bl	8001f24 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1a8      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4925      	ldr	r1, [pc, #148]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]
 80045a4:	e015      	b.n	80045d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_OscConfig+0x244>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fcba 	bl	8001f24 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b4:	f7fd fcb6 	bl	8001f24 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e187      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d036      	beq.n	800464c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_RCC_OscConfig+0x248>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd fc9a 	bl	8001f24 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fd fc96 	bl	8001f24 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e167      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x200>
 8004612:	e01b      	b.n	800464c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_RCC_OscConfig+0x248>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fd fc83 	bl	8001f24 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	e00e      	b.n	8004640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004622:	f7fd fc7f 	bl	8001f24 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d907      	bls.n	8004640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e150      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
 8004634:	40023800 	.word	0x40023800
 8004638:	42470000 	.word	0x42470000
 800463c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	4b88      	ldr	r3, [pc, #544]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ea      	bne.n	8004622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8097 	beq.w	8004788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b81      	ldr	r3, [pc, #516]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	4b7d      	ldr	r3, [pc, #500]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a7c      	ldr	r2, [pc, #496]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b7a      	ldr	r3, [pc, #488]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b77      	ldr	r3, [pc, #476]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d118      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004696:	4b74      	ldr	r3, [pc, #464]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a2:	f7fd fc3f 	bl	8001f24 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7fd fc3b 	bl	8001f24 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e10c      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x2ea>
 80046d0:	4b64      	ldr	r3, [pc, #400]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a63      	ldr	r2, [pc, #396]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e01c      	b.n	8004718 <HAL_RCC_OscConfig+0x324>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0x30c>
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a5b      	ldr	r2, [pc, #364]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0x324>
 8004700:	4b58      	ldr	r3, [pc, #352]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a57      	ldr	r2, [pc, #348]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	4b55      	ldr	r3, [pc, #340]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a54      	ldr	r2, [pc, #336]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004712:	f023 0304 	bic.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fd fc00 	bl	8001f24 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fd fbfc 	bl	8001f24 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e0cb      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	4b49      	ldr	r3, [pc, #292]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ee      	beq.n	8004728 <HAL_RCC_OscConfig+0x334>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474c:	f7fd fbea 	bl	8001f24 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	e00a      	b.n	800476a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7fd fbe6 	bl	8001f24 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0b5      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	4b3e      	ldr	r3, [pc, #248]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ee      	bne.n	8004754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477c:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	4a38      	ldr	r2, [pc, #224]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a1 	beq.w	80048d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004792:	4b34      	ldr	r3, [pc, #208]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b08      	cmp	r3, #8
 800479c:	d05c      	beq.n	8004858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d141      	bne.n	800482a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCC_OscConfig+0x478>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fd fbba 	bl	8001f24 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fd fbb6 	bl	8001f24 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e087      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	019b      	lsls	r3, r3, #6
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	3b01      	subs	r3, #1
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	491b      	ldr	r1, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x478>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fd fb8f 	bl	8001f24 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480a:	f7fd fb8b 	bl	8001f24 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e05c      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x416>
 8004828:	e054      	b.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <HAL_RCC_OscConfig+0x478>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fd fb78 	bl	8001f24 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004838:	f7fd fb74 	bl	8001f24 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e045      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x444>
 8004856:	e03d      	b.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e038      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
 8004864:	40023800 	.word	0x40023800
 8004868:	40007000 	.word	0x40007000
 800486c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCC_OscConfig+0x4ec>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d028      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d121      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d11a      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d111      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	3b01      	subs	r3, #1
 80048ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800

080048e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0cc      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f8:	4b68      	ldr	r3, [pc, #416]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d90c      	bls.n	8004920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b8      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a58      	ldr	r2, [pc, #352]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004950:	4b53      	ldr	r3, [pc, #332]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a52      	ldr	r2, [pc, #328]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800495a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b50      	ldr	r3, [pc, #320]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	494d      	ldr	r1, [pc, #308]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d044      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d119      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e07f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a2:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e06f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b2:	4b3b      	ldr	r3, [pc, #236]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e067      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4934      	ldr	r1, [pc, #208]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d4:	f7fd faa6 	bl	8001f24 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fd faa2 	bl	8001f24 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e04f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d20c      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e032      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4916      	ldr	r1, [pc, #88]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490e      	ldr	r1, [pc, #56]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a6a:	f000 f821 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fd fa06 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023c00 	.word	0x40023c00
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	08008390 	.word	0x08008390
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	20000004 	.word	0x20000004

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab4:	b094      	sub	sp, #80	; 0x50
 8004ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
 8004abc:	2300      	movs	r3, #0
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac8:	4b79      	ldr	r3, [pc, #484]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d00d      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	f200 80e1 	bhi.w	8004c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae2:	e0db      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b73      	ldr	r3, [pc, #460]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ae8:	e0db      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aea:	4b73      	ldr	r3, [pc, #460]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aee:	e0d8      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afa:	4b6d      	ldr	r3, [pc, #436]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d063      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b22:	4622      	mov	r2, r4
 8004b24:	462b      	mov	r3, r5
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	0159      	lsls	r1, r3, #5
 8004b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b34:	0150      	lsls	r0, r2, #5
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	1a51      	subs	r1, r2, r1
 8004b3e:	6139      	str	r1, [r7, #16]
 8004b40:	4629      	mov	r1, r5
 8004b42:	eb63 0301 	sbc.w	r3, r3, r1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b54:	4659      	mov	r1, fp
 8004b56:	018b      	lsls	r3, r1, #6
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5e:	4651      	mov	r1, sl
 8004b60:	018a      	lsls	r2, r1, #6
 8004b62:	4651      	mov	r1, sl
 8004b64:	ebb2 0801 	subs.w	r8, r2, r1
 8004b68:	4659      	mov	r1, fp
 8004b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b82:	4690      	mov	r8, r2
 8004b84:	4699      	mov	r9, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	eb18 0303 	adds.w	r3, r8, r3
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	462b      	mov	r3, r5
 8004b90:	eb49 0303 	adc.w	r3, r9, r3
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	024b      	lsls	r3, r1, #9
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bac:	4621      	mov	r1, r4
 8004bae:	024a      	lsls	r2, r1, #9
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc0:	f7fc f804 	bl	8000bcc <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bcc:	e058      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bce:	4b38      	ldr	r3, [pc, #224]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	4611      	mov	r1, r2
 8004bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	f04f 0000 	mov.w	r0, #0
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	0159      	lsls	r1, r3, #5
 8004bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bfa:	0150      	lsls	r0, r2, #5
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4641      	mov	r1, r8
 8004c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c06:	4649      	mov	r1, r9
 8004c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c20:	ebb2 040a 	subs.w	r4, r2, sl
 8004c24:	eb63 050b 	sbc.w	r5, r3, fp
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	00eb      	lsls	r3, r5, #3
 8004c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	464b      	mov	r3, r9
 8004c44:	eb45 0303 	adc.w	r3, r5, r3
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c56:	4629      	mov	r1, r5
 8004c58:	028b      	lsls	r3, r1, #10
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c60:	4621      	mov	r1, r4
 8004c62:	028a      	lsls	r2, r1, #10
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	61fa      	str	r2, [r7, #28]
 8004c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c74:	f7fb ffaa 	bl	8000bcc <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3750      	adds	r7, #80	; 0x50
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	007a1200 	.word	0x007a1200

08004cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000000 	.word	0x20000000

08004cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cd8:	f7ff fff0 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0a9b      	lsrs	r3, r3, #10
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	080083a0 	.word	0x080083a0

08004cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d00:	f7ff ffdc 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	0b5b      	lsrs	r3, r3, #13
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4903      	ldr	r1, [pc, #12]	; (8004d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	080083a0 	.word	0x080083a0

08004d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e041      	b.n	8004dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc fea6 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 f9d0 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d001      	beq.n	8004ddc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e046      	b.n	8004e6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <HAL_TIM_Base_Start+0xb4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d022      	beq.n	8004e34 <HAL_TIM_Base_Start+0x70>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d01d      	beq.n	8004e34 <HAL_TIM_Base_Start+0x70>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <HAL_TIM_Base_Start+0xb8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d018      	beq.n	8004e34 <HAL_TIM_Base_Start+0x70>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <HAL_TIM_Base_Start+0xbc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <HAL_TIM_Base_Start+0x70>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_TIM_Base_Start+0xc0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00e      	beq.n	8004e34 <HAL_TIM_Base_Start+0x70>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <HAL_TIM_Base_Start+0xc4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d009      	beq.n	8004e34 <HAL_TIM_Base_Start+0x70>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <HAL_TIM_Base_Start+0xc8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_TIM_Base_Start+0x70>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <HAL_TIM_Base_Start+0xcc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d111      	bne.n	8004e58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d010      	beq.n	8004e68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	e007      	b.n	8004e68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800

08004e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0202 	mvn.w	r2, #2
 8004ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f8f8 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8ea 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f8fb 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0204 	mvn.w	r2, #4
 8004f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8ce 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8c0 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8d1 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0208 	mvn.w	r2, #8
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8a4 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f896 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8a7 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0210 	mvn.w	r2, #16
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f87a 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f86c 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f87d 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0201 	mvn.w	r2, #1
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f846 	bl	80050a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f988 	bl	8005354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d10e      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d107      	bne.n	8005070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f842 	bl	80050f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b20      	cmp	r3, #32
 800507c:	d10e      	bne.n	800509c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b20      	cmp	r3, #32
 800508a:	d107      	bne.n	800509c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0220 	mvn.w	r2, #32
 8005094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f952 	bl	8005340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a40      	ldr	r2, [pc, #256]	; (800521c <TIM_Base_SetConfig+0x114>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3c      	ldr	r2, [pc, #240]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3b      	ldr	r2, [pc, #236]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3a      	ldr	r2, [pc, #232]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2f      	ldr	r2, [pc, #188]	; (800521c <TIM_Base_SetConfig+0x114>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d027      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d023      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01f      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a29      	ldr	r2, [pc, #164]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d017      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a28      	ldr	r2, [pc, #160]	; (8005230 <TIM_Base_SetConfig+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a27      	ldr	r2, [pc, #156]	; (8005234 <TIM_Base_SetConfig+0x12c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <TIM_Base_SetConfig+0x130>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a25      	ldr	r2, [pc, #148]	; (800523c <TIM_Base_SetConfig+0x134>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a24      	ldr	r2, [pc, #144]	; (8005240 <TIM_Base_SetConfig+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a23      	ldr	r2, [pc, #140]	; (8005244 <TIM_Base_SetConfig+0x13c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <TIM_Base_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0xf8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a0c      	ldr	r2, [pc, #48]	; (800522c <TIM_Base_SetConfig+0x124>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d103      	bne.n	8005208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	615a      	str	r2, [r3, #20]
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400
 8005238:	40014800 	.word	0x40014800
 800523c:	40001800 	.word	0x40001800
 8005240:	40001c00 	.word	0x40001c00
 8005244:	40002000 	.word	0x40002000

08005248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e05a      	b.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	; (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d01d      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a18      	ldr	r2, [pc, #96]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d10c      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40001800 	.word	0x40001800

08005340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e03f      	b.n	80053fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc fbac 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fd7b 	bl	8005ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b08a      	sub	sp, #40	; 0x28
 8005406:	af02      	add	r7, sp, #8
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b20      	cmp	r3, #32
 8005420:	d17c      	bne.n	800551c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_UART_Transmit+0x2c>
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e075      	b.n	800551e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_UART_Transmit+0x3e>
 800543c:	2302      	movs	r3, #2
 800543e:	e06e      	b.n	800551e <HAL_UART_Transmit+0x11c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2221      	movs	r2, #33	; 0x21
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005456:	f7fc fd65 	bl	8001f24 <HAL_GetTick>
 800545a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	88fa      	ldrh	r2, [r7, #6]
 8005460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005470:	d108      	bne.n	8005484 <HAL_UART_Transmit+0x82>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e003      	b.n	800548c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005494:	e02a      	b.n	80054ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2200      	movs	r2, #0
 800549e:	2180      	movs	r1, #128	; 0x80
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 faf9 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e036      	b.n	800551e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	3302      	adds	r3, #2
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e007      	b.n	80054de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	781a      	ldrb	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	3301      	adds	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1cf      	bne.n	8005496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2140      	movs	r1, #64	; 0x40
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fac9 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e006      	b.n	800551e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b0ba      	sub	sp, #232	; 0xe8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10f      	bne.n	800558e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_UART_IRQHandler+0x66>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fbd3 	bl	8005d32 <UART_Receive_IT>
      return;
 800558c:	e256      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800558e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80de 	beq.w	8005754 <HAL_UART_IRQHandler+0x22c>
 8005598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80d1 	beq.w	8005754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_UART_IRQHandler+0xae>
 80055be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_UART_IRQHandler+0xd2>
 80055e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0202 	orr.w	r2, r3, #2
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_UART_IRQHandler+0xf6>
 8005606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f043 0204 	orr.w	r2, r3, #4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d011      	beq.n	800564e <HAL_UART_IRQHandler+0x126>
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f043 0208 	orr.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 81ed 	beq.w	8005a32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_UART_IRQHandler+0x14e>
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fb5e 	bl	8005d32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <HAL_UART_IRQHandler+0x17a>
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04f      	beq.n	8005742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa66 	bl	8005b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d141      	bne.n	800573a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1d9      	bne.n	80056b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	2b00      	cmp	r3, #0
 8005708:	d013      	beq.n	8005732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	4a7d      	ldr	r2, [pc, #500]	; (8005904 <HAL_UART_IRQHandler+0x3dc>)
 8005710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd fdd6 	bl	80032c8 <HAL_DMA_Abort_IT>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	e00e      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f99a 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e00a      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f996 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e006      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f992 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800574e:	e170      	b.n	8005a32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	bf00      	nop
    return;
 8005752:	e16e      	b.n	8005a32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	2b01      	cmp	r3, #1
 800575a:	f040 814a 	bne.w	80059f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8143 	beq.w	80059f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 813c 	beq.w	80059f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	f040 80b4 	bne.w	8005908 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8140 	beq.w	8005a36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057be:	429a      	cmp	r2, r3
 80057c0:	f080 8139 	bcs.w	8005a36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d6:	f000 8088 	beq.w	80058ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800580a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800581e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1d9      	bne.n	80057da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800584a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800584e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800585c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e1      	bne.n	8005826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3314      	adds	r3, #20
 8005868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800588c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e3      	bne.n	8005862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e3      	bne.n	80058a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fd fc7f 	bl	80031e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8c0 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005900:	e099      	b.n	8005a36 <HAL_UART_IRQHandler+0x50e>
 8005902:	bf00      	nop
 8005904:	08005c3b 	.word	0x08005c3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005910:	b29b      	uxth	r3, r3
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 808b 	beq.w	8005a3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8086 	beq.w	8005a3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005952:	647a      	str	r2, [r7, #68]	; 0x44
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e3      	bne.n	800592e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3314      	adds	r3, #20
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	623b      	str	r3, [r7, #32]
   return(result);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800598a:	633a      	str	r2, [r7, #48]	; 0x30
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e3      	bne.n	8005966 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0310 	bic.w	r3, r3, #16
 80059c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059d0:	61fa      	str	r2, [r7, #28]
 80059d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	617b      	str	r3, [r7, #20]
   return(result);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e3      	bne.n	80059ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f848 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059f0:	e023      	b.n	8005a3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <HAL_UART_IRQHandler+0x4ea>
 80059fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f929 	bl	8005c62 <UART_Transmit_IT>
    return;
 8005a10:	e014      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00e      	beq.n	8005a3c <HAL_UART_IRQHandler+0x514>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f969 	bl	8005d02 <UART_EndTransmit_IT>
    return;
 8005a30:	e004      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
    return;
 8005a32:	bf00      	nop
 8005a34:	e002      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
      return;
 8005a36:	bf00      	nop
 8005a38:	e000      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
      return;
 8005a3a:	bf00      	nop
  }
}
 8005a3c:	37e8      	adds	r7, #232	; 0xe8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop

08005a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b090      	sub	sp, #64	; 0x40
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa8:	e050      	b.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab0:	d04c      	beq.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab8:	f7fc fa34 	bl	8001f24 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d241      	bcs.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ae8:	637a      	str	r2, [r7, #52]	; 0x34
 8005aea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1c:	623a      	str	r2, [r7, #32]
 8005b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	69f9      	ldr	r1, [r7, #28]
 8005b22:	6a3a      	ldr	r2, [r7, #32]
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e00f      	b.n	8005b6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d09f      	beq.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3740      	adds	r7, #64	; 0x40
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b095      	sub	sp, #84	; 0x54
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e5      	bne.n	8005b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3314      	adds	r3, #20
 8005bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e5      	bne.n	8005bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d119      	bne.n	8005c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f023 0310 	bic.w	r3, r3, #16
 8005c02:	647b      	str	r3, [r7, #68]	; 0x44
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c0c:	61ba      	str	r2, [r7, #24]
 8005c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6979      	ldr	r1, [r7, #20]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c2e:	bf00      	nop
 8005c30:	3754      	adds	r7, #84	; 0x54
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff ff09 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b21      	cmp	r3, #33	; 0x21
 8005c74:	d13e      	bne.n	8005cf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7e:	d114      	bne.n	8005caa <UART_Transmit_IT+0x48>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d110      	bne.n	8005caa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	1c9a      	adds	r2, r3, #2
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]
 8005ca8:	e008      	b.n	8005cbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6211      	str	r1, [r2, #32]
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10f      	bne.n	8005cf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e000      	b.n	8005cf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cf4:	2302      	movs	r3, #2
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fe8e 	bl	8005a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b08c      	sub	sp, #48	; 0x30
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b22      	cmp	r3, #34	; 0x22
 8005d44:	f040 80ab 	bne.w	8005e9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d117      	bne.n	8005d82 <UART_Receive_IT+0x50>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d113      	bne.n	8005d82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	1c9a      	adds	r2, r3, #2
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d80:	e026      	b.n	8005dd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d94:	d007      	beq.n	8005da6 <UART_Receive_IT+0x74>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <UART_Receive_IT+0x82>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	e008      	b.n	8005dc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d15a      	bne.n	8005e9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0220 	bic.w	r2, r2, #32
 8005df2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d135      	bne.n	8005e90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f023 0310 	bic.w	r3, r3, #16
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4a:	623a      	str	r2, [r7, #32]
 8005e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	69f9      	ldr	r1, [r7, #28]
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d10a      	bne.n	8005e82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fdf9 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
 8005e8e:	e002      	b.n	8005e96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fde1 	bl	8005a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e002      	b.n	8005ea0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e000      	b.n	8005ea0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
  }
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3730      	adds	r7, #48	; 0x30
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eac:	b0c0      	sub	sp, #256	; 0x100
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	68d9      	ldr	r1, [r3, #12]
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	ea40 0301 	orr.w	r3, r0, r1
 8005ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f00:	f021 010c 	bic.w	r1, r1, #12
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f22:	6999      	ldr	r1, [r3, #24]
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	ea40 0301 	orr.w	r3, r0, r1
 8005f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b8f      	ldr	r3, [pc, #572]	; (8006174 <UART_SetConfig+0x2cc>)
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d005      	beq.n	8005f48 <UART_SetConfig+0xa0>
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b8d      	ldr	r3, [pc, #564]	; (8006178 <UART_SetConfig+0x2d0>)
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d104      	bne.n	8005f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f48:	f7fe fed8 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8005f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f50:	e003      	b.n	8005f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f52:	f7fe febf 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8005f56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f64:	f040 810c 	bne.w	8006180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	1891      	adds	r1, r2, r2
 8005f80:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f82:	415b      	adcs	r3, r3
 8005f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	eb12 0801 	adds.w	r8, r2, r1
 8005f90:	4629      	mov	r1, r5
 8005f92:	eb43 0901 	adc.w	r9, r3, r1
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005faa:	4690      	mov	r8, r2
 8005fac:	4699      	mov	r9, r3
 8005fae:	4623      	mov	r3, r4
 8005fb0:	eb18 0303 	adds.w	r3, r8, r3
 8005fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fb8:	462b      	mov	r3, r5
 8005fba:	eb49 0303 	adc.w	r3, r9, r3
 8005fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	18db      	adds	r3, r3, r3
 8005fda:	653b      	str	r3, [r7, #80]	; 0x50
 8005fdc:	4613      	mov	r3, r2
 8005fde:	eb42 0303 	adc.w	r3, r2, r3
 8005fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fec:	f7fa fdee 	bl	8000bcc <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4b61      	ldr	r3, [pc, #388]	; (800617c <UART_SetConfig+0x2d4>)
 8005ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	011c      	lsls	r4, r3, #4
 8005ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006008:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800600c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006010:	4642      	mov	r2, r8
 8006012:	464b      	mov	r3, r9
 8006014:	1891      	adds	r1, r2, r2
 8006016:	64b9      	str	r1, [r7, #72]	; 0x48
 8006018:	415b      	adcs	r3, r3
 800601a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800601c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006020:	4641      	mov	r1, r8
 8006022:	eb12 0a01 	adds.w	sl, r2, r1
 8006026:	4649      	mov	r1, r9
 8006028:	eb43 0b01 	adc.w	fp, r3, r1
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800603c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006040:	4692      	mov	sl, r2
 8006042:	469b      	mov	fp, r3
 8006044:	4643      	mov	r3, r8
 8006046:	eb1a 0303 	adds.w	r3, sl, r3
 800604a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800604e:	464b      	mov	r3, r9
 8006050:	eb4b 0303 	adc.w	r3, fp, r3
 8006054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006064:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800606c:	460b      	mov	r3, r1
 800606e:	18db      	adds	r3, r3, r3
 8006070:	643b      	str	r3, [r7, #64]	; 0x40
 8006072:	4613      	mov	r3, r2
 8006074:	eb42 0303 	adc.w	r3, r2, r3
 8006078:	647b      	str	r3, [r7, #68]	; 0x44
 800607a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800607e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006082:	f7fa fda3 	bl	8000bcc <__aeabi_uldivmod>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4611      	mov	r1, r2
 800608c:	4b3b      	ldr	r3, [pc, #236]	; (800617c <UART_SetConfig+0x2d4>)
 800608e:	fba3 2301 	umull	r2, r3, r3, r1
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	2264      	movs	r2, #100	; 0x64
 8006096:	fb02 f303 	mul.w	r3, r2, r3
 800609a:	1acb      	subs	r3, r1, r3
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060a2:	4b36      	ldr	r3, [pc, #216]	; (800617c <UART_SetConfig+0x2d4>)
 80060a4:	fba3 2302 	umull	r2, r3, r3, r2
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060b0:	441c      	add	r4, r3
 80060b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	1891      	adds	r1, r2, r2
 80060ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80060cc:	415b      	adcs	r3, r3
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060d4:	4641      	mov	r1, r8
 80060d6:	1851      	adds	r1, r2, r1
 80060d8:	6339      	str	r1, [r7, #48]	; 0x30
 80060da:	4649      	mov	r1, r9
 80060dc:	414b      	adcs	r3, r1
 80060de:	637b      	str	r3, [r7, #52]	; 0x34
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060ec:	4659      	mov	r1, fp
 80060ee:	00cb      	lsls	r3, r1, #3
 80060f0:	4651      	mov	r1, sl
 80060f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f6:	4651      	mov	r1, sl
 80060f8:	00ca      	lsls	r2, r1, #3
 80060fa:	4610      	mov	r0, r2
 80060fc:	4619      	mov	r1, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	4642      	mov	r2, r8
 8006102:	189b      	adds	r3, r3, r2
 8006104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006108:	464b      	mov	r3, r9
 800610a:	460a      	mov	r2, r1
 800610c:	eb42 0303 	adc.w	r3, r2, r3
 8006110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006120:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006128:	460b      	mov	r3, r1
 800612a:	18db      	adds	r3, r3, r3
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
 800612e:	4613      	mov	r3, r2
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800613a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800613e:	f7fa fd45 	bl	8000bcc <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <UART_SetConfig+0x2d4>)
 8006148:	fba3 1302 	umull	r1, r3, r3, r2
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	2164      	movs	r1, #100	; 0x64
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	3332      	adds	r3, #50	; 0x32
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <UART_SetConfig+0x2d4>)
 800615c:	fba2 2303 	umull	r2, r3, r2, r3
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	f003 0207 	and.w	r2, r3, #7
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4422      	add	r2, r4
 800616e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006170:	e105      	b.n	800637e <UART_SetConfig+0x4d6>
 8006172:	bf00      	nop
 8006174:	40011000 	.word	0x40011000
 8006178:	40011400 	.word	0x40011400
 800617c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800618a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800618e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006192:	4642      	mov	r2, r8
 8006194:	464b      	mov	r3, r9
 8006196:	1891      	adds	r1, r2, r2
 8006198:	6239      	str	r1, [r7, #32]
 800619a:	415b      	adcs	r3, r3
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
 800619e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061a2:	4641      	mov	r1, r8
 80061a4:	1854      	adds	r4, r2, r1
 80061a6:	4649      	mov	r1, r9
 80061a8:	eb43 0501 	adc.w	r5, r3, r1
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	00eb      	lsls	r3, r5, #3
 80061b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ba:	00e2      	lsls	r2, r4, #3
 80061bc:	4614      	mov	r4, r2
 80061be:	461d      	mov	r5, r3
 80061c0:	4643      	mov	r3, r8
 80061c2:	18e3      	adds	r3, r4, r3
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061c8:	464b      	mov	r3, r9
 80061ca:	eb45 0303 	adc.w	r3, r5, r3
 80061ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061ee:	4629      	mov	r1, r5
 80061f0:	008b      	lsls	r3, r1, #2
 80061f2:	4621      	mov	r1, r4
 80061f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061f8:	4621      	mov	r1, r4
 80061fa:	008a      	lsls	r2, r1, #2
 80061fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006200:	f7fa fce4 	bl	8000bcc <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4b60      	ldr	r3, [pc, #384]	; (800638c <UART_SetConfig+0x4e4>)
 800620a:	fba3 2302 	umull	r2, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	011c      	lsls	r4, r3, #4
 8006212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006216:	2200      	movs	r2, #0
 8006218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800621c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	1891      	adds	r1, r2, r2
 800622a:	61b9      	str	r1, [r7, #24]
 800622c:	415b      	adcs	r3, r3
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006234:	4641      	mov	r1, r8
 8006236:	1851      	adds	r1, r2, r1
 8006238:	6139      	str	r1, [r7, #16]
 800623a:	4649      	mov	r1, r9
 800623c:	414b      	adcs	r3, r1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800624c:	4659      	mov	r1, fp
 800624e:	00cb      	lsls	r3, r1, #3
 8006250:	4651      	mov	r1, sl
 8006252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006256:	4651      	mov	r1, sl
 8006258:	00ca      	lsls	r2, r1, #3
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	4603      	mov	r3, r0
 8006260:	4642      	mov	r2, r8
 8006262:	189b      	adds	r3, r3, r2
 8006264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006268:	464b      	mov	r3, r9
 800626a:	460a      	mov	r2, r1
 800626c:	eb42 0303 	adc.w	r3, r2, r3
 8006270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	67bb      	str	r3, [r7, #120]	; 0x78
 800627e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800628c:	4649      	mov	r1, r9
 800628e:	008b      	lsls	r3, r1, #2
 8006290:	4641      	mov	r1, r8
 8006292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006296:	4641      	mov	r1, r8
 8006298:	008a      	lsls	r2, r1, #2
 800629a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800629e:	f7fa fc95 	bl	8000bcc <__aeabi_uldivmod>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4b39      	ldr	r3, [pc, #228]	; (800638c <UART_SetConfig+0x4e4>)
 80062a8:	fba3 1302 	umull	r1, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	2164      	movs	r1, #100	; 0x64
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	3332      	adds	r3, #50	; 0x32
 80062ba:	4a34      	ldr	r2, [pc, #208]	; (800638c <UART_SetConfig+0x4e4>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062c6:	441c      	add	r4, r3
 80062c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062cc:	2200      	movs	r2, #0
 80062ce:	673b      	str	r3, [r7, #112]	; 0x70
 80062d0:	677a      	str	r2, [r7, #116]	; 0x74
 80062d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062d6:	4642      	mov	r2, r8
 80062d8:	464b      	mov	r3, r9
 80062da:	1891      	adds	r1, r2, r2
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	415b      	adcs	r3, r3
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062e6:	4641      	mov	r1, r8
 80062e8:	1851      	adds	r1, r2, r1
 80062ea:	6039      	str	r1, [r7, #0]
 80062ec:	4649      	mov	r1, r9
 80062ee:	414b      	adcs	r3, r1
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062fe:	4659      	mov	r1, fp
 8006300:	00cb      	lsls	r3, r1, #3
 8006302:	4651      	mov	r1, sl
 8006304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006308:	4651      	mov	r1, sl
 800630a:	00ca      	lsls	r2, r1, #3
 800630c:	4610      	mov	r0, r2
 800630e:	4619      	mov	r1, r3
 8006310:	4603      	mov	r3, r0
 8006312:	4642      	mov	r2, r8
 8006314:	189b      	adds	r3, r3, r2
 8006316:	66bb      	str	r3, [r7, #104]	; 0x68
 8006318:	464b      	mov	r3, r9
 800631a:	460a      	mov	r2, r1
 800631c:	eb42 0303 	adc.w	r3, r2, r3
 8006320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	663b      	str	r3, [r7, #96]	; 0x60
 800632c:	667a      	str	r2, [r7, #100]	; 0x64
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800633a:	4649      	mov	r1, r9
 800633c:	008b      	lsls	r3, r1, #2
 800633e:	4641      	mov	r1, r8
 8006340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006344:	4641      	mov	r1, r8
 8006346:	008a      	lsls	r2, r1, #2
 8006348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800634c:	f7fa fc3e 	bl	8000bcc <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <UART_SetConfig+0x4e4>)
 8006356:	fba3 1302 	umull	r1, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	2164      	movs	r1, #100	; 0x64
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	3332      	adds	r3, #50	; 0x32
 8006368:	4a08      	ldr	r2, [pc, #32]	; (800638c <UART_SetConfig+0x4e4>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	f003 020f 	and.w	r2, r3, #15
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4422      	add	r2, r4
 800637c:	609a      	str	r2, [r3, #8]
}
 800637e:	bf00      	nop
 8006380:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006384:	46bd      	mov	sp, r7
 8006386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800638a:	bf00      	nop
 800638c:	51eb851f 	.word	0x51eb851f

08006390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006390:	b084      	sub	sp, #16
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	f107 001c 	add.w	r0, r7, #28
 800639e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d122      	bne.n	80063ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d105      	bne.n	80063e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 faa2 	bl	800692c <USB_CoreReset>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
 80063ec:	e01a      	b.n	8006424 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa96 	bl	800692c <USB_CoreReset>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
 8006416:	e005      	b.n	8006424 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	2b01      	cmp	r3, #1
 8006428:	d10b      	bne.n	8006442 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f043 0206 	orr.w	r2, r3, #6
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f043 0220 	orr.w	r2, r3, #32
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006442:	7bfb      	ldrb	r3, [r7, #15]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800644e:	b004      	add	sp, #16
 8006450:	4770      	bx	lr

08006452 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d115      	bne.n	80064c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064a2:	2001      	movs	r0, #1
 80064a4:	f7fb fd4a 	bl	8001f3c <HAL_Delay>
      ms++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa2e 	bl	8006910 <USB_GetMode>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d01e      	beq.n	80064f8 <USB_SetCurrentMode+0x84>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b31      	cmp	r3, #49	; 0x31
 80064be:	d9f0      	bls.n	80064a2 <USB_SetCurrentMode+0x2e>
 80064c0:	e01a      	b.n	80064f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d115      	bne.n	80064f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064d4:	2001      	movs	r0, #1
 80064d6:	f7fb fd31 	bl	8001f3c <HAL_Delay>
      ms++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa15 	bl	8006910 <USB_GetMode>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <USB_SetCurrentMode+0x84>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b31      	cmp	r3, #49	; 0x31
 80064f0:	d9f0      	bls.n	80064d4 <USB_SetCurrentMode+0x60>
 80064f2:	e001      	b.n	80064f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e005      	b.n	8006504 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b32      	cmp	r3, #50	; 0x32
 80064fc:	d101      	bne.n	8006502 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800650c:	b084      	sub	sp, #16
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800651a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006526:	2300      	movs	r3, #0
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	e009      	b.n	8006540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3340      	adds	r3, #64	; 0x40
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3301      	adds	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b0e      	cmp	r3, #14
 8006544:	d9f2      	bls.n	800652c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11c      	bne.n	8006586 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655a:	f043 0302 	orr.w	r3, r3, #2
 800655e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
 8006584:	e00b      	b.n	800659e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a4:	461a      	mov	r2, r3
 80065a6:	2300      	movs	r3, #0
 80065a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b0:	4619      	mov	r1, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b8:	461a      	mov	r2, r3
 80065ba:	680b      	ldr	r3, [r1, #0]
 80065bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10c      	bne.n	80065de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065ca:	2100      	movs	r1, #0
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f965 	bl	800689c <USB_SetDevSpeed>
 80065d2:	e008      	b.n	80065e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065d4:	2101      	movs	r1, #1
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f960 	bl	800689c <USB_SetDevSpeed>
 80065dc:	e003      	b.n	80065e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065de:	2103      	movs	r1, #3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f95b 	bl	800689c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065e6:	2110      	movs	r1, #16
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8f3 	bl	80067d4 <USB_FlushTxFifo>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f91f 	bl	800683c <USB_FlushRxFifo>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	461a      	mov	r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	461a      	mov	r2, r3
 800661c:	2300      	movs	r3, #0
 800661e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	e043      	b.n	80066ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006648:	d118      	bne.n	800667c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e013      	b.n	800668e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	461a      	mov	r2, r3
 8006674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e008      	b.n	800668e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	461a      	mov	r2, r3
 800668a:	2300      	movs	r3, #0
 800668c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	461a      	mov	r2, r3
 80066ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3301      	adds	r3, #1
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3b7      	bcc.n	8006632 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	e043      	b.n	8006750 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066de:	d118      	bne.n	8006712 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	461a      	mov	r2, r3
 80066f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e013      	b.n	8006724 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	461a      	mov	r2, r3
 800670a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e008      	b.n	8006724 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671e:	461a      	mov	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	461a      	mov	r2, r3
 8006732:	2300      	movs	r3, #0
 8006734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	461a      	mov	r2, r3
 8006744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3301      	adds	r3, #1
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	429a      	cmp	r2, r3
 8006756:	d3b7      	bcc.n	80066c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800676a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006778:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <USB_DevInit+0x2c4>)
 8006792:	4313      	orrs	r3, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f043 0208 	orr.w	r2, r3, #8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b8:	f043 0304 	orr.w	r3, r3, #4
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067cc:	b004      	add	sp, #16
 80067ce:	4770      	bx	lr
 80067d0:	803c3800 	.word	0x803c3800

080067d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <USB_FlushTxFifo+0x64>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e01b      	b.n	800682c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	daf2      	bge.n	80067e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	019b      	lsls	r3, r3, #6
 8006804:	f043 0220 	orr.w	r2, r3, #32
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a08      	ldr	r2, [pc, #32]	; (8006838 <USB_FlushTxFifo+0x64>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e006      	b.n	800682c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b20      	cmp	r3, #32
 8006828:	d0f0      	beq.n	800680c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	00030d40 	.word	0x00030d40

0800683c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a11      	ldr	r2, [pc, #68]	; (8006898 <USB_FlushRxFifo+0x5c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e018      	b.n	800688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	daf2      	bge.n	8006848 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2210      	movs	r2, #16
 800686a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3301      	adds	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a08      	ldr	r2, [pc, #32]	; (8006898 <USB_FlushRxFifo+0x5c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e006      	b.n	800688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d0f0      	beq.n	800686c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	00030d40 	.word	0x00030d40

0800689c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068bc:	4313      	orrs	r3, r2
 80068be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068e8:	f023 0303 	bic.w	r3, r3, #3
 80068ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068fc:	f043 0302 	orr.w	r3, r3, #2
 8006900:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0301 	and.w	r3, r3, #1
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a13      	ldr	r2, [pc, #76]	; (8006990 <USB_CoreReset+0x64>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e01b      	b.n	8006982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	daf2      	bge.n	8006938 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f043 0201 	orr.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a09      	ldr	r2, [pc, #36]	; (8006990 <USB_CoreReset+0x64>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e006      	b.n	8006982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b01      	cmp	r3, #1
 800697e:	d0f0      	beq.n	8006962 <USB_CoreReset+0x36>

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	00030d40 	.word	0x00030d40

08006994 <__errno>:
 8006994:	4b01      	ldr	r3, [pc, #4]	; (800699c <__errno+0x8>)
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	2000000c 	.word	0x2000000c

080069a0 <__libc_init_array>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	4d0d      	ldr	r5, [pc, #52]	; (80069d8 <__libc_init_array+0x38>)
 80069a4:	4c0d      	ldr	r4, [pc, #52]	; (80069dc <__libc_init_array+0x3c>)
 80069a6:	1b64      	subs	r4, r4, r5
 80069a8:	10a4      	asrs	r4, r4, #2
 80069aa:	2600      	movs	r6, #0
 80069ac:	42a6      	cmp	r6, r4
 80069ae:	d109      	bne.n	80069c4 <__libc_init_array+0x24>
 80069b0:	4d0b      	ldr	r5, [pc, #44]	; (80069e0 <__libc_init_array+0x40>)
 80069b2:	4c0c      	ldr	r4, [pc, #48]	; (80069e4 <__libc_init_array+0x44>)
 80069b4:	f001 fcda 	bl	800836c <_init>
 80069b8:	1b64      	subs	r4, r4, r5
 80069ba:	10a4      	asrs	r4, r4, #2
 80069bc:	2600      	movs	r6, #0
 80069be:	42a6      	cmp	r6, r4
 80069c0:	d105      	bne.n	80069ce <__libc_init_array+0x2e>
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c8:	4798      	blx	r3
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7ee      	b.n	80069ac <__libc_init_array+0xc>
 80069ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d2:	4798      	blx	r3
 80069d4:	3601      	adds	r6, #1
 80069d6:	e7f2      	b.n	80069be <__libc_init_array+0x1e>
 80069d8:	080085c8 	.word	0x080085c8
 80069dc:	080085c8 	.word	0x080085c8
 80069e0:	080085c8 	.word	0x080085c8
 80069e4:	080085cc 	.word	0x080085cc

080069e8 <memset>:
 80069e8:	4402      	add	r2, r0
 80069ea:	4603      	mov	r3, r0
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d100      	bne.n	80069f2 <memset+0xa>
 80069f0:	4770      	bx	lr
 80069f2:	f803 1b01 	strb.w	r1, [r3], #1
 80069f6:	e7f9      	b.n	80069ec <memset+0x4>

080069f8 <siprintf>:
 80069f8:	b40e      	push	{r1, r2, r3}
 80069fa:	b500      	push	{lr}
 80069fc:	b09c      	sub	sp, #112	; 0x70
 80069fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006a00:	9002      	str	r0, [sp, #8]
 8006a02:	9006      	str	r0, [sp, #24]
 8006a04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a08:	4809      	ldr	r0, [pc, #36]	; (8006a30 <siprintf+0x38>)
 8006a0a:	9107      	str	r1, [sp, #28]
 8006a0c:	9104      	str	r1, [sp, #16]
 8006a0e:	4909      	ldr	r1, [pc, #36]	; (8006a34 <siprintf+0x3c>)
 8006a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a14:	9105      	str	r1, [sp, #20]
 8006a16:	6800      	ldr	r0, [r0, #0]
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	a902      	add	r1, sp, #8
 8006a1c:	f000 f868 	bl	8006af0 <_svfiprintf_r>
 8006a20:	9b02      	ldr	r3, [sp, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	b01c      	add	sp, #112	; 0x70
 8006a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a2c:	b003      	add	sp, #12
 8006a2e:	4770      	bx	lr
 8006a30:	2000000c 	.word	0x2000000c
 8006a34:	ffff0208 	.word	0xffff0208

08006a38 <__ssputs_r>:
 8006a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3c:	688e      	ldr	r6, [r1, #8]
 8006a3e:	429e      	cmp	r6, r3
 8006a40:	4682      	mov	sl, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	4690      	mov	r8, r2
 8006a46:	461f      	mov	r7, r3
 8006a48:	d838      	bhi.n	8006abc <__ssputs_r+0x84>
 8006a4a:	898a      	ldrh	r2, [r1, #12]
 8006a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a50:	d032      	beq.n	8006ab8 <__ssputs_r+0x80>
 8006a52:	6825      	ldr	r5, [r4, #0]
 8006a54:	6909      	ldr	r1, [r1, #16]
 8006a56:	eba5 0901 	sub.w	r9, r5, r1
 8006a5a:	6965      	ldr	r5, [r4, #20]
 8006a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a64:	3301      	adds	r3, #1
 8006a66:	444b      	add	r3, r9
 8006a68:	106d      	asrs	r5, r5, #1
 8006a6a:	429d      	cmp	r5, r3
 8006a6c:	bf38      	it	cc
 8006a6e:	461d      	movcc	r5, r3
 8006a70:	0553      	lsls	r3, r2, #21
 8006a72:	d531      	bpl.n	8006ad8 <__ssputs_r+0xa0>
 8006a74:	4629      	mov	r1, r5
 8006a76:	f000 fb63 	bl	8007140 <_malloc_r>
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	b950      	cbnz	r0, 8006a94 <__ssputs_r+0x5c>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	f8ca 3000 	str.w	r3, [sl]
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a94:	6921      	ldr	r1, [r4, #16]
 8006a96:	464a      	mov	r2, r9
 8006a98:	f000 fabe 	bl	8007018 <memcpy>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	6126      	str	r6, [r4, #16]
 8006aaa:	6165      	str	r5, [r4, #20]
 8006aac:	444e      	add	r6, r9
 8006aae:	eba5 0509 	sub.w	r5, r5, r9
 8006ab2:	6026      	str	r6, [r4, #0]
 8006ab4:	60a5      	str	r5, [r4, #8]
 8006ab6:	463e      	mov	r6, r7
 8006ab8:	42be      	cmp	r6, r7
 8006aba:	d900      	bls.n	8006abe <__ssputs_r+0x86>
 8006abc:	463e      	mov	r6, r7
 8006abe:	6820      	ldr	r0, [r4, #0]
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	f000 fab6 	bl	8007034 <memmove>
 8006ac8:	68a3      	ldr	r3, [r4, #8]
 8006aca:	1b9b      	subs	r3, r3, r6
 8006acc:	60a3      	str	r3, [r4, #8]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	4433      	add	r3, r6
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e7db      	b.n	8006a90 <__ssputs_r+0x58>
 8006ad8:	462a      	mov	r2, r5
 8006ada:	f000 fba5 	bl	8007228 <_realloc_r>
 8006ade:	4606      	mov	r6, r0
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d1e1      	bne.n	8006aa8 <__ssputs_r+0x70>
 8006ae4:	6921      	ldr	r1, [r4, #16]
 8006ae6:	4650      	mov	r0, sl
 8006ae8:	f000 fabe 	bl	8007068 <_free_r>
 8006aec:	e7c7      	b.n	8006a7e <__ssputs_r+0x46>
	...

08006af0 <_svfiprintf_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	4698      	mov	r8, r3
 8006af6:	898b      	ldrh	r3, [r1, #12]
 8006af8:	061b      	lsls	r3, r3, #24
 8006afa:	b09d      	sub	sp, #116	; 0x74
 8006afc:	4607      	mov	r7, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	4614      	mov	r4, r2
 8006b02:	d50e      	bpl.n	8006b22 <_svfiprintf_r+0x32>
 8006b04:	690b      	ldr	r3, [r1, #16]
 8006b06:	b963      	cbnz	r3, 8006b22 <_svfiprintf_r+0x32>
 8006b08:	2140      	movs	r1, #64	; 0x40
 8006b0a:	f000 fb19 	bl	8007140 <_malloc_r>
 8006b0e:	6028      	str	r0, [r5, #0]
 8006b10:	6128      	str	r0, [r5, #16]
 8006b12:	b920      	cbnz	r0, 8006b1e <_svfiprintf_r+0x2e>
 8006b14:	230c      	movs	r3, #12
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b1c:	e0d1      	b.n	8006cc2 <_svfiprintf_r+0x1d2>
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	616b      	str	r3, [r5, #20]
 8006b22:	2300      	movs	r3, #0
 8006b24:	9309      	str	r3, [sp, #36]	; 0x24
 8006b26:	2320      	movs	r3, #32
 8006b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b30:	2330      	movs	r3, #48	; 0x30
 8006b32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cdc <_svfiprintf_r+0x1ec>
 8006b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b3a:	f04f 0901 	mov.w	r9, #1
 8006b3e:	4623      	mov	r3, r4
 8006b40:	469a      	mov	sl, r3
 8006b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b46:	b10a      	cbz	r2, 8006b4c <_svfiprintf_r+0x5c>
 8006b48:	2a25      	cmp	r2, #37	; 0x25
 8006b4a:	d1f9      	bne.n	8006b40 <_svfiprintf_r+0x50>
 8006b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b50:	d00b      	beq.n	8006b6a <_svfiprintf_r+0x7a>
 8006b52:	465b      	mov	r3, fp
 8006b54:	4622      	mov	r2, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ff6d 	bl	8006a38 <__ssputs_r>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f000 80aa 	beq.w	8006cb8 <_svfiprintf_r+0x1c8>
 8006b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b66:	445a      	add	r2, fp
 8006b68:	9209      	str	r2, [sp, #36]	; 0x24
 8006b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80a2 	beq.w	8006cb8 <_svfiprintf_r+0x1c8>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b7e:	f10a 0a01 	add.w	sl, sl, #1
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	9307      	str	r3, [sp, #28]
 8006b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b8c:	4654      	mov	r4, sl
 8006b8e:	2205      	movs	r2, #5
 8006b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b94:	4851      	ldr	r0, [pc, #324]	; (8006cdc <_svfiprintf_r+0x1ec>)
 8006b96:	f7f9 fb2b 	bl	80001f0 <memchr>
 8006b9a:	9a04      	ldr	r2, [sp, #16]
 8006b9c:	b9d8      	cbnz	r0, 8006bd6 <_svfiprintf_r+0xe6>
 8006b9e:	06d0      	lsls	r0, r2, #27
 8006ba0:	bf44      	itt	mi
 8006ba2:	2320      	movmi	r3, #32
 8006ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ba8:	0711      	lsls	r1, r2, #28
 8006baa:	bf44      	itt	mi
 8006bac:	232b      	movmi	r3, #43	; 0x2b
 8006bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb8:	d015      	beq.n	8006be6 <_svfiprintf_r+0xf6>
 8006bba:	9a07      	ldr	r2, [sp, #28]
 8006bbc:	4654      	mov	r4, sl
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f04f 0c0a 	mov.w	ip, #10
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bca:	3b30      	subs	r3, #48	; 0x30
 8006bcc:	2b09      	cmp	r3, #9
 8006bce:	d94e      	bls.n	8006c6e <_svfiprintf_r+0x17e>
 8006bd0:	b1b0      	cbz	r0, 8006c00 <_svfiprintf_r+0x110>
 8006bd2:	9207      	str	r2, [sp, #28]
 8006bd4:	e014      	b.n	8006c00 <_svfiprintf_r+0x110>
 8006bd6:	eba0 0308 	sub.w	r3, r0, r8
 8006bda:	fa09 f303 	lsl.w	r3, r9, r3
 8006bde:	4313      	orrs	r3, r2
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	46a2      	mov	sl, r4
 8006be4:	e7d2      	b.n	8006b8c <_svfiprintf_r+0x9c>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	1d19      	adds	r1, r3, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	9103      	str	r1, [sp, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bfbb      	ittet	lt
 8006bf2:	425b      	neglt	r3, r3
 8006bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8006bf8:	9307      	strge	r3, [sp, #28]
 8006bfa:	9307      	strlt	r3, [sp, #28]
 8006bfc:	bfb8      	it	lt
 8006bfe:	9204      	strlt	r2, [sp, #16]
 8006c00:	7823      	ldrb	r3, [r4, #0]
 8006c02:	2b2e      	cmp	r3, #46	; 0x2e
 8006c04:	d10c      	bne.n	8006c20 <_svfiprintf_r+0x130>
 8006c06:	7863      	ldrb	r3, [r4, #1]
 8006c08:	2b2a      	cmp	r3, #42	; 0x2a
 8006c0a:	d135      	bne.n	8006c78 <_svfiprintf_r+0x188>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	1d1a      	adds	r2, r3, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	9203      	str	r2, [sp, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bfb8      	it	lt
 8006c18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c1c:	3402      	adds	r4, #2
 8006c1e:	9305      	str	r3, [sp, #20]
 8006c20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cec <_svfiprintf_r+0x1fc>
 8006c24:	7821      	ldrb	r1, [r4, #0]
 8006c26:	2203      	movs	r2, #3
 8006c28:	4650      	mov	r0, sl
 8006c2a:	f7f9 fae1 	bl	80001f0 <memchr>
 8006c2e:	b140      	cbz	r0, 8006c42 <_svfiprintf_r+0x152>
 8006c30:	2340      	movs	r3, #64	; 0x40
 8006c32:	eba0 000a 	sub.w	r0, r0, sl
 8006c36:	fa03 f000 	lsl.w	r0, r3, r0
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	4303      	orrs	r3, r0
 8006c3e:	3401      	adds	r4, #1
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c46:	4826      	ldr	r0, [pc, #152]	; (8006ce0 <_svfiprintf_r+0x1f0>)
 8006c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c4c:	2206      	movs	r2, #6
 8006c4e:	f7f9 facf 	bl	80001f0 <memchr>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d038      	beq.n	8006cc8 <_svfiprintf_r+0x1d8>
 8006c56:	4b23      	ldr	r3, [pc, #140]	; (8006ce4 <_svfiprintf_r+0x1f4>)
 8006c58:	bb1b      	cbnz	r3, 8006ca2 <_svfiprintf_r+0x1b2>
 8006c5a:	9b03      	ldr	r3, [sp, #12]
 8006c5c:	3307      	adds	r3, #7
 8006c5e:	f023 0307 	bic.w	r3, r3, #7
 8006c62:	3308      	adds	r3, #8
 8006c64:	9303      	str	r3, [sp, #12]
 8006c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c68:	4433      	add	r3, r6
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	e767      	b.n	8006b3e <_svfiprintf_r+0x4e>
 8006c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c72:	460c      	mov	r4, r1
 8006c74:	2001      	movs	r0, #1
 8006c76:	e7a5      	b.n	8006bc4 <_svfiprintf_r+0xd4>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	3401      	adds	r4, #1
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	f04f 0c0a 	mov.w	ip, #10
 8006c84:	4620      	mov	r0, r4
 8006c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c8a:	3a30      	subs	r2, #48	; 0x30
 8006c8c:	2a09      	cmp	r2, #9
 8006c8e:	d903      	bls.n	8006c98 <_svfiprintf_r+0x1a8>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0c5      	beq.n	8006c20 <_svfiprintf_r+0x130>
 8006c94:	9105      	str	r1, [sp, #20]
 8006c96:	e7c3      	b.n	8006c20 <_svfiprintf_r+0x130>
 8006c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e7f0      	b.n	8006c84 <_svfiprintf_r+0x194>
 8006ca2:	ab03      	add	r3, sp, #12
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	462a      	mov	r2, r5
 8006ca8:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <_svfiprintf_r+0x1f8>)
 8006caa:	a904      	add	r1, sp, #16
 8006cac:	4638      	mov	r0, r7
 8006cae:	f3af 8000 	nop.w
 8006cb2:	1c42      	adds	r2, r0, #1
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	d1d6      	bne.n	8006c66 <_svfiprintf_r+0x176>
 8006cb8:	89ab      	ldrh	r3, [r5, #12]
 8006cba:	065b      	lsls	r3, r3, #25
 8006cbc:	f53f af2c 	bmi.w	8006b18 <_svfiprintf_r+0x28>
 8006cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc2:	b01d      	add	sp, #116	; 0x74
 8006cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc8:	ab03      	add	r3, sp, #12
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <_svfiprintf_r+0x1f8>)
 8006cd0:	a904      	add	r1, sp, #16
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f000 f87a 	bl	8006dcc <_printf_i>
 8006cd8:	e7eb      	b.n	8006cb2 <_svfiprintf_r+0x1c2>
 8006cda:	bf00      	nop
 8006cdc:	080083b0 	.word	0x080083b0
 8006ce0:	080083ba 	.word	0x080083ba
 8006ce4:	00000000 	.word	0x00000000
 8006ce8:	08006a39 	.word	0x08006a39
 8006cec:	080083b6 	.word	0x080083b6

08006cf0 <_printf_common>:
 8006cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	4616      	mov	r6, r2
 8006cf6:	4699      	mov	r9, r3
 8006cf8:	688a      	ldr	r2, [r1, #8]
 8006cfa:	690b      	ldr	r3, [r1, #16]
 8006cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	bfb8      	it	lt
 8006d04:	4613      	movlt	r3, r2
 8006d06:	6033      	str	r3, [r6, #0]
 8006d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	b10a      	cbz	r2, 8006d16 <_printf_common+0x26>
 8006d12:	3301      	adds	r3, #1
 8006d14:	6033      	str	r3, [r6, #0]
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	0699      	lsls	r1, r3, #26
 8006d1a:	bf42      	ittt	mi
 8006d1c:	6833      	ldrmi	r3, [r6, #0]
 8006d1e:	3302      	addmi	r3, #2
 8006d20:	6033      	strmi	r3, [r6, #0]
 8006d22:	6825      	ldr	r5, [r4, #0]
 8006d24:	f015 0506 	ands.w	r5, r5, #6
 8006d28:	d106      	bne.n	8006d38 <_printf_common+0x48>
 8006d2a:	f104 0a19 	add.w	sl, r4, #25
 8006d2e:	68e3      	ldr	r3, [r4, #12]
 8006d30:	6832      	ldr	r2, [r6, #0]
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	42ab      	cmp	r3, r5
 8006d36:	dc26      	bgt.n	8006d86 <_printf_common+0x96>
 8006d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d3c:	1e13      	subs	r3, r2, #0
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	bf18      	it	ne
 8006d42:	2301      	movne	r3, #1
 8006d44:	0692      	lsls	r2, r2, #26
 8006d46:	d42b      	bmi.n	8006da0 <_printf_common+0xb0>
 8006d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4638      	mov	r0, r7
 8006d50:	47c0      	blx	r8
 8006d52:	3001      	adds	r0, #1
 8006d54:	d01e      	beq.n	8006d94 <_printf_common+0xa4>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	68e5      	ldr	r5, [r4, #12]
 8006d5a:	6832      	ldr	r2, [r6, #0]
 8006d5c:	f003 0306 	and.w	r3, r3, #6
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	bf08      	it	eq
 8006d64:	1aad      	subeq	r5, r5, r2
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	bf0c      	ite	eq
 8006d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d70:	2500      	movne	r5, #0
 8006d72:	4293      	cmp	r3, r2
 8006d74:	bfc4      	itt	gt
 8006d76:	1a9b      	subgt	r3, r3, r2
 8006d78:	18ed      	addgt	r5, r5, r3
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	341a      	adds	r4, #26
 8006d7e:	42b5      	cmp	r5, r6
 8006d80:	d11a      	bne.n	8006db8 <_printf_common+0xc8>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e008      	b.n	8006d98 <_printf_common+0xa8>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4652      	mov	r2, sl
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	47c0      	blx	r8
 8006d90:	3001      	adds	r0, #1
 8006d92:	d103      	bne.n	8006d9c <_printf_common+0xac>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	e7c6      	b.n	8006d2e <_printf_common+0x3e>
 8006da0:	18e1      	adds	r1, r4, r3
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	2030      	movs	r0, #48	; 0x30
 8006da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006daa:	4422      	add	r2, r4
 8006dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006db4:	3302      	adds	r3, #2
 8006db6:	e7c7      	b.n	8006d48 <_printf_common+0x58>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	47c0      	blx	r8
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d0e6      	beq.n	8006d94 <_printf_common+0xa4>
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	e7d9      	b.n	8006d7e <_printf_common+0x8e>
	...

08006dcc <_printf_i>:
 8006dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	7e0f      	ldrb	r7, [r1, #24]
 8006dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dd4:	2f78      	cmp	r7, #120	; 0x78
 8006dd6:	4691      	mov	r9, r2
 8006dd8:	4680      	mov	r8, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	469a      	mov	sl, r3
 8006dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006de2:	d807      	bhi.n	8006df4 <_printf_i+0x28>
 8006de4:	2f62      	cmp	r7, #98	; 0x62
 8006de6:	d80a      	bhi.n	8006dfe <_printf_i+0x32>
 8006de8:	2f00      	cmp	r7, #0
 8006dea:	f000 80d8 	beq.w	8006f9e <_printf_i+0x1d2>
 8006dee:	2f58      	cmp	r7, #88	; 0x58
 8006df0:	f000 80a3 	beq.w	8006f3a <_printf_i+0x16e>
 8006df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dfc:	e03a      	b.n	8006e74 <_printf_i+0xa8>
 8006dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e02:	2b15      	cmp	r3, #21
 8006e04:	d8f6      	bhi.n	8006df4 <_printf_i+0x28>
 8006e06:	a101      	add	r1, pc, #4	; (adr r1, 8006e0c <_printf_i+0x40>)
 8006e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e0c:	08006e65 	.word	0x08006e65
 8006e10:	08006e79 	.word	0x08006e79
 8006e14:	08006df5 	.word	0x08006df5
 8006e18:	08006df5 	.word	0x08006df5
 8006e1c:	08006df5 	.word	0x08006df5
 8006e20:	08006df5 	.word	0x08006df5
 8006e24:	08006e79 	.word	0x08006e79
 8006e28:	08006df5 	.word	0x08006df5
 8006e2c:	08006df5 	.word	0x08006df5
 8006e30:	08006df5 	.word	0x08006df5
 8006e34:	08006df5 	.word	0x08006df5
 8006e38:	08006f85 	.word	0x08006f85
 8006e3c:	08006ea9 	.word	0x08006ea9
 8006e40:	08006f67 	.word	0x08006f67
 8006e44:	08006df5 	.word	0x08006df5
 8006e48:	08006df5 	.word	0x08006df5
 8006e4c:	08006fa7 	.word	0x08006fa7
 8006e50:	08006df5 	.word	0x08006df5
 8006e54:	08006ea9 	.word	0x08006ea9
 8006e58:	08006df5 	.word	0x08006df5
 8006e5c:	08006df5 	.word	0x08006df5
 8006e60:	08006f6f 	.word	0x08006f6f
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	602a      	str	r2, [r5, #0]
 8006e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0a3      	b.n	8006fc0 <_printf_i+0x1f4>
 8006e78:	6820      	ldr	r0, [r4, #0]
 8006e7a:	6829      	ldr	r1, [r5, #0]
 8006e7c:	0606      	lsls	r6, r0, #24
 8006e7e:	f101 0304 	add.w	r3, r1, #4
 8006e82:	d50a      	bpl.n	8006e9a <_printf_i+0xce>
 8006e84:	680e      	ldr	r6, [r1, #0]
 8006e86:	602b      	str	r3, [r5, #0]
 8006e88:	2e00      	cmp	r6, #0
 8006e8a:	da03      	bge.n	8006e94 <_printf_i+0xc8>
 8006e8c:	232d      	movs	r3, #45	; 0x2d
 8006e8e:	4276      	negs	r6, r6
 8006e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e94:	485e      	ldr	r0, [pc, #376]	; (8007010 <_printf_i+0x244>)
 8006e96:	230a      	movs	r3, #10
 8006e98:	e019      	b.n	8006ece <_printf_i+0x102>
 8006e9a:	680e      	ldr	r6, [r1, #0]
 8006e9c:	602b      	str	r3, [r5, #0]
 8006e9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ea2:	bf18      	it	ne
 8006ea4:	b236      	sxthne	r6, r6
 8006ea6:	e7ef      	b.n	8006e88 <_printf_i+0xbc>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	6820      	ldr	r0, [r4, #0]
 8006eac:	1d19      	adds	r1, r3, #4
 8006eae:	6029      	str	r1, [r5, #0]
 8006eb0:	0601      	lsls	r1, r0, #24
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0xec>
 8006eb4:	681e      	ldr	r6, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <_printf_i+0xf2>
 8006eb8:	0646      	lsls	r6, r0, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0xe8>
 8006ebc:	881e      	ldrh	r6, [r3, #0]
 8006ebe:	4854      	ldr	r0, [pc, #336]	; (8007010 <_printf_i+0x244>)
 8006ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2308      	moveq	r3, #8
 8006ec6:	230a      	movne	r3, #10
 8006ec8:	2100      	movs	r1, #0
 8006eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ece:	6865      	ldr	r5, [r4, #4]
 8006ed0:	60a5      	str	r5, [r4, #8]
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	bfa2      	ittt	ge
 8006ed6:	6821      	ldrge	r1, [r4, #0]
 8006ed8:	f021 0104 	bicge.w	r1, r1, #4
 8006edc:	6021      	strge	r1, [r4, #0]
 8006ede:	b90e      	cbnz	r6, 8006ee4 <_printf_i+0x118>
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	d04d      	beq.n	8006f80 <_printf_i+0x1b4>
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eea:	fb03 6711 	mls	r7, r3, r1, r6
 8006eee:	5dc7      	ldrb	r7, [r0, r7]
 8006ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ef4:	4637      	mov	r7, r6
 8006ef6:	42bb      	cmp	r3, r7
 8006ef8:	460e      	mov	r6, r1
 8006efa:	d9f4      	bls.n	8006ee6 <_printf_i+0x11a>
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d10b      	bne.n	8006f18 <_printf_i+0x14c>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	07de      	lsls	r6, r3, #31
 8006f04:	d508      	bpl.n	8006f18 <_printf_i+0x14c>
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	bfde      	ittt	le
 8006f0e:	2330      	movle	r3, #48	; 0x30
 8006f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f18:	1b52      	subs	r2, r2, r5
 8006f1a:	6122      	str	r2, [r4, #16]
 8006f1c:	f8cd a000 	str.w	sl, [sp]
 8006f20:	464b      	mov	r3, r9
 8006f22:	aa03      	add	r2, sp, #12
 8006f24:	4621      	mov	r1, r4
 8006f26:	4640      	mov	r0, r8
 8006f28:	f7ff fee2 	bl	8006cf0 <_printf_common>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d14c      	bne.n	8006fca <_printf_i+0x1fe>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f34:	b004      	add	sp, #16
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	4835      	ldr	r0, [pc, #212]	; (8007010 <_printf_i+0x244>)
 8006f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f40:	6829      	ldr	r1, [r5, #0]
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f48:	6029      	str	r1, [r5, #0]
 8006f4a:	061d      	lsls	r5, r3, #24
 8006f4c:	d514      	bpl.n	8006f78 <_printf_i+0x1ac>
 8006f4e:	07df      	lsls	r7, r3, #31
 8006f50:	bf44      	itt	mi
 8006f52:	f043 0320 	orrmi.w	r3, r3, #32
 8006f56:	6023      	strmi	r3, [r4, #0]
 8006f58:	b91e      	cbnz	r6, 8006f62 <_printf_i+0x196>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f023 0320 	bic.w	r3, r3, #32
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	2310      	movs	r3, #16
 8006f64:	e7b0      	b.n	8006ec8 <_printf_i+0xfc>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	f043 0320 	orr.w	r3, r3, #32
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	2378      	movs	r3, #120	; 0x78
 8006f70:	4828      	ldr	r0, [pc, #160]	; (8007014 <_printf_i+0x248>)
 8006f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f76:	e7e3      	b.n	8006f40 <_printf_i+0x174>
 8006f78:	0659      	lsls	r1, r3, #25
 8006f7a:	bf48      	it	mi
 8006f7c:	b2b6      	uxthmi	r6, r6
 8006f7e:	e7e6      	b.n	8006f4e <_printf_i+0x182>
 8006f80:	4615      	mov	r5, r2
 8006f82:	e7bb      	b.n	8006efc <_printf_i+0x130>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	6826      	ldr	r6, [r4, #0]
 8006f88:	6961      	ldr	r1, [r4, #20]
 8006f8a:	1d18      	adds	r0, r3, #4
 8006f8c:	6028      	str	r0, [r5, #0]
 8006f8e:	0635      	lsls	r5, r6, #24
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	d501      	bpl.n	8006f98 <_printf_i+0x1cc>
 8006f94:	6019      	str	r1, [r3, #0]
 8006f96:	e002      	b.n	8006f9e <_printf_i+0x1d2>
 8006f98:	0670      	lsls	r0, r6, #25
 8006f9a:	d5fb      	bpl.n	8006f94 <_printf_i+0x1c8>
 8006f9c:	8019      	strh	r1, [r3, #0]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	4615      	mov	r5, r2
 8006fa4:	e7ba      	b.n	8006f1c <_printf_i+0x150>
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	1d1a      	adds	r2, r3, #4
 8006faa:	602a      	str	r2, [r5, #0]
 8006fac:	681d      	ldr	r5, [r3, #0]
 8006fae:	6862      	ldr	r2, [r4, #4]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7f9 f91c 	bl	80001f0 <memchr>
 8006fb8:	b108      	cbz	r0, 8006fbe <_printf_i+0x1f2>
 8006fba:	1b40      	subs	r0, r0, r5
 8006fbc:	6060      	str	r0, [r4, #4]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc8:	e7a8      	b.n	8006f1c <_printf_i+0x150>
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d0ab      	beq.n	8006f30 <_printf_i+0x164>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	079b      	lsls	r3, r3, #30
 8006fdc:	d413      	bmi.n	8007006 <_printf_i+0x23a>
 8006fde:	68e0      	ldr	r0, [r4, #12]
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	4298      	cmp	r0, r3
 8006fe4:	bfb8      	it	lt
 8006fe6:	4618      	movlt	r0, r3
 8006fe8:	e7a4      	b.n	8006f34 <_printf_i+0x168>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4632      	mov	r2, r6
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	47d0      	blx	sl
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d09b      	beq.n	8006f30 <_printf_i+0x164>
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	68e3      	ldr	r3, [r4, #12]
 8006ffc:	9903      	ldr	r1, [sp, #12]
 8006ffe:	1a5b      	subs	r3, r3, r1
 8007000:	42ab      	cmp	r3, r5
 8007002:	dcf2      	bgt.n	8006fea <_printf_i+0x21e>
 8007004:	e7eb      	b.n	8006fde <_printf_i+0x212>
 8007006:	2500      	movs	r5, #0
 8007008:	f104 0619 	add.w	r6, r4, #25
 800700c:	e7f5      	b.n	8006ffa <_printf_i+0x22e>
 800700e:	bf00      	nop
 8007010:	080083c1 	.word	0x080083c1
 8007014:	080083d2 	.word	0x080083d2

08007018 <memcpy>:
 8007018:	440a      	add	r2, r1
 800701a:	4291      	cmp	r1, r2
 800701c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007020:	d100      	bne.n	8007024 <memcpy+0xc>
 8007022:	4770      	bx	lr
 8007024:	b510      	push	{r4, lr}
 8007026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800702e:	4291      	cmp	r1, r2
 8007030:	d1f9      	bne.n	8007026 <memcpy+0xe>
 8007032:	bd10      	pop	{r4, pc}

08007034 <memmove>:
 8007034:	4288      	cmp	r0, r1
 8007036:	b510      	push	{r4, lr}
 8007038:	eb01 0402 	add.w	r4, r1, r2
 800703c:	d902      	bls.n	8007044 <memmove+0x10>
 800703e:	4284      	cmp	r4, r0
 8007040:	4623      	mov	r3, r4
 8007042:	d807      	bhi.n	8007054 <memmove+0x20>
 8007044:	1e43      	subs	r3, r0, #1
 8007046:	42a1      	cmp	r1, r4
 8007048:	d008      	beq.n	800705c <memmove+0x28>
 800704a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800704e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007052:	e7f8      	b.n	8007046 <memmove+0x12>
 8007054:	4402      	add	r2, r0
 8007056:	4601      	mov	r1, r0
 8007058:	428a      	cmp	r2, r1
 800705a:	d100      	bne.n	800705e <memmove+0x2a>
 800705c:	bd10      	pop	{r4, pc}
 800705e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007066:	e7f7      	b.n	8007058 <memmove+0x24>

08007068 <_free_r>:
 8007068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800706a:	2900      	cmp	r1, #0
 800706c:	d044      	beq.n	80070f8 <_free_r+0x90>
 800706e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007072:	9001      	str	r0, [sp, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f1a1 0404 	sub.w	r4, r1, #4
 800707a:	bfb8      	it	lt
 800707c:	18e4      	addlt	r4, r4, r3
 800707e:	f000 f913 	bl	80072a8 <__malloc_lock>
 8007082:	4a1e      	ldr	r2, [pc, #120]	; (80070fc <_free_r+0x94>)
 8007084:	9801      	ldr	r0, [sp, #4]
 8007086:	6813      	ldr	r3, [r2, #0]
 8007088:	b933      	cbnz	r3, 8007098 <_free_r+0x30>
 800708a:	6063      	str	r3, [r4, #4]
 800708c:	6014      	str	r4, [r2, #0]
 800708e:	b003      	add	sp, #12
 8007090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007094:	f000 b90e 	b.w	80072b4 <__malloc_unlock>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d908      	bls.n	80070ae <_free_r+0x46>
 800709c:	6825      	ldr	r5, [r4, #0]
 800709e:	1961      	adds	r1, r4, r5
 80070a0:	428b      	cmp	r3, r1
 80070a2:	bf01      	itttt	eq
 80070a4:	6819      	ldreq	r1, [r3, #0]
 80070a6:	685b      	ldreq	r3, [r3, #4]
 80070a8:	1949      	addeq	r1, r1, r5
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	e7ed      	b.n	800708a <_free_r+0x22>
 80070ae:	461a      	mov	r2, r3
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	b10b      	cbz	r3, 80070b8 <_free_r+0x50>
 80070b4:	42a3      	cmp	r3, r4
 80070b6:	d9fa      	bls.n	80070ae <_free_r+0x46>
 80070b8:	6811      	ldr	r1, [r2, #0]
 80070ba:	1855      	adds	r5, r2, r1
 80070bc:	42a5      	cmp	r5, r4
 80070be:	d10b      	bne.n	80070d8 <_free_r+0x70>
 80070c0:	6824      	ldr	r4, [r4, #0]
 80070c2:	4421      	add	r1, r4
 80070c4:	1854      	adds	r4, r2, r1
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	6011      	str	r1, [r2, #0]
 80070ca:	d1e0      	bne.n	800708e <_free_r+0x26>
 80070cc:	681c      	ldr	r4, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	6053      	str	r3, [r2, #4]
 80070d2:	4421      	add	r1, r4
 80070d4:	6011      	str	r1, [r2, #0]
 80070d6:	e7da      	b.n	800708e <_free_r+0x26>
 80070d8:	d902      	bls.n	80070e0 <_free_r+0x78>
 80070da:	230c      	movs	r3, #12
 80070dc:	6003      	str	r3, [r0, #0]
 80070de:	e7d6      	b.n	800708e <_free_r+0x26>
 80070e0:	6825      	ldr	r5, [r4, #0]
 80070e2:	1961      	adds	r1, r4, r5
 80070e4:	428b      	cmp	r3, r1
 80070e6:	bf04      	itt	eq
 80070e8:	6819      	ldreq	r1, [r3, #0]
 80070ea:	685b      	ldreq	r3, [r3, #4]
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	bf04      	itt	eq
 80070f0:	1949      	addeq	r1, r1, r5
 80070f2:	6021      	streq	r1, [r4, #0]
 80070f4:	6054      	str	r4, [r2, #4]
 80070f6:	e7ca      	b.n	800708e <_free_r+0x26>
 80070f8:	b003      	add	sp, #12
 80070fa:	bd30      	pop	{r4, r5, pc}
 80070fc:	2000a650 	.word	0x2000a650

08007100 <sbrk_aligned>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	4e0e      	ldr	r6, [pc, #56]	; (800713c <sbrk_aligned+0x3c>)
 8007104:	460c      	mov	r4, r1
 8007106:	6831      	ldr	r1, [r6, #0]
 8007108:	4605      	mov	r5, r0
 800710a:	b911      	cbnz	r1, 8007112 <sbrk_aligned+0x12>
 800710c:	f000 f8bc 	bl	8007288 <_sbrk_r>
 8007110:	6030      	str	r0, [r6, #0]
 8007112:	4621      	mov	r1, r4
 8007114:	4628      	mov	r0, r5
 8007116:	f000 f8b7 	bl	8007288 <_sbrk_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d00a      	beq.n	8007134 <sbrk_aligned+0x34>
 800711e:	1cc4      	adds	r4, r0, #3
 8007120:	f024 0403 	bic.w	r4, r4, #3
 8007124:	42a0      	cmp	r0, r4
 8007126:	d007      	beq.n	8007138 <sbrk_aligned+0x38>
 8007128:	1a21      	subs	r1, r4, r0
 800712a:	4628      	mov	r0, r5
 800712c:	f000 f8ac 	bl	8007288 <_sbrk_r>
 8007130:	3001      	adds	r0, #1
 8007132:	d101      	bne.n	8007138 <sbrk_aligned+0x38>
 8007134:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007138:	4620      	mov	r0, r4
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	2000a654 	.word	0x2000a654

08007140 <_malloc_r>:
 8007140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	1ccd      	adds	r5, r1, #3
 8007146:	f025 0503 	bic.w	r5, r5, #3
 800714a:	3508      	adds	r5, #8
 800714c:	2d0c      	cmp	r5, #12
 800714e:	bf38      	it	cc
 8007150:	250c      	movcc	r5, #12
 8007152:	2d00      	cmp	r5, #0
 8007154:	4607      	mov	r7, r0
 8007156:	db01      	blt.n	800715c <_malloc_r+0x1c>
 8007158:	42a9      	cmp	r1, r5
 800715a:	d905      	bls.n	8007168 <_malloc_r+0x28>
 800715c:	230c      	movs	r3, #12
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	2600      	movs	r6, #0
 8007162:	4630      	mov	r0, r6
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	4e2e      	ldr	r6, [pc, #184]	; (8007224 <_malloc_r+0xe4>)
 800716a:	f000 f89d 	bl	80072a8 <__malloc_lock>
 800716e:	6833      	ldr	r3, [r6, #0]
 8007170:	461c      	mov	r4, r3
 8007172:	bb34      	cbnz	r4, 80071c2 <_malloc_r+0x82>
 8007174:	4629      	mov	r1, r5
 8007176:	4638      	mov	r0, r7
 8007178:	f7ff ffc2 	bl	8007100 <sbrk_aligned>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	4604      	mov	r4, r0
 8007180:	d14d      	bne.n	800721e <_malloc_r+0xde>
 8007182:	6834      	ldr	r4, [r6, #0]
 8007184:	4626      	mov	r6, r4
 8007186:	2e00      	cmp	r6, #0
 8007188:	d140      	bne.n	800720c <_malloc_r+0xcc>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	4631      	mov	r1, r6
 800718e:	4638      	mov	r0, r7
 8007190:	eb04 0803 	add.w	r8, r4, r3
 8007194:	f000 f878 	bl	8007288 <_sbrk_r>
 8007198:	4580      	cmp	r8, r0
 800719a:	d13a      	bne.n	8007212 <_malloc_r+0xd2>
 800719c:	6821      	ldr	r1, [r4, #0]
 800719e:	3503      	adds	r5, #3
 80071a0:	1a6d      	subs	r5, r5, r1
 80071a2:	f025 0503 	bic.w	r5, r5, #3
 80071a6:	3508      	adds	r5, #8
 80071a8:	2d0c      	cmp	r5, #12
 80071aa:	bf38      	it	cc
 80071ac:	250c      	movcc	r5, #12
 80071ae:	4629      	mov	r1, r5
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff ffa5 	bl	8007100 <sbrk_aligned>
 80071b6:	3001      	adds	r0, #1
 80071b8:	d02b      	beq.n	8007212 <_malloc_r+0xd2>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	442b      	add	r3, r5
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	e00e      	b.n	80071e0 <_malloc_r+0xa0>
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	1b52      	subs	r2, r2, r5
 80071c6:	d41e      	bmi.n	8007206 <_malloc_r+0xc6>
 80071c8:	2a0b      	cmp	r2, #11
 80071ca:	d916      	bls.n	80071fa <_malloc_r+0xba>
 80071cc:	1961      	adds	r1, r4, r5
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	6025      	str	r5, [r4, #0]
 80071d2:	bf18      	it	ne
 80071d4:	6059      	strne	r1, [r3, #4]
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	bf08      	it	eq
 80071da:	6031      	streq	r1, [r6, #0]
 80071dc:	5162      	str	r2, [r4, r5]
 80071de:	604b      	str	r3, [r1, #4]
 80071e0:	4638      	mov	r0, r7
 80071e2:	f104 060b 	add.w	r6, r4, #11
 80071e6:	f000 f865 	bl	80072b4 <__malloc_unlock>
 80071ea:	f026 0607 	bic.w	r6, r6, #7
 80071ee:	1d23      	adds	r3, r4, #4
 80071f0:	1af2      	subs	r2, r6, r3
 80071f2:	d0b6      	beq.n	8007162 <_malloc_r+0x22>
 80071f4:	1b9b      	subs	r3, r3, r6
 80071f6:	50a3      	str	r3, [r4, r2]
 80071f8:	e7b3      	b.n	8007162 <_malloc_r+0x22>
 80071fa:	6862      	ldr	r2, [r4, #4]
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	bf0c      	ite	eq
 8007200:	6032      	streq	r2, [r6, #0]
 8007202:	605a      	strne	r2, [r3, #4]
 8007204:	e7ec      	b.n	80071e0 <_malloc_r+0xa0>
 8007206:	4623      	mov	r3, r4
 8007208:	6864      	ldr	r4, [r4, #4]
 800720a:	e7b2      	b.n	8007172 <_malloc_r+0x32>
 800720c:	4634      	mov	r4, r6
 800720e:	6876      	ldr	r6, [r6, #4]
 8007210:	e7b9      	b.n	8007186 <_malloc_r+0x46>
 8007212:	230c      	movs	r3, #12
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	4638      	mov	r0, r7
 8007218:	f000 f84c 	bl	80072b4 <__malloc_unlock>
 800721c:	e7a1      	b.n	8007162 <_malloc_r+0x22>
 800721e:	6025      	str	r5, [r4, #0]
 8007220:	e7de      	b.n	80071e0 <_malloc_r+0xa0>
 8007222:	bf00      	nop
 8007224:	2000a650 	.word	0x2000a650

08007228 <_realloc_r>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	4680      	mov	r8, r0
 800722e:	4614      	mov	r4, r2
 8007230:	460e      	mov	r6, r1
 8007232:	b921      	cbnz	r1, 800723e <_realloc_r+0x16>
 8007234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	4611      	mov	r1, r2
 800723a:	f7ff bf81 	b.w	8007140 <_malloc_r>
 800723e:	b92a      	cbnz	r2, 800724c <_realloc_r+0x24>
 8007240:	f7ff ff12 	bl	8007068 <_free_r>
 8007244:	4625      	mov	r5, r4
 8007246:	4628      	mov	r0, r5
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	f000 f838 	bl	80072c0 <_malloc_usable_size_r>
 8007250:	4284      	cmp	r4, r0
 8007252:	4607      	mov	r7, r0
 8007254:	d802      	bhi.n	800725c <_realloc_r+0x34>
 8007256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800725a:	d812      	bhi.n	8007282 <_realloc_r+0x5a>
 800725c:	4621      	mov	r1, r4
 800725e:	4640      	mov	r0, r8
 8007260:	f7ff ff6e 	bl	8007140 <_malloc_r>
 8007264:	4605      	mov	r5, r0
 8007266:	2800      	cmp	r0, #0
 8007268:	d0ed      	beq.n	8007246 <_realloc_r+0x1e>
 800726a:	42bc      	cmp	r4, r7
 800726c:	4622      	mov	r2, r4
 800726e:	4631      	mov	r1, r6
 8007270:	bf28      	it	cs
 8007272:	463a      	movcs	r2, r7
 8007274:	f7ff fed0 	bl	8007018 <memcpy>
 8007278:	4631      	mov	r1, r6
 800727a:	4640      	mov	r0, r8
 800727c:	f7ff fef4 	bl	8007068 <_free_r>
 8007280:	e7e1      	b.n	8007246 <_realloc_r+0x1e>
 8007282:	4635      	mov	r5, r6
 8007284:	e7df      	b.n	8007246 <_realloc_r+0x1e>
	...

08007288 <_sbrk_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d06      	ldr	r5, [pc, #24]	; (80072a4 <_sbrk_r+0x1c>)
 800728c:	2300      	movs	r3, #0
 800728e:	4604      	mov	r4, r0
 8007290:	4608      	mov	r0, r1
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	f7fa fd6e 	bl	8001d74 <_sbrk>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_sbrk_r+0x1a>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_sbrk_r+0x1a>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	2000a658 	.word	0x2000a658

080072a8 <__malloc_lock>:
 80072a8:	4801      	ldr	r0, [pc, #4]	; (80072b0 <__malloc_lock+0x8>)
 80072aa:	f000 b811 	b.w	80072d0 <__retarget_lock_acquire_recursive>
 80072ae:	bf00      	nop
 80072b0:	2000a65c 	.word	0x2000a65c

080072b4 <__malloc_unlock>:
 80072b4:	4801      	ldr	r0, [pc, #4]	; (80072bc <__malloc_unlock+0x8>)
 80072b6:	f000 b80c 	b.w	80072d2 <__retarget_lock_release_recursive>
 80072ba:	bf00      	nop
 80072bc:	2000a65c 	.word	0x2000a65c

080072c0 <_malloc_usable_size_r>:
 80072c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c4:	1f18      	subs	r0, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfbc      	itt	lt
 80072ca:	580b      	ldrlt	r3, [r1, r0]
 80072cc:	18c0      	addlt	r0, r0, r3
 80072ce:	4770      	bx	lr

080072d0 <__retarget_lock_acquire_recursive>:
 80072d0:	4770      	bx	lr

080072d2 <__retarget_lock_release_recursive>:
 80072d2:	4770      	bx	lr
 80072d4:	0000      	movs	r0, r0
	...

080072d8 <sin>:
 80072d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072da:	ec53 2b10 	vmov	r2, r3, d0
 80072de:	4828      	ldr	r0, [pc, #160]	; (8007380 <sin+0xa8>)
 80072e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072e4:	4281      	cmp	r1, r0
 80072e6:	dc07      	bgt.n	80072f8 <sin+0x20>
 80072e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007378 <sin+0xa0>
 80072ec:	2000      	movs	r0, #0
 80072ee:	b005      	add	sp, #20
 80072f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f4:	f000 be6c 	b.w	8007fd0 <__kernel_sin>
 80072f8:	4822      	ldr	r0, [pc, #136]	; (8007384 <sin+0xac>)
 80072fa:	4281      	cmp	r1, r0
 80072fc:	dd09      	ble.n	8007312 <sin+0x3a>
 80072fe:	ee10 0a10 	vmov	r0, s0
 8007302:	4619      	mov	r1, r3
 8007304:	f7f8 ffc8 	bl	8000298 <__aeabi_dsub>
 8007308:	ec41 0b10 	vmov	d0, r0, r1
 800730c:	b005      	add	sp, #20
 800730e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007312:	4668      	mov	r0, sp
 8007314:	f000 f838 	bl	8007388 <__ieee754_rem_pio2>
 8007318:	f000 0003 	and.w	r0, r0, #3
 800731c:	2801      	cmp	r0, #1
 800731e:	d00c      	beq.n	800733a <sin+0x62>
 8007320:	2802      	cmp	r0, #2
 8007322:	d011      	beq.n	8007348 <sin+0x70>
 8007324:	b9f0      	cbnz	r0, 8007364 <sin+0x8c>
 8007326:	ed9d 1b02 	vldr	d1, [sp, #8]
 800732a:	ed9d 0b00 	vldr	d0, [sp]
 800732e:	2001      	movs	r0, #1
 8007330:	f000 fe4e 	bl	8007fd0 <__kernel_sin>
 8007334:	ec51 0b10 	vmov	r0, r1, d0
 8007338:	e7e6      	b.n	8007308 <sin+0x30>
 800733a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800733e:	ed9d 0b00 	vldr	d0, [sp]
 8007342:	f000 fa2d 	bl	80077a0 <__kernel_cos>
 8007346:	e7f5      	b.n	8007334 <sin+0x5c>
 8007348:	ed9d 1b02 	vldr	d1, [sp, #8]
 800734c:	ed9d 0b00 	vldr	d0, [sp]
 8007350:	2001      	movs	r0, #1
 8007352:	f000 fe3d 	bl	8007fd0 <__kernel_sin>
 8007356:	ec53 2b10 	vmov	r2, r3, d0
 800735a:	ee10 0a10 	vmov	r0, s0
 800735e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007362:	e7d1      	b.n	8007308 <sin+0x30>
 8007364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007368:	ed9d 0b00 	vldr	d0, [sp]
 800736c:	f000 fa18 	bl	80077a0 <__kernel_cos>
 8007370:	e7f1      	b.n	8007356 <sin+0x7e>
 8007372:	bf00      	nop
 8007374:	f3af 8000 	nop.w
	...
 8007380:	3fe921fb 	.word	0x3fe921fb
 8007384:	7fefffff 	.word	0x7fefffff

08007388 <__ieee754_rem_pio2>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	ed2d 8b02 	vpush	{d8}
 8007390:	ec55 4b10 	vmov	r4, r5, d0
 8007394:	4bca      	ldr	r3, [pc, #808]	; (80076c0 <__ieee754_rem_pio2+0x338>)
 8007396:	b08b      	sub	sp, #44	; 0x2c
 8007398:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800739c:	4598      	cmp	r8, r3
 800739e:	4682      	mov	sl, r0
 80073a0:	9502      	str	r5, [sp, #8]
 80073a2:	dc08      	bgt.n	80073b6 <__ieee754_rem_pio2+0x2e>
 80073a4:	2200      	movs	r2, #0
 80073a6:	2300      	movs	r3, #0
 80073a8:	ed80 0b00 	vstr	d0, [r0]
 80073ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80073b0:	f04f 0b00 	mov.w	fp, #0
 80073b4:	e028      	b.n	8007408 <__ieee754_rem_pio2+0x80>
 80073b6:	4bc3      	ldr	r3, [pc, #780]	; (80076c4 <__ieee754_rem_pio2+0x33c>)
 80073b8:	4598      	cmp	r8, r3
 80073ba:	dc78      	bgt.n	80074ae <__ieee754_rem_pio2+0x126>
 80073bc:	9b02      	ldr	r3, [sp, #8]
 80073be:	4ec2      	ldr	r6, [pc, #776]	; (80076c8 <__ieee754_rem_pio2+0x340>)
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	ee10 0a10 	vmov	r0, s0
 80073c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007688 <__ieee754_rem_pio2+0x300>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	4629      	mov	r1, r5
 80073ce:	dd39      	ble.n	8007444 <__ieee754_rem_pio2+0xbc>
 80073d0:	f7f8 ff62 	bl	8000298 <__aeabi_dsub>
 80073d4:	45b0      	cmp	r8, r6
 80073d6:	4604      	mov	r4, r0
 80073d8:	460d      	mov	r5, r1
 80073da:	d01b      	beq.n	8007414 <__ieee754_rem_pio2+0x8c>
 80073dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8007690 <__ieee754_rem_pio2+0x308>)
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f7f8 ff59 	bl	8000298 <__aeabi_dsub>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	e9ca 2300 	strd	r2, r3, [sl]
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f8 ff51 	bl	8000298 <__aeabi_dsub>
 80073f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007690 <__ieee754_rem_pio2+0x308>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f8 ff4c 	bl	8000298 <__aeabi_dsub>
 8007400:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007404:	f04f 0b01 	mov.w	fp, #1
 8007408:	4658      	mov	r0, fp
 800740a:	b00b      	add	sp, #44	; 0x2c
 800740c:	ecbd 8b02 	vpop	{d8}
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	a3a0      	add	r3, pc, #640	; (adr r3, 8007698 <__ieee754_rem_pio2+0x310>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f8 ff3d 	bl	8000298 <__aeabi_dsub>
 800741e:	a3a0      	add	r3, pc, #640	; (adr r3, 80076a0 <__ieee754_rem_pio2+0x318>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	4604      	mov	r4, r0
 8007426:	460d      	mov	r5, r1
 8007428:	f7f8 ff36 	bl	8000298 <__aeabi_dsub>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	e9ca 2300 	strd	r2, r3, [sl]
 8007434:	4620      	mov	r0, r4
 8007436:	4629      	mov	r1, r5
 8007438:	f7f8 ff2e 	bl	8000298 <__aeabi_dsub>
 800743c:	a398      	add	r3, pc, #608	; (adr r3, 80076a0 <__ieee754_rem_pio2+0x318>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	e7db      	b.n	80073fc <__ieee754_rem_pio2+0x74>
 8007444:	f7f8 ff2a 	bl	800029c <__adddf3>
 8007448:	45b0      	cmp	r8, r6
 800744a:	4604      	mov	r4, r0
 800744c:	460d      	mov	r5, r1
 800744e:	d016      	beq.n	800747e <__ieee754_rem_pio2+0xf6>
 8007450:	a38f      	add	r3, pc, #572	; (adr r3, 8007690 <__ieee754_rem_pio2+0x308>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f8 ff21 	bl	800029c <__adddf3>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	e9ca 2300 	strd	r2, r3, [sl]
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f8 ff17 	bl	8000298 <__aeabi_dsub>
 800746a:	a389      	add	r3, pc, #548	; (adr r3, 8007690 <__ieee754_rem_pio2+0x308>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f8 ff14 	bl	800029c <__adddf3>
 8007474:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007478:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800747c:	e7c4      	b.n	8007408 <__ieee754_rem_pio2+0x80>
 800747e:	a386      	add	r3, pc, #536	; (adr r3, 8007698 <__ieee754_rem_pio2+0x310>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f7f8 ff0a 	bl	800029c <__adddf3>
 8007488:	a385      	add	r3, pc, #532	; (adr r3, 80076a0 <__ieee754_rem_pio2+0x318>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	f7f8 ff03 	bl	800029c <__adddf3>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	e9ca 2300 	strd	r2, r3, [sl]
 800749e:	4620      	mov	r0, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	f7f8 fef9 	bl	8000298 <__aeabi_dsub>
 80074a6:	a37e      	add	r3, pc, #504	; (adr r3, 80076a0 <__ieee754_rem_pio2+0x318>)
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	e7e0      	b.n	8007470 <__ieee754_rem_pio2+0xe8>
 80074ae:	4b87      	ldr	r3, [pc, #540]	; (80076cc <__ieee754_rem_pio2+0x344>)
 80074b0:	4598      	cmp	r8, r3
 80074b2:	f300 80d9 	bgt.w	8007668 <__ieee754_rem_pio2+0x2e0>
 80074b6:	f000 fe49 	bl	800814c <fabs>
 80074ba:	ec55 4b10 	vmov	r4, r5, d0
 80074be:	ee10 0a10 	vmov	r0, s0
 80074c2:	a379      	add	r3, pc, #484	; (adr r3, 80076a8 <__ieee754_rem_pio2+0x320>)
 80074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f9 f89d 	bl	8000608 <__aeabi_dmul>
 80074ce:	4b80      	ldr	r3, [pc, #512]	; (80076d0 <__ieee754_rem_pio2+0x348>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	f7f8 fee3 	bl	800029c <__adddf3>
 80074d6:	f7f9 fb31 	bl	8000b3c <__aeabi_d2iz>
 80074da:	4683      	mov	fp, r0
 80074dc:	f7f9 f82a 	bl	8000534 <__aeabi_i2d>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	ec43 2b18 	vmov	d8, r2, r3
 80074e8:	a367      	add	r3, pc, #412	; (adr r3, 8007688 <__ieee754_rem_pio2+0x300>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f88b 	bl	8000608 <__aeabi_dmul>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f8 fecd 	bl	8000298 <__aeabi_dsub>
 80074fe:	a364      	add	r3, pc, #400	; (adr r3, 8007690 <__ieee754_rem_pio2+0x308>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	ec51 0b18 	vmov	r0, r1, d8
 800750c:	f7f9 f87c 	bl	8000608 <__aeabi_dmul>
 8007510:	f1bb 0f1f 	cmp.w	fp, #31
 8007514:	4604      	mov	r4, r0
 8007516:	460d      	mov	r5, r1
 8007518:	dc0d      	bgt.n	8007536 <__ieee754_rem_pio2+0x1ae>
 800751a:	4b6e      	ldr	r3, [pc, #440]	; (80076d4 <__ieee754_rem_pio2+0x34c>)
 800751c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007524:	4543      	cmp	r3, r8
 8007526:	d006      	beq.n	8007536 <__ieee754_rem_pio2+0x1ae>
 8007528:	4622      	mov	r2, r4
 800752a:	462b      	mov	r3, r5
 800752c:	4630      	mov	r0, r6
 800752e:	4639      	mov	r1, r7
 8007530:	f7f8 feb2 	bl	8000298 <__aeabi_dsub>
 8007534:	e00f      	b.n	8007556 <__ieee754_rem_pio2+0x1ce>
 8007536:	462b      	mov	r3, r5
 8007538:	4622      	mov	r2, r4
 800753a:	4630      	mov	r0, r6
 800753c:	4639      	mov	r1, r7
 800753e:	f7f8 feab 	bl	8000298 <__aeabi_dsub>
 8007542:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007546:	9303      	str	r3, [sp, #12]
 8007548:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800754c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007550:	f1b8 0f10 	cmp.w	r8, #16
 8007554:	dc02      	bgt.n	800755c <__ieee754_rem_pio2+0x1d4>
 8007556:	e9ca 0100 	strd	r0, r1, [sl]
 800755a:	e039      	b.n	80075d0 <__ieee754_rem_pio2+0x248>
 800755c:	a34e      	add	r3, pc, #312	; (adr r3, 8007698 <__ieee754_rem_pio2+0x310>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	ec51 0b18 	vmov	r0, r1, d8
 8007566:	f7f9 f84f 	bl	8000608 <__aeabi_dmul>
 800756a:	4604      	mov	r4, r0
 800756c:	460d      	mov	r5, r1
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4630      	mov	r0, r6
 8007574:	4639      	mov	r1, r7
 8007576:	f7f8 fe8f 	bl	8000298 <__aeabi_dsub>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4680      	mov	r8, r0
 8007580:	4689      	mov	r9, r1
 8007582:	4630      	mov	r0, r6
 8007584:	4639      	mov	r1, r7
 8007586:	f7f8 fe87 	bl	8000298 <__aeabi_dsub>
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	f7f8 fe83 	bl	8000298 <__aeabi_dsub>
 8007592:	a343      	add	r3, pc, #268	; (adr r3, 80076a0 <__ieee754_rem_pio2+0x318>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	4604      	mov	r4, r0
 800759a:	460d      	mov	r5, r1
 800759c:	ec51 0b18 	vmov	r0, r1, d8
 80075a0:	f7f9 f832 	bl	8000608 <__aeabi_dmul>
 80075a4:	4622      	mov	r2, r4
 80075a6:	462b      	mov	r3, r5
 80075a8:	f7f8 fe76 	bl	8000298 <__aeabi_dsub>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4604      	mov	r4, r0
 80075b2:	460d      	mov	r5, r1
 80075b4:	4640      	mov	r0, r8
 80075b6:	4649      	mov	r1, r9
 80075b8:	f7f8 fe6e 	bl	8000298 <__aeabi_dsub>
 80075bc:	9a03      	ldr	r2, [sp, #12]
 80075be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b31      	cmp	r3, #49	; 0x31
 80075c6:	dc24      	bgt.n	8007612 <__ieee754_rem_pio2+0x28a>
 80075c8:	e9ca 0100 	strd	r0, r1, [sl]
 80075cc:	4646      	mov	r6, r8
 80075ce:	464f      	mov	r7, r9
 80075d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80075d4:	4630      	mov	r0, r6
 80075d6:	4642      	mov	r2, r8
 80075d8:	464b      	mov	r3, r9
 80075da:	4639      	mov	r1, r7
 80075dc:	f7f8 fe5c 	bl	8000298 <__aeabi_dsub>
 80075e0:	462b      	mov	r3, r5
 80075e2:	4622      	mov	r2, r4
 80075e4:	f7f8 fe58 	bl	8000298 <__aeabi_dsub>
 80075e8:	9b02      	ldr	r3, [sp, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075f0:	f6bf af0a 	bge.w	8007408 <__ieee754_rem_pio2+0x80>
 80075f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80075fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007600:	f8ca 8000 	str.w	r8, [sl]
 8007604:	f8ca 0008 	str.w	r0, [sl, #8]
 8007608:	f8ca 300c 	str.w	r3, [sl, #12]
 800760c:	f1cb 0b00 	rsb	fp, fp, #0
 8007610:	e6fa      	b.n	8007408 <__ieee754_rem_pio2+0x80>
 8007612:	a327      	add	r3, pc, #156	; (adr r3, 80076b0 <__ieee754_rem_pio2+0x328>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	ec51 0b18 	vmov	r0, r1, d8
 800761c:	f7f8 fff4 	bl	8000608 <__aeabi_dmul>
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f8 fe34 	bl	8000298 <__aeabi_dsub>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f8 fe2c 	bl	8000298 <__aeabi_dsub>
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	f7f8 fe28 	bl	8000298 <__aeabi_dsub>
 8007648:	a31b      	add	r3, pc, #108	; (adr r3, 80076b8 <__ieee754_rem_pio2+0x330>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	4604      	mov	r4, r0
 8007650:	460d      	mov	r5, r1
 8007652:	ec51 0b18 	vmov	r0, r1, d8
 8007656:	f7f8 ffd7 	bl	8000608 <__aeabi_dmul>
 800765a:	4622      	mov	r2, r4
 800765c:	462b      	mov	r3, r5
 800765e:	f7f8 fe1b 	bl	8000298 <__aeabi_dsub>
 8007662:	4604      	mov	r4, r0
 8007664:	460d      	mov	r5, r1
 8007666:	e75f      	b.n	8007528 <__ieee754_rem_pio2+0x1a0>
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <__ieee754_rem_pio2+0x350>)
 800766a:	4598      	cmp	r8, r3
 800766c:	dd36      	ble.n	80076dc <__ieee754_rem_pio2+0x354>
 800766e:	ee10 2a10 	vmov	r2, s0
 8007672:	462b      	mov	r3, r5
 8007674:	4620      	mov	r0, r4
 8007676:	4629      	mov	r1, r5
 8007678:	f7f8 fe0e 	bl	8000298 <__aeabi_dsub>
 800767c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007680:	e9ca 0100 	strd	r0, r1, [sl]
 8007684:	e694      	b.n	80073b0 <__ieee754_rem_pio2+0x28>
 8007686:	bf00      	nop
 8007688:	54400000 	.word	0x54400000
 800768c:	3ff921fb 	.word	0x3ff921fb
 8007690:	1a626331 	.word	0x1a626331
 8007694:	3dd0b461 	.word	0x3dd0b461
 8007698:	1a600000 	.word	0x1a600000
 800769c:	3dd0b461 	.word	0x3dd0b461
 80076a0:	2e037073 	.word	0x2e037073
 80076a4:	3ba3198a 	.word	0x3ba3198a
 80076a8:	6dc9c883 	.word	0x6dc9c883
 80076ac:	3fe45f30 	.word	0x3fe45f30
 80076b0:	2e000000 	.word	0x2e000000
 80076b4:	3ba3198a 	.word	0x3ba3198a
 80076b8:	252049c1 	.word	0x252049c1
 80076bc:	397b839a 	.word	0x397b839a
 80076c0:	3fe921fb 	.word	0x3fe921fb
 80076c4:	4002d97b 	.word	0x4002d97b
 80076c8:	3ff921fb 	.word	0x3ff921fb
 80076cc:	413921fb 	.word	0x413921fb
 80076d0:	3fe00000 	.word	0x3fe00000
 80076d4:	080083e4 	.word	0x080083e4
 80076d8:	7fefffff 	.word	0x7fefffff
 80076dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80076e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80076e4:	ee10 0a10 	vmov	r0, s0
 80076e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80076ec:	ee10 6a10 	vmov	r6, s0
 80076f0:	460f      	mov	r7, r1
 80076f2:	f7f9 fa23 	bl	8000b3c <__aeabi_d2iz>
 80076f6:	f7f8 ff1d 	bl	8000534 <__aeabi_i2d>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4630      	mov	r0, r6
 8007700:	4639      	mov	r1, r7
 8007702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007706:	f7f8 fdc7 	bl	8000298 <__aeabi_dsub>
 800770a:	4b23      	ldr	r3, [pc, #140]	; (8007798 <__ieee754_rem_pio2+0x410>)
 800770c:	2200      	movs	r2, #0
 800770e:	f7f8 ff7b 	bl	8000608 <__aeabi_dmul>
 8007712:	460f      	mov	r7, r1
 8007714:	4606      	mov	r6, r0
 8007716:	f7f9 fa11 	bl	8000b3c <__aeabi_d2iz>
 800771a:	f7f8 ff0b 	bl	8000534 <__aeabi_i2d>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4630      	mov	r0, r6
 8007724:	4639      	mov	r1, r7
 8007726:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800772a:	f7f8 fdb5 	bl	8000298 <__aeabi_dsub>
 800772e:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <__ieee754_rem_pio2+0x410>)
 8007730:	2200      	movs	r2, #0
 8007732:	f7f8 ff69 	bl	8000608 <__aeabi_dmul>
 8007736:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800773a:	ad04      	add	r5, sp, #16
 800773c:	f04f 0803 	mov.w	r8, #3
 8007740:	46a9      	mov	r9, r5
 8007742:	2600      	movs	r6, #0
 8007744:	2700      	movs	r7, #0
 8007746:	4632      	mov	r2, r6
 8007748:	463b      	mov	r3, r7
 800774a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800774e:	46c3      	mov	fp, r8
 8007750:	3d08      	subs	r5, #8
 8007752:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007756:	f7f9 f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800775a:	2800      	cmp	r0, #0
 800775c:	d1f3      	bne.n	8007746 <__ieee754_rem_pio2+0x3be>
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <__ieee754_rem_pio2+0x414>)
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	2302      	movs	r3, #2
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4622      	mov	r2, r4
 8007768:	465b      	mov	r3, fp
 800776a:	4651      	mov	r1, sl
 800776c:	4648      	mov	r0, r9
 800776e:	f000 f8df 	bl	8007930 <__kernel_rem_pio2>
 8007772:	9b02      	ldr	r3, [sp, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	4683      	mov	fp, r0
 8007778:	f6bf ae46 	bge.w	8007408 <__ieee754_rem_pio2+0x80>
 800777c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007784:	e9ca 2300 	strd	r2, r3, [sl]
 8007788:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800778c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007790:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007794:	e73a      	b.n	800760c <__ieee754_rem_pio2+0x284>
 8007796:	bf00      	nop
 8007798:	41700000 	.word	0x41700000
 800779c:	08008464 	.word	0x08008464

080077a0 <__kernel_cos>:
 80077a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	ec57 6b10 	vmov	r6, r7, d0
 80077a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80077ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80077b0:	ed8d 1b00 	vstr	d1, [sp]
 80077b4:	da07      	bge.n	80077c6 <__kernel_cos+0x26>
 80077b6:	ee10 0a10 	vmov	r0, s0
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f9 f9be 	bl	8000b3c <__aeabi_d2iz>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f000 8088 	beq.w	80078d6 <__kernel_cos+0x136>
 80077c6:	4632      	mov	r2, r6
 80077c8:	463b      	mov	r3, r7
 80077ca:	4630      	mov	r0, r6
 80077cc:	4639      	mov	r1, r7
 80077ce:	f7f8 ff1b 	bl	8000608 <__aeabi_dmul>
 80077d2:	4b51      	ldr	r3, [pc, #324]	; (8007918 <__kernel_cos+0x178>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	4604      	mov	r4, r0
 80077d8:	460d      	mov	r5, r1
 80077da:	f7f8 ff15 	bl	8000608 <__aeabi_dmul>
 80077de:	a340      	add	r3, pc, #256	; (adr r3, 80078e0 <__kernel_cos+0x140>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	4682      	mov	sl, r0
 80077e6:	468b      	mov	fp, r1
 80077e8:	4620      	mov	r0, r4
 80077ea:	4629      	mov	r1, r5
 80077ec:	f7f8 ff0c 	bl	8000608 <__aeabi_dmul>
 80077f0:	a33d      	add	r3, pc, #244	; (adr r3, 80078e8 <__kernel_cos+0x148>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 fd51 	bl	800029c <__adddf3>
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	f7f8 ff03 	bl	8000608 <__aeabi_dmul>
 8007802:	a33b      	add	r3, pc, #236	; (adr r3, 80078f0 <__kernel_cos+0x150>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fd46 	bl	8000298 <__aeabi_dsub>
 800780c:	4622      	mov	r2, r4
 800780e:	462b      	mov	r3, r5
 8007810:	f7f8 fefa 	bl	8000608 <__aeabi_dmul>
 8007814:	a338      	add	r3, pc, #224	; (adr r3, 80078f8 <__kernel_cos+0x158>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fd3f 	bl	800029c <__adddf3>
 800781e:	4622      	mov	r2, r4
 8007820:	462b      	mov	r3, r5
 8007822:	f7f8 fef1 	bl	8000608 <__aeabi_dmul>
 8007826:	a336      	add	r3, pc, #216	; (adr r3, 8007900 <__kernel_cos+0x160>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fd34 	bl	8000298 <__aeabi_dsub>
 8007830:	4622      	mov	r2, r4
 8007832:	462b      	mov	r3, r5
 8007834:	f7f8 fee8 	bl	8000608 <__aeabi_dmul>
 8007838:	a333      	add	r3, pc, #204	; (adr r3, 8007908 <__kernel_cos+0x168>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fd2d 	bl	800029c <__adddf3>
 8007842:	4622      	mov	r2, r4
 8007844:	462b      	mov	r3, r5
 8007846:	f7f8 fedf 	bl	8000608 <__aeabi_dmul>
 800784a:	4622      	mov	r2, r4
 800784c:	462b      	mov	r3, r5
 800784e:	f7f8 fedb 	bl	8000608 <__aeabi_dmul>
 8007852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007856:	4604      	mov	r4, r0
 8007858:	460d      	mov	r5, r1
 800785a:	4630      	mov	r0, r6
 800785c:	4639      	mov	r1, r7
 800785e:	f7f8 fed3 	bl	8000608 <__aeabi_dmul>
 8007862:	460b      	mov	r3, r1
 8007864:	4602      	mov	r2, r0
 8007866:	4629      	mov	r1, r5
 8007868:	4620      	mov	r0, r4
 800786a:	f7f8 fd15 	bl	8000298 <__aeabi_dsub>
 800786e:	4b2b      	ldr	r3, [pc, #172]	; (800791c <__kernel_cos+0x17c>)
 8007870:	4598      	cmp	r8, r3
 8007872:	4606      	mov	r6, r0
 8007874:	460f      	mov	r7, r1
 8007876:	dc10      	bgt.n	800789a <__kernel_cos+0xfa>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4650      	mov	r0, sl
 800787e:	4659      	mov	r1, fp
 8007880:	f7f8 fd0a 	bl	8000298 <__aeabi_dsub>
 8007884:	460b      	mov	r3, r1
 8007886:	4926      	ldr	r1, [pc, #152]	; (8007920 <__kernel_cos+0x180>)
 8007888:	4602      	mov	r2, r0
 800788a:	2000      	movs	r0, #0
 800788c:	f7f8 fd04 	bl	8000298 <__aeabi_dsub>
 8007890:	ec41 0b10 	vmov	d0, r0, r1
 8007894:	b003      	add	sp, #12
 8007896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789a:	4b22      	ldr	r3, [pc, #136]	; (8007924 <__kernel_cos+0x184>)
 800789c:	4920      	ldr	r1, [pc, #128]	; (8007920 <__kernel_cos+0x180>)
 800789e:	4598      	cmp	r8, r3
 80078a0:	bfcc      	ite	gt
 80078a2:	4d21      	ldrgt	r5, [pc, #132]	; (8007928 <__kernel_cos+0x188>)
 80078a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80078a8:	2400      	movs	r4, #0
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	2000      	movs	r0, #0
 80078b0:	f7f8 fcf2 	bl	8000298 <__aeabi_dsub>
 80078b4:	4622      	mov	r2, r4
 80078b6:	4680      	mov	r8, r0
 80078b8:	4689      	mov	r9, r1
 80078ba:	462b      	mov	r3, r5
 80078bc:	4650      	mov	r0, sl
 80078be:	4659      	mov	r1, fp
 80078c0:	f7f8 fcea 	bl	8000298 <__aeabi_dsub>
 80078c4:	4632      	mov	r2, r6
 80078c6:	463b      	mov	r3, r7
 80078c8:	f7f8 fce6 	bl	8000298 <__aeabi_dsub>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	e7da      	b.n	800788c <__kernel_cos+0xec>
 80078d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007910 <__kernel_cos+0x170>
 80078da:	e7db      	b.n	8007894 <__kernel_cos+0xf4>
 80078dc:	f3af 8000 	nop.w
 80078e0:	be8838d4 	.word	0xbe8838d4
 80078e4:	bda8fae9 	.word	0xbda8fae9
 80078e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80078ec:	3e21ee9e 	.word	0x3e21ee9e
 80078f0:	809c52ad 	.word	0x809c52ad
 80078f4:	3e927e4f 	.word	0x3e927e4f
 80078f8:	19cb1590 	.word	0x19cb1590
 80078fc:	3efa01a0 	.word	0x3efa01a0
 8007900:	16c15177 	.word	0x16c15177
 8007904:	3f56c16c 	.word	0x3f56c16c
 8007908:	5555554c 	.word	0x5555554c
 800790c:	3fa55555 	.word	0x3fa55555
 8007910:	00000000 	.word	0x00000000
 8007914:	3ff00000 	.word	0x3ff00000
 8007918:	3fe00000 	.word	0x3fe00000
 800791c:	3fd33332 	.word	0x3fd33332
 8007920:	3ff00000 	.word	0x3ff00000
 8007924:	3fe90000 	.word	0x3fe90000
 8007928:	3fd20000 	.word	0x3fd20000
 800792c:	00000000 	.word	0x00000000

08007930 <__kernel_rem_pio2>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	ed2d 8b02 	vpush	{d8}
 8007938:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800793c:	f112 0f14 	cmn.w	r2, #20
 8007940:	9308      	str	r3, [sp, #32]
 8007942:	9101      	str	r1, [sp, #4]
 8007944:	4bc4      	ldr	r3, [pc, #784]	; (8007c58 <__kernel_rem_pio2+0x328>)
 8007946:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007948:	900b      	str	r0, [sp, #44]	; 0x2c
 800794a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800794e:	9302      	str	r3, [sp, #8]
 8007950:	9b08      	ldr	r3, [sp, #32]
 8007952:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007956:	bfa8      	it	ge
 8007958:	1ed4      	subge	r4, r2, #3
 800795a:	9306      	str	r3, [sp, #24]
 800795c:	bfb2      	itee	lt
 800795e:	2400      	movlt	r4, #0
 8007960:	2318      	movge	r3, #24
 8007962:	fb94 f4f3 	sdivge	r4, r4, r3
 8007966:	f06f 0317 	mvn.w	r3, #23
 800796a:	fb04 3303 	mla	r3, r4, r3, r3
 800796e:	eb03 0a02 	add.w	sl, r3, r2
 8007972:	9b02      	ldr	r3, [sp, #8]
 8007974:	9a06      	ldr	r2, [sp, #24]
 8007976:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007c48 <__kernel_rem_pio2+0x318>
 800797a:	eb03 0802 	add.w	r8, r3, r2
 800797e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007980:	1aa7      	subs	r7, r4, r2
 8007982:	ae22      	add	r6, sp, #136	; 0x88
 8007984:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007988:	2500      	movs	r5, #0
 800798a:	4545      	cmp	r5, r8
 800798c:	dd13      	ble.n	80079b6 <__kernel_rem_pio2+0x86>
 800798e:	9b08      	ldr	r3, [sp, #32]
 8007990:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007c48 <__kernel_rem_pio2+0x318>
 8007994:	aa22      	add	r2, sp, #136	; 0x88
 8007996:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800799a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800799e:	f04f 0800 	mov.w	r8, #0
 80079a2:	9b02      	ldr	r3, [sp, #8]
 80079a4:	4598      	cmp	r8, r3
 80079a6:	dc2f      	bgt.n	8007a08 <__kernel_rem_pio2+0xd8>
 80079a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80079ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80079b0:	462f      	mov	r7, r5
 80079b2:	2600      	movs	r6, #0
 80079b4:	e01b      	b.n	80079ee <__kernel_rem_pio2+0xbe>
 80079b6:	42ef      	cmn	r7, r5
 80079b8:	d407      	bmi.n	80079ca <__kernel_rem_pio2+0x9a>
 80079ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80079be:	f7f8 fdb9 	bl	8000534 <__aeabi_i2d>
 80079c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80079c6:	3501      	adds	r5, #1
 80079c8:	e7df      	b.n	800798a <__kernel_rem_pio2+0x5a>
 80079ca:	ec51 0b18 	vmov	r0, r1, d8
 80079ce:	e7f8      	b.n	80079c2 <__kernel_rem_pio2+0x92>
 80079d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80079d8:	f7f8 fe16 	bl	8000608 <__aeabi_dmul>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e4:	f7f8 fc5a 	bl	800029c <__adddf3>
 80079e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079ec:	3601      	adds	r6, #1
 80079ee:	9b06      	ldr	r3, [sp, #24]
 80079f0:	429e      	cmp	r6, r3
 80079f2:	f1a7 0708 	sub.w	r7, r7, #8
 80079f6:	ddeb      	ble.n	80079d0 <__kernel_rem_pio2+0xa0>
 80079f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80079fc:	f108 0801 	add.w	r8, r8, #1
 8007a00:	ecab 7b02 	vstmia	fp!, {d7}
 8007a04:	3508      	adds	r5, #8
 8007a06:	e7cc      	b.n	80079a2 <__kernel_rem_pio2+0x72>
 8007a08:	9b02      	ldr	r3, [sp, #8]
 8007a0a:	aa0e      	add	r2, sp, #56	; 0x38
 8007a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a10:	930d      	str	r3, [sp, #52]	; 0x34
 8007a12:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007a14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007a18:	9c02      	ldr	r4, [sp, #8]
 8007a1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a1c:	00e3      	lsls	r3, r4, #3
 8007a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a20:	ab9a      	add	r3, sp, #616	; 0x268
 8007a22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a26:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007a2a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007a2e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007a30:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007a34:	46c3      	mov	fp, r8
 8007a36:	46a1      	mov	r9, r4
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	f1a5 0508 	sub.w	r5, r5, #8
 8007a40:	dc77      	bgt.n	8007b32 <__kernel_rem_pio2+0x202>
 8007a42:	ec47 6b10 	vmov	d0, r6, r7
 8007a46:	4650      	mov	r0, sl
 8007a48:	f000 fc0a 	bl	8008260 <scalbn>
 8007a4c:	ec57 6b10 	vmov	r6, r7, d0
 8007a50:	2200      	movs	r2, #0
 8007a52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007a56:	ee10 0a10 	vmov	r0, s0
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f8 fdd4 	bl	8000608 <__aeabi_dmul>
 8007a60:	ec41 0b10 	vmov	d0, r0, r1
 8007a64:	f000 fb7c 	bl	8008160 <floor>
 8007a68:	4b7c      	ldr	r3, [pc, #496]	; (8007c5c <__kernel_rem_pio2+0x32c>)
 8007a6a:	ec51 0b10 	vmov	r0, r1, d0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f7f8 fdca 	bl	8000608 <__aeabi_dmul>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f8 fc0c 	bl	8000298 <__aeabi_dsub>
 8007a80:	460f      	mov	r7, r1
 8007a82:	4606      	mov	r6, r0
 8007a84:	f7f9 f85a 	bl	8000b3c <__aeabi_d2iz>
 8007a88:	9004      	str	r0, [sp, #16]
 8007a8a:	f7f8 fd53 	bl	8000534 <__aeabi_i2d>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4630      	mov	r0, r6
 8007a94:	4639      	mov	r1, r7
 8007a96:	f7f8 fbff 	bl	8000298 <__aeabi_dsub>
 8007a9a:	f1ba 0f00 	cmp.w	sl, #0
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	dd6d      	ble.n	8007b80 <__kernel_rem_pio2+0x250>
 8007aa4:	1e62      	subs	r2, r4, #1
 8007aa6:	ab0e      	add	r3, sp, #56	; 0x38
 8007aa8:	9d04      	ldr	r5, [sp, #16]
 8007aaa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007aae:	f1ca 0118 	rsb	r1, sl, #24
 8007ab2:	fa40 f301 	asr.w	r3, r0, r1
 8007ab6:	441d      	add	r5, r3
 8007ab8:	408b      	lsls	r3, r1
 8007aba:	1ac0      	subs	r0, r0, r3
 8007abc:	ab0e      	add	r3, sp, #56	; 0x38
 8007abe:	9504      	str	r5, [sp, #16]
 8007ac0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007ac4:	f1ca 0317 	rsb	r3, sl, #23
 8007ac8:	fa40 fb03 	asr.w	fp, r0, r3
 8007acc:	f1bb 0f00 	cmp.w	fp, #0
 8007ad0:	dd65      	ble.n	8007b9e <__kernel_rem_pio2+0x26e>
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	9304      	str	r3, [sp, #16]
 8007ada:	4615      	mov	r5, r2
 8007adc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007ae0:	4294      	cmp	r4, r2
 8007ae2:	f300 809c 	bgt.w	8007c1e <__kernel_rem_pio2+0x2ee>
 8007ae6:	f1ba 0f00 	cmp.w	sl, #0
 8007aea:	dd07      	ble.n	8007afc <__kernel_rem_pio2+0x1cc>
 8007aec:	f1ba 0f01 	cmp.w	sl, #1
 8007af0:	f000 80c0 	beq.w	8007c74 <__kernel_rem_pio2+0x344>
 8007af4:	f1ba 0f02 	cmp.w	sl, #2
 8007af8:	f000 80c6 	beq.w	8007c88 <__kernel_rem_pio2+0x358>
 8007afc:	f1bb 0f02 	cmp.w	fp, #2
 8007b00:	d14d      	bne.n	8007b9e <__kernel_rem_pio2+0x26e>
 8007b02:	4632      	mov	r2, r6
 8007b04:	463b      	mov	r3, r7
 8007b06:	4956      	ldr	r1, [pc, #344]	; (8007c60 <__kernel_rem_pio2+0x330>)
 8007b08:	2000      	movs	r0, #0
 8007b0a:	f7f8 fbc5 	bl	8000298 <__aeabi_dsub>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460f      	mov	r7, r1
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	d043      	beq.n	8007b9e <__kernel_rem_pio2+0x26e>
 8007b16:	4650      	mov	r0, sl
 8007b18:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007c50 <__kernel_rem_pio2+0x320>
 8007b1c:	f000 fba0 	bl	8008260 <scalbn>
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	ec53 2b10 	vmov	r2, r3, d0
 8007b28:	f7f8 fbb6 	bl	8000298 <__aeabi_dsub>
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	e035      	b.n	8007b9e <__kernel_rem_pio2+0x26e>
 8007b32:	4b4c      	ldr	r3, [pc, #304]	; (8007c64 <__kernel_rem_pio2+0x334>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 fd65 	bl	8000608 <__aeabi_dmul>
 8007b3e:	f7f8 fffd 	bl	8000b3c <__aeabi_d2iz>
 8007b42:	f7f8 fcf7 	bl	8000534 <__aeabi_i2d>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	ec43 2b18 	vmov	d8, r2, r3
 8007b4e:	4b46      	ldr	r3, [pc, #280]	; (8007c68 <__kernel_rem_pio2+0x338>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	f7f8 fd59 	bl	8000608 <__aeabi_dmul>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7f8 fb9b 	bl	8000298 <__aeabi_dsub>
 8007b62:	f7f8 ffeb 	bl	8000b3c <__aeabi_d2iz>
 8007b66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b6a:	f84b 0b04 	str.w	r0, [fp], #4
 8007b6e:	ec51 0b18 	vmov	r0, r1, d8
 8007b72:	f7f8 fb93 	bl	800029c <__adddf3>
 8007b76:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	460f      	mov	r7, r1
 8007b7e:	e75b      	b.n	8007a38 <__kernel_rem_pio2+0x108>
 8007b80:	d106      	bne.n	8007b90 <__kernel_rem_pio2+0x260>
 8007b82:	1e63      	subs	r3, r4, #1
 8007b84:	aa0e      	add	r2, sp, #56	; 0x38
 8007b86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b8a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007b8e:	e79d      	b.n	8007acc <__kernel_rem_pio2+0x19c>
 8007b90:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <__kernel_rem_pio2+0x33c>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	f7f8 ffbe 	bl	8000b14 <__aeabi_dcmpge>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d13d      	bne.n	8007c18 <__kernel_rem_pio2+0x2e8>
 8007b9c:	4683      	mov	fp, r0
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	f7f8 ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f000 80c0 	beq.w	8007d30 <__kernel_rem_pio2+0x400>
 8007bb0:	1e65      	subs	r5, r4, #1
 8007bb2:	462b      	mov	r3, r5
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	9902      	ldr	r1, [sp, #8]
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	da6c      	bge.n	8007c96 <__kernel_rem_pio2+0x366>
 8007bbc:	2a00      	cmp	r2, #0
 8007bbe:	f000 8089 	beq.w	8007cd4 <__kernel_rem_pio2+0x3a4>
 8007bc2:	ab0e      	add	r3, sp, #56	; 0x38
 8007bc4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007bc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80ad 	beq.w	8007d2c <__kernel_rem_pio2+0x3fc>
 8007bd2:	4650      	mov	r0, sl
 8007bd4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007c50 <__kernel_rem_pio2+0x320>
 8007bd8:	f000 fb42 	bl	8008260 <scalbn>
 8007bdc:	ab9a      	add	r3, sp, #616	; 0x268
 8007bde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007be2:	ec57 6b10 	vmov	r6, r7, d0
 8007be6:	00ec      	lsls	r4, r5, #3
 8007be8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007bec:	46aa      	mov	sl, r5
 8007bee:	f1ba 0f00 	cmp.w	sl, #0
 8007bf2:	f280 80d6 	bge.w	8007da2 <__kernel_rem_pio2+0x472>
 8007bf6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007c48 <__kernel_rem_pio2+0x318>
 8007bfa:	462e      	mov	r6, r5
 8007bfc:	2e00      	cmp	r6, #0
 8007bfe:	f2c0 8104 	blt.w	8007e0a <__kernel_rem_pio2+0x4da>
 8007c02:	ab72      	add	r3, sp, #456	; 0x1c8
 8007c04:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007c08:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007c70 <__kernel_rem_pio2+0x340>
 8007c0c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007c10:	f04f 0800 	mov.w	r8, #0
 8007c14:	1baf      	subs	r7, r5, r6
 8007c16:	e0ea      	b.n	8007dee <__kernel_rem_pio2+0x4be>
 8007c18:	f04f 0b02 	mov.w	fp, #2
 8007c1c:	e759      	b.n	8007ad2 <__kernel_rem_pio2+0x1a2>
 8007c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c22:	b955      	cbnz	r5, 8007c3a <__kernel_rem_pio2+0x30a>
 8007c24:	b123      	cbz	r3, 8007c30 <__kernel_rem_pio2+0x300>
 8007c26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007c2a:	f8c8 3000 	str.w	r3, [r8]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	3201      	adds	r2, #1
 8007c32:	f108 0804 	add.w	r8, r8, #4
 8007c36:	461d      	mov	r5, r3
 8007c38:	e752      	b.n	8007ae0 <__kernel_rem_pio2+0x1b0>
 8007c3a:	1acb      	subs	r3, r1, r3
 8007c3c:	f8c8 3000 	str.w	r3, [r8]
 8007c40:	462b      	mov	r3, r5
 8007c42:	e7f5      	b.n	8007c30 <__kernel_rem_pio2+0x300>
 8007c44:	f3af 8000 	nop.w
	...
 8007c54:	3ff00000 	.word	0x3ff00000
 8007c58:	080085b0 	.word	0x080085b0
 8007c5c:	40200000 	.word	0x40200000
 8007c60:	3ff00000 	.word	0x3ff00000
 8007c64:	3e700000 	.word	0x3e700000
 8007c68:	41700000 	.word	0x41700000
 8007c6c:	3fe00000 	.word	0x3fe00000
 8007c70:	08008570 	.word	0x08008570
 8007c74:	1e62      	subs	r2, r4, #1
 8007c76:	ab0e      	add	r3, sp, #56	; 0x38
 8007c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007c80:	a90e      	add	r1, sp, #56	; 0x38
 8007c82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007c86:	e739      	b.n	8007afc <__kernel_rem_pio2+0x1cc>
 8007c88:	1e62      	subs	r2, r4, #1
 8007c8a:	ab0e      	add	r3, sp, #56	; 0x38
 8007c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007c94:	e7f4      	b.n	8007c80 <__kernel_rem_pio2+0x350>
 8007c96:	a90e      	add	r1, sp, #56	; 0x38
 8007c98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	e789      	b.n	8007bb6 <__kernel_rem_pio2+0x286>
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	d0fa      	beq.n	8007ca2 <__kernel_rem_pio2+0x372>
 8007cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007cb2:	446a      	add	r2, sp
 8007cb4:	3a98      	subs	r2, #152	; 0x98
 8007cb6:	920a      	str	r2, [sp, #40]	; 0x28
 8007cb8:	9a08      	ldr	r2, [sp, #32]
 8007cba:	18e3      	adds	r3, r4, r3
 8007cbc:	18a5      	adds	r5, r4, r2
 8007cbe:	aa22      	add	r2, sp, #136	; 0x88
 8007cc0:	f104 0801 	add.w	r8, r4, #1
 8007cc4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	4543      	cmp	r3, r8
 8007cce:	da04      	bge.n	8007cda <__kernel_rem_pio2+0x3aa>
 8007cd0:	461c      	mov	r4, r3
 8007cd2:	e6a3      	b.n	8007a1c <__kernel_rem_pio2+0xec>
 8007cd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e7e4      	b.n	8007ca4 <__kernel_rem_pio2+0x374>
 8007cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cdc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ce0:	f7f8 fc28 	bl	8000534 <__aeabi_i2d>
 8007ce4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cea:	46ab      	mov	fp, r5
 8007cec:	461c      	mov	r4, r3
 8007cee:	f04f 0900 	mov.w	r9, #0
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	2700      	movs	r7, #0
 8007cf6:	9b06      	ldr	r3, [sp, #24]
 8007cf8:	4599      	cmp	r9, r3
 8007cfa:	dd06      	ble.n	8007d0a <__kernel_rem_pio2+0x3da>
 8007cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007d02:	f108 0801 	add.w	r8, r8, #1
 8007d06:	930a      	str	r3, [sp, #40]	; 0x28
 8007d08:	e7df      	b.n	8007cca <__kernel_rem_pio2+0x39a>
 8007d0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007d0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007d12:	f7f8 fc79 	bl	8000608 <__aeabi_dmul>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 fabd 	bl	800029c <__adddf3>
 8007d22:	f109 0901 	add.w	r9, r9, #1
 8007d26:	4606      	mov	r6, r0
 8007d28:	460f      	mov	r7, r1
 8007d2a:	e7e4      	b.n	8007cf6 <__kernel_rem_pio2+0x3c6>
 8007d2c:	3d01      	subs	r5, #1
 8007d2e:	e748      	b.n	8007bc2 <__kernel_rem_pio2+0x292>
 8007d30:	ec47 6b10 	vmov	d0, r6, r7
 8007d34:	f1ca 0000 	rsb	r0, sl, #0
 8007d38:	f000 fa92 	bl	8008260 <scalbn>
 8007d3c:	ec57 6b10 	vmov	r6, r7, d0
 8007d40:	4ba0      	ldr	r3, [pc, #640]	; (8007fc4 <__kernel_rem_pio2+0x694>)
 8007d42:	ee10 0a10 	vmov	r0, s0
 8007d46:	2200      	movs	r2, #0
 8007d48:	4639      	mov	r1, r7
 8007d4a:	f7f8 fee3 	bl	8000b14 <__aeabi_dcmpge>
 8007d4e:	b1f8      	cbz	r0, 8007d90 <__kernel_rem_pio2+0x460>
 8007d50:	4b9d      	ldr	r3, [pc, #628]	; (8007fc8 <__kernel_rem_pio2+0x698>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 fc56 	bl	8000608 <__aeabi_dmul>
 8007d5c:	f7f8 feee 	bl	8000b3c <__aeabi_d2iz>
 8007d60:	4680      	mov	r8, r0
 8007d62:	f7f8 fbe7 	bl	8000534 <__aeabi_i2d>
 8007d66:	4b97      	ldr	r3, [pc, #604]	; (8007fc4 <__kernel_rem_pio2+0x694>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f7f8 fc4d 	bl	8000608 <__aeabi_dmul>
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4602      	mov	r2, r0
 8007d72:	4639      	mov	r1, r7
 8007d74:	4630      	mov	r0, r6
 8007d76:	f7f8 fa8f 	bl	8000298 <__aeabi_dsub>
 8007d7a:	f7f8 fedf 	bl	8000b3c <__aeabi_d2iz>
 8007d7e:	1c65      	adds	r5, r4, #1
 8007d80:	ab0e      	add	r3, sp, #56	; 0x38
 8007d82:	f10a 0a18 	add.w	sl, sl, #24
 8007d86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d8a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007d8e:	e720      	b.n	8007bd2 <__kernel_rem_pio2+0x2a2>
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fed2 	bl	8000b3c <__aeabi_d2iz>
 8007d98:	ab0e      	add	r3, sp, #56	; 0x38
 8007d9a:	4625      	mov	r5, r4
 8007d9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007da0:	e717      	b.n	8007bd2 <__kernel_rem_pio2+0x2a2>
 8007da2:	ab0e      	add	r3, sp, #56	; 0x38
 8007da4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007da8:	f7f8 fbc4 	bl	8000534 <__aeabi_i2d>
 8007dac:	4632      	mov	r2, r6
 8007dae:	463b      	mov	r3, r7
 8007db0:	f7f8 fc2a 	bl	8000608 <__aeabi_dmul>
 8007db4:	4b84      	ldr	r3, [pc, #528]	; (8007fc8 <__kernel_rem_pio2+0x698>)
 8007db6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007dba:	2200      	movs	r2, #0
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	f7f8 fc22 	bl	8000608 <__aeabi_dmul>
 8007dc4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007dc8:	4606      	mov	r6, r0
 8007dca:	460f      	mov	r7, r1
 8007dcc:	e70f      	b.n	8007bee <__kernel_rem_pio2+0x2be>
 8007dce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007dd2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007dd6:	f7f8 fc17 	bl	8000608 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de2:	f7f8 fa5b 	bl	800029c <__adddf3>
 8007de6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dea:	f108 0801 	add.w	r8, r8, #1
 8007dee:	9b02      	ldr	r3, [sp, #8]
 8007df0:	4598      	cmp	r8, r3
 8007df2:	dc01      	bgt.n	8007df8 <__kernel_rem_pio2+0x4c8>
 8007df4:	45b8      	cmp	r8, r7
 8007df6:	ddea      	ble.n	8007dce <__kernel_rem_pio2+0x49e>
 8007df8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007dfc:	ab4a      	add	r3, sp, #296	; 0x128
 8007dfe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e02:	ed87 7b00 	vstr	d7, [r7]
 8007e06:	3e01      	subs	r6, #1
 8007e08:	e6f8      	b.n	8007bfc <__kernel_rem_pio2+0x2cc>
 8007e0a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	dc0b      	bgt.n	8007e28 <__kernel_rem_pio2+0x4f8>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dc35      	bgt.n	8007e80 <__kernel_rem_pio2+0x550>
 8007e14:	d059      	beq.n	8007eca <__kernel_rem_pio2+0x59a>
 8007e16:	9b04      	ldr	r3, [sp, #16]
 8007e18:	f003 0007 	and.w	r0, r3, #7
 8007e1c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007e20:	ecbd 8b02 	vpop	{d8}
 8007e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d1f3      	bne.n	8007e16 <__kernel_rem_pio2+0x4e6>
 8007e2e:	ab4a      	add	r3, sp, #296	; 0x128
 8007e30:	4423      	add	r3, r4
 8007e32:	9306      	str	r3, [sp, #24]
 8007e34:	461c      	mov	r4, r3
 8007e36:	469a      	mov	sl, r3
 8007e38:	9502      	str	r5, [sp, #8]
 8007e3a:	9b02      	ldr	r3, [sp, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007e42:	dc6b      	bgt.n	8007f1c <__kernel_rem_pio2+0x5ec>
 8007e44:	46aa      	mov	sl, r5
 8007e46:	f1ba 0f01 	cmp.w	sl, #1
 8007e4a:	f1a4 0408 	sub.w	r4, r4, #8
 8007e4e:	f300 8085 	bgt.w	8007f5c <__kernel_rem_pio2+0x62c>
 8007e52:	9c06      	ldr	r4, [sp, #24]
 8007e54:	2000      	movs	r0, #0
 8007e56:	3408      	adds	r4, #8
 8007e58:	2100      	movs	r1, #0
 8007e5a:	2d01      	cmp	r5, #1
 8007e5c:	f300 809d 	bgt.w	8007f9a <__kernel_rem_pio2+0x66a>
 8007e60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007e64:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007e68:	f1bb 0f00 	cmp.w	fp, #0
 8007e6c:	f040 809b 	bne.w	8007fa6 <__kernel_rem_pio2+0x676>
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	e9c3 5600 	strd	r5, r6, [r3]
 8007e76:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007e7a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007e7e:	e7ca      	b.n	8007e16 <__kernel_rem_pio2+0x4e6>
 8007e80:	3408      	adds	r4, #8
 8007e82:	ab4a      	add	r3, sp, #296	; 0x128
 8007e84:	441c      	add	r4, r3
 8007e86:	462e      	mov	r6, r5
 8007e88:	2000      	movs	r0, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	da36      	bge.n	8007efe <__kernel_rem_pio2+0x5ce>
 8007e90:	f1bb 0f00 	cmp.w	fp, #0
 8007e94:	d039      	beq.n	8007f0a <__kernel_rem_pio2+0x5da>
 8007e96:	4602      	mov	r2, r0
 8007e98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e9c:	9c01      	ldr	r4, [sp, #4]
 8007e9e:	e9c4 2300 	strd	r2, r3, [r4]
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007eaa:	f7f8 f9f5 	bl	8000298 <__aeabi_dsub>
 8007eae:	ae4c      	add	r6, sp, #304	; 0x130
 8007eb0:	2401      	movs	r4, #1
 8007eb2:	42a5      	cmp	r5, r4
 8007eb4:	da2c      	bge.n	8007f10 <__kernel_rem_pio2+0x5e0>
 8007eb6:	f1bb 0f00 	cmp.w	fp, #0
 8007eba:	d002      	beq.n	8007ec2 <__kernel_rem_pio2+0x592>
 8007ebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007ec8:	e7a5      	b.n	8007e16 <__kernel_rem_pio2+0x4e6>
 8007eca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007ece:	eb0d 0403 	add.w	r4, sp, r3
 8007ed2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	da09      	bge.n	8007ef2 <__kernel_rem_pio2+0x5c2>
 8007ede:	f1bb 0f00 	cmp.w	fp, #0
 8007ee2:	d002      	beq.n	8007eea <__kernel_rem_pio2+0x5ba>
 8007ee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee8:	4619      	mov	r1, r3
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	e9c3 0100 	strd	r0, r1, [r3]
 8007ef0:	e791      	b.n	8007e16 <__kernel_rem_pio2+0x4e6>
 8007ef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ef6:	f7f8 f9d1 	bl	800029c <__adddf3>
 8007efa:	3d01      	subs	r5, #1
 8007efc:	e7ed      	b.n	8007eda <__kernel_rem_pio2+0x5aa>
 8007efe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007f02:	f7f8 f9cb 	bl	800029c <__adddf3>
 8007f06:	3e01      	subs	r6, #1
 8007f08:	e7c0      	b.n	8007e8c <__kernel_rem_pio2+0x55c>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e7c5      	b.n	8007e9c <__kernel_rem_pio2+0x56c>
 8007f10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007f14:	f7f8 f9c2 	bl	800029c <__adddf3>
 8007f18:	3401      	adds	r4, #1
 8007f1a:	e7ca      	b.n	8007eb2 <__kernel_rem_pio2+0x582>
 8007f1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	9302      	str	r3, [sp, #8]
 8007f2a:	4632      	mov	r2, r6
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	4640      	mov	r0, r8
 8007f30:	4649      	mov	r1, r9
 8007f32:	f7f8 f9b3 	bl	800029c <__adddf3>
 8007f36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4640      	mov	r0, r8
 8007f40:	4649      	mov	r1, r9
 8007f42:	f7f8 f9a9 	bl	8000298 <__aeabi_dsub>
 8007f46:	4632      	mov	r2, r6
 8007f48:	463b      	mov	r3, r7
 8007f4a:	f7f8 f9a7 	bl	800029c <__adddf3>
 8007f4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007f52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f56:	ed8a 7b00 	vstr	d7, [sl]
 8007f5a:	e76e      	b.n	8007e3a <__kernel_rem_pio2+0x50a>
 8007f5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007f60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007f64:	4640      	mov	r0, r8
 8007f66:	4632      	mov	r2, r6
 8007f68:	463b      	mov	r3, r7
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	f7f8 f996 	bl	800029c <__adddf3>
 8007f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4640      	mov	r0, r8
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	f7f8 f98c 	bl	8000298 <__aeabi_dsub>
 8007f80:	4632      	mov	r2, r6
 8007f82:	463b      	mov	r3, r7
 8007f84:	f7f8 f98a 	bl	800029c <__adddf3>
 8007f88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f90:	ed84 7b00 	vstr	d7, [r4]
 8007f94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f98:	e755      	b.n	8007e46 <__kernel_rem_pio2+0x516>
 8007f9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007f9e:	f7f8 f97d 	bl	800029c <__adddf3>
 8007fa2:	3d01      	subs	r5, #1
 8007fa4:	e759      	b.n	8007e5a <__kernel_rem_pio2+0x52a>
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	9a01      	ldr	r2, [sp, #4]
 8007faa:	601d      	str	r5, [r3, #0]
 8007fac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007fb0:	605c      	str	r4, [r3, #4]
 8007fb2:	609f      	str	r7, [r3, #8]
 8007fb4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007fb8:	60d3      	str	r3, [r2, #12]
 8007fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fbe:	6110      	str	r0, [r2, #16]
 8007fc0:	6153      	str	r3, [r2, #20]
 8007fc2:	e728      	b.n	8007e16 <__kernel_rem_pio2+0x4e6>
 8007fc4:	41700000 	.word	0x41700000
 8007fc8:	3e700000 	.word	0x3e700000
 8007fcc:	00000000 	.word	0x00000000

08007fd0 <__kernel_sin>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	ed2d 8b04 	vpush	{d8-d9}
 8007fd8:	eeb0 8a41 	vmov.f32	s16, s2
 8007fdc:	eef0 8a61 	vmov.f32	s17, s3
 8007fe0:	ec55 4b10 	vmov	r4, r5, d0
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007fea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007fee:	9001      	str	r0, [sp, #4]
 8007ff0:	da06      	bge.n	8008000 <__kernel_sin+0x30>
 8007ff2:	ee10 0a10 	vmov	r0, s0
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	f7f8 fda0 	bl	8000b3c <__aeabi_d2iz>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d051      	beq.n	80080a4 <__kernel_sin+0xd4>
 8008000:	4622      	mov	r2, r4
 8008002:	462b      	mov	r3, r5
 8008004:	4620      	mov	r0, r4
 8008006:	4629      	mov	r1, r5
 8008008:	f7f8 fafe 	bl	8000608 <__aeabi_dmul>
 800800c:	4682      	mov	sl, r0
 800800e:	468b      	mov	fp, r1
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 faf6 	bl	8000608 <__aeabi_dmul>
 800801c:	a341      	add	r3, pc, #260	; (adr r3, 8008124 <__kernel_sin+0x154>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	4680      	mov	r8, r0
 8008024:	4689      	mov	r9, r1
 8008026:	4650      	mov	r0, sl
 8008028:	4659      	mov	r1, fp
 800802a:	f7f8 faed 	bl	8000608 <__aeabi_dmul>
 800802e:	a33f      	add	r3, pc, #252	; (adr r3, 800812c <__kernel_sin+0x15c>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 f930 	bl	8000298 <__aeabi_dsub>
 8008038:	4652      	mov	r2, sl
 800803a:	465b      	mov	r3, fp
 800803c:	f7f8 fae4 	bl	8000608 <__aeabi_dmul>
 8008040:	a33c      	add	r3, pc, #240	; (adr r3, 8008134 <__kernel_sin+0x164>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f929 	bl	800029c <__adddf3>
 800804a:	4652      	mov	r2, sl
 800804c:	465b      	mov	r3, fp
 800804e:	f7f8 fadb 	bl	8000608 <__aeabi_dmul>
 8008052:	a33a      	add	r3, pc, #232	; (adr r3, 800813c <__kernel_sin+0x16c>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 f91e 	bl	8000298 <__aeabi_dsub>
 800805c:	4652      	mov	r2, sl
 800805e:	465b      	mov	r3, fp
 8008060:	f7f8 fad2 	bl	8000608 <__aeabi_dmul>
 8008064:	a337      	add	r3, pc, #220	; (adr r3, 8008144 <__kernel_sin+0x174>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f917 	bl	800029c <__adddf3>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	4606      	mov	r6, r0
 8008072:	460f      	mov	r7, r1
 8008074:	b9eb      	cbnz	r3, 80080b2 <__kernel_sin+0xe2>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4650      	mov	r0, sl
 800807c:	4659      	mov	r1, fp
 800807e:	f7f8 fac3 	bl	8000608 <__aeabi_dmul>
 8008082:	a325      	add	r3, pc, #148	; (adr r3, 8008118 <__kernel_sin+0x148>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f7f8 f906 	bl	8000298 <__aeabi_dsub>
 800808c:	4642      	mov	r2, r8
 800808e:	464b      	mov	r3, r9
 8008090:	f7f8 faba 	bl	8000608 <__aeabi_dmul>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 f8fe 	bl	800029c <__adddf3>
 80080a0:	4604      	mov	r4, r0
 80080a2:	460d      	mov	r5, r1
 80080a4:	ec45 4b10 	vmov	d0, r4, r5
 80080a8:	b003      	add	sp, #12
 80080aa:	ecbd 8b04 	vpop	{d8-d9}
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	4b1b      	ldr	r3, [pc, #108]	; (8008120 <__kernel_sin+0x150>)
 80080b4:	ec51 0b18 	vmov	r0, r1, d8
 80080b8:	2200      	movs	r2, #0
 80080ba:	f7f8 faa5 	bl	8000608 <__aeabi_dmul>
 80080be:	4632      	mov	r2, r6
 80080c0:	ec41 0b19 	vmov	d9, r0, r1
 80080c4:	463b      	mov	r3, r7
 80080c6:	4640      	mov	r0, r8
 80080c8:	4649      	mov	r1, r9
 80080ca:	f7f8 fa9d 	bl	8000608 <__aeabi_dmul>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	ec51 0b19 	vmov	r0, r1, d9
 80080d6:	f7f8 f8df 	bl	8000298 <__aeabi_dsub>
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	f7f8 fa93 	bl	8000608 <__aeabi_dmul>
 80080e2:	ec53 2b18 	vmov	r2, r3, d8
 80080e6:	f7f8 f8d7 	bl	8000298 <__aeabi_dsub>
 80080ea:	a30b      	add	r3, pc, #44	; (adr r3, 8008118 <__kernel_sin+0x148>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 fa86 	bl	8000608 <__aeabi_dmul>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4630      	mov	r0, r6
 8008102:	4639      	mov	r1, r7
 8008104:	f7f8 f8ca 	bl	800029c <__adddf3>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4620      	mov	r0, r4
 800810e:	4629      	mov	r1, r5
 8008110:	f7f8 f8c2 	bl	8000298 <__aeabi_dsub>
 8008114:	e7c4      	b.n	80080a0 <__kernel_sin+0xd0>
 8008116:	bf00      	nop
 8008118:	55555549 	.word	0x55555549
 800811c:	3fc55555 	.word	0x3fc55555
 8008120:	3fe00000 	.word	0x3fe00000
 8008124:	5acfd57c 	.word	0x5acfd57c
 8008128:	3de5d93a 	.word	0x3de5d93a
 800812c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008130:	3e5ae5e6 	.word	0x3e5ae5e6
 8008134:	57b1fe7d 	.word	0x57b1fe7d
 8008138:	3ec71de3 	.word	0x3ec71de3
 800813c:	19c161d5 	.word	0x19c161d5
 8008140:	3f2a01a0 	.word	0x3f2a01a0
 8008144:	1110f8a6 	.word	0x1110f8a6
 8008148:	3f811111 	.word	0x3f811111

0800814c <fabs>:
 800814c:	ec51 0b10 	vmov	r0, r1, d0
 8008150:	ee10 2a10 	vmov	r2, s0
 8008154:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008158:	ec43 2b10 	vmov	d0, r2, r3
 800815c:	4770      	bx	lr
	...

08008160 <floor>:
 8008160:	ec51 0b10 	vmov	r0, r1, d0
 8008164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008168:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800816c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008170:	2e13      	cmp	r6, #19
 8008172:	ee10 5a10 	vmov	r5, s0
 8008176:	ee10 8a10 	vmov	r8, s0
 800817a:	460c      	mov	r4, r1
 800817c:	dc32      	bgt.n	80081e4 <floor+0x84>
 800817e:	2e00      	cmp	r6, #0
 8008180:	da14      	bge.n	80081ac <floor+0x4c>
 8008182:	a333      	add	r3, pc, #204	; (adr r3, 8008250 <floor+0xf0>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 f888 	bl	800029c <__adddf3>
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	f7f8 fcca 	bl	8000b28 <__aeabi_dcmpgt>
 8008194:	b138      	cbz	r0, 80081a6 <floor+0x46>
 8008196:	2c00      	cmp	r4, #0
 8008198:	da57      	bge.n	800824a <floor+0xea>
 800819a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800819e:	431d      	orrs	r5, r3
 80081a0:	d001      	beq.n	80081a6 <floor+0x46>
 80081a2:	4c2d      	ldr	r4, [pc, #180]	; (8008258 <floor+0xf8>)
 80081a4:	2500      	movs	r5, #0
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	e025      	b.n	80081f8 <floor+0x98>
 80081ac:	4f2b      	ldr	r7, [pc, #172]	; (800825c <floor+0xfc>)
 80081ae:	4137      	asrs	r7, r6
 80081b0:	ea01 0307 	and.w	r3, r1, r7
 80081b4:	4303      	orrs	r3, r0
 80081b6:	d01f      	beq.n	80081f8 <floor+0x98>
 80081b8:	a325      	add	r3, pc, #148	; (adr r3, 8008250 <floor+0xf0>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 f86d 	bl	800029c <__adddf3>
 80081c2:	2200      	movs	r2, #0
 80081c4:	2300      	movs	r3, #0
 80081c6:	f7f8 fcaf 	bl	8000b28 <__aeabi_dcmpgt>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d0eb      	beq.n	80081a6 <floor+0x46>
 80081ce:	2c00      	cmp	r4, #0
 80081d0:	bfbe      	ittt	lt
 80081d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80081d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80081da:	19a4      	addlt	r4, r4, r6
 80081dc:	ea24 0407 	bic.w	r4, r4, r7
 80081e0:	2500      	movs	r5, #0
 80081e2:	e7e0      	b.n	80081a6 <floor+0x46>
 80081e4:	2e33      	cmp	r6, #51	; 0x33
 80081e6:	dd0b      	ble.n	8008200 <floor+0xa0>
 80081e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081ec:	d104      	bne.n	80081f8 <floor+0x98>
 80081ee:	ee10 2a10 	vmov	r2, s0
 80081f2:	460b      	mov	r3, r1
 80081f4:	f7f8 f852 	bl	800029c <__adddf3>
 80081f8:	ec41 0b10 	vmov	d0, r0, r1
 80081fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008200:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008208:	fa23 f707 	lsr.w	r7, r3, r7
 800820c:	4207      	tst	r7, r0
 800820e:	d0f3      	beq.n	80081f8 <floor+0x98>
 8008210:	a30f      	add	r3, pc, #60	; (adr r3, 8008250 <floor+0xf0>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 f841 	bl	800029c <__adddf3>
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	f7f8 fc83 	bl	8000b28 <__aeabi_dcmpgt>
 8008222:	2800      	cmp	r0, #0
 8008224:	d0bf      	beq.n	80081a6 <floor+0x46>
 8008226:	2c00      	cmp	r4, #0
 8008228:	da02      	bge.n	8008230 <floor+0xd0>
 800822a:	2e14      	cmp	r6, #20
 800822c:	d103      	bne.n	8008236 <floor+0xd6>
 800822e:	3401      	adds	r4, #1
 8008230:	ea25 0507 	bic.w	r5, r5, r7
 8008234:	e7b7      	b.n	80081a6 <floor+0x46>
 8008236:	2301      	movs	r3, #1
 8008238:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800823c:	fa03 f606 	lsl.w	r6, r3, r6
 8008240:	4435      	add	r5, r6
 8008242:	4545      	cmp	r5, r8
 8008244:	bf38      	it	cc
 8008246:	18e4      	addcc	r4, r4, r3
 8008248:	e7f2      	b.n	8008230 <floor+0xd0>
 800824a:	2500      	movs	r5, #0
 800824c:	462c      	mov	r4, r5
 800824e:	e7aa      	b.n	80081a6 <floor+0x46>
 8008250:	8800759c 	.word	0x8800759c
 8008254:	7e37e43c 	.word	0x7e37e43c
 8008258:	bff00000 	.word	0xbff00000
 800825c:	000fffff 	.word	0x000fffff

08008260 <scalbn>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	ec55 4b10 	vmov	r4, r5, d0
 8008266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800826a:	4606      	mov	r6, r0
 800826c:	462b      	mov	r3, r5
 800826e:	b99a      	cbnz	r2, 8008298 <scalbn+0x38>
 8008270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008274:	4323      	orrs	r3, r4
 8008276:	d036      	beq.n	80082e6 <scalbn+0x86>
 8008278:	4b39      	ldr	r3, [pc, #228]	; (8008360 <scalbn+0x100>)
 800827a:	4629      	mov	r1, r5
 800827c:	ee10 0a10 	vmov	r0, s0
 8008280:	2200      	movs	r2, #0
 8008282:	f7f8 f9c1 	bl	8000608 <__aeabi_dmul>
 8008286:	4b37      	ldr	r3, [pc, #220]	; (8008364 <scalbn+0x104>)
 8008288:	429e      	cmp	r6, r3
 800828a:	4604      	mov	r4, r0
 800828c:	460d      	mov	r5, r1
 800828e:	da10      	bge.n	80082b2 <scalbn+0x52>
 8008290:	a32b      	add	r3, pc, #172	; (adr r3, 8008340 <scalbn+0xe0>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	e03a      	b.n	800830e <scalbn+0xae>
 8008298:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800829c:	428a      	cmp	r2, r1
 800829e:	d10c      	bne.n	80082ba <scalbn+0x5a>
 80082a0:	ee10 2a10 	vmov	r2, s0
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f7 fff8 	bl	800029c <__adddf3>
 80082ac:	4604      	mov	r4, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	e019      	b.n	80082e6 <scalbn+0x86>
 80082b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082b6:	460b      	mov	r3, r1
 80082b8:	3a36      	subs	r2, #54	; 0x36
 80082ba:	4432      	add	r2, r6
 80082bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80082c0:	428a      	cmp	r2, r1
 80082c2:	dd08      	ble.n	80082d6 <scalbn+0x76>
 80082c4:	2d00      	cmp	r5, #0
 80082c6:	a120      	add	r1, pc, #128	; (adr r1, 8008348 <scalbn+0xe8>)
 80082c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082cc:	da1c      	bge.n	8008308 <scalbn+0xa8>
 80082ce:	a120      	add	r1, pc, #128	; (adr r1, 8008350 <scalbn+0xf0>)
 80082d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d4:	e018      	b.n	8008308 <scalbn+0xa8>
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	dd08      	ble.n	80082ec <scalbn+0x8c>
 80082da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082e6:	ec45 4b10 	vmov	d0, r4, r5
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082f0:	da19      	bge.n	8008326 <scalbn+0xc6>
 80082f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082f6:	429e      	cmp	r6, r3
 80082f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80082fc:	dd0a      	ble.n	8008314 <scalbn+0xb4>
 80082fe:	a112      	add	r1, pc, #72	; (adr r1, 8008348 <scalbn+0xe8>)
 8008300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e2      	bne.n	80082ce <scalbn+0x6e>
 8008308:	a30f      	add	r3, pc, #60	; (adr r3, 8008348 <scalbn+0xe8>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f8 f97b 	bl	8000608 <__aeabi_dmul>
 8008312:	e7cb      	b.n	80082ac <scalbn+0x4c>
 8008314:	a10a      	add	r1, pc, #40	; (adr r1, 8008340 <scalbn+0xe0>)
 8008316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0b8      	beq.n	8008290 <scalbn+0x30>
 800831e:	a10e      	add	r1, pc, #56	; (adr r1, 8008358 <scalbn+0xf8>)
 8008320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008324:	e7b4      	b.n	8008290 <scalbn+0x30>
 8008326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800832a:	3236      	adds	r2, #54	; 0x36
 800832c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008330:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008334:	4620      	mov	r0, r4
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <scalbn+0x108>)
 8008338:	2200      	movs	r2, #0
 800833a:	e7e8      	b.n	800830e <scalbn+0xae>
 800833c:	f3af 8000 	nop.w
 8008340:	c2f8f359 	.word	0xc2f8f359
 8008344:	01a56e1f 	.word	0x01a56e1f
 8008348:	8800759c 	.word	0x8800759c
 800834c:	7e37e43c 	.word	0x7e37e43c
 8008350:	8800759c 	.word	0x8800759c
 8008354:	fe37e43c 	.word	0xfe37e43c
 8008358:	c2f8f359 	.word	0xc2f8f359
 800835c:	81a56e1f 	.word	0x81a56e1f
 8008360:	43500000 	.word	0x43500000
 8008364:	ffff3cb0 	.word	0xffff3cb0
 8008368:	3c900000 	.word	0x3c900000

0800836c <_init>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	bf00      	nop
 8008370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008372:	bc08      	pop	{r3}
 8008374:	469e      	mov	lr, r3
 8008376:	4770      	bx	lr

08008378 <_fini>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	bf00      	nop
 800837c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837e:	bc08      	pop	{r3}
 8008380:	469e      	mov	lr, r3
 8008382:	4770      	bx	lr
