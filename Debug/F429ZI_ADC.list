
F429ZI_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e94  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007048  08007048  00017048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007240  08007240  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007248  08007248  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001904  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001910  20001910  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ccd  00000000  00000000  000380f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  0003adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  0003c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026231  00000000  00000000  0003d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bc8  00000000  00000000  00063709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0890  00000000  00000000  0007a2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ab61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005abc  00000000  00000000  0016abb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800702c 	.word	0x0800702c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	0800702c 	.word	0x0800702c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b40:	f000 b974 	b.w	8000e2c <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468e      	mov	lr, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14d      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4694      	mov	ip, r2
 8000b6e:	d969      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b152      	cbz	r2, 8000b8c <__udivmoddi4+0x30>
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	f1c2 0120 	rsb	r1, r2, #32
 8000b7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b86:	ea41 0e03 	orr.w	lr, r1, r3
 8000b8a:	4094      	lsls	r4, r2
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	0c21      	lsrs	r1, r4, #16
 8000b92:	fbbe f6f8 	udiv	r6, lr, r8
 8000b96:	fa1f f78c 	uxth.w	r7, ip
 8000b9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ba2:	fb06 f107 	mul.w	r1, r6, r7
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bb2:	f080 811f 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 811c 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 f707 	mul.w	r7, r0, r7
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x92>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000be0:	f080 810a 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	f240 8107 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bea:	4464      	add	r4, ip
 8000bec:	3802      	subs	r0, #2
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	1be4      	subs	r4, r4, r7
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	b11d      	cbz	r5, 8000c00 <__udivmoddi4+0xa4>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	f000 80ef 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c10:	2600      	movs	r6, #0
 8000c12:	e9c5 0100 	strd	r0, r1, [r5]
 8000c16:	4630      	mov	r0, r6
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f683 	clz	r6, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80f9 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb61 0303 	sbc.w	r3, r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	469e      	mov	lr, r3
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d0e0      	beq.n	8000c00 <__udivmoddi4+0xa4>
 8000c3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8092 	bne.w	8000d76 <__udivmoddi4+0x21a>
 8000c52:	eba1 010c 	sub.w	r1, r1, ip
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f fe8c 	uxth.w	lr, ip
 8000c5e:	2601      	movs	r6, #1
 8000c60:	0c20      	lsrs	r0, r4, #16
 8000c62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c66:	fb07 1113 	mls	r1, r7, r3, r1
 8000c6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	4288      	cmp	r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	4288      	cmp	r0, r1
 8000c82:	f200 80cb 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a09      	subs	r1, r1, r0
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c90:	fb07 1110 	mls	r1, r7, r0, r1
 8000c94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c98:	fb0e fe00 	mul.w	lr, lr, r0
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80bb 	bhi.w	8000e26 <__udivmoddi4+0x2ca>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x9a>
 8000cbc:	f1c6 0720 	rsb	r7, r6, #32
 8000cc0:	40b3      	lsls	r3, r6
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa20 f407 	lsr.w	r4, r0, r7
 8000cce:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd2:	431c      	orrs	r4, r3
 8000cd4:	40f9      	lsrs	r1, r7
 8000cd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cda:	fa00 f306 	lsl.w	r3, r0, r6
 8000cde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ce2:	0c20      	lsrs	r0, r4, #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	458e      	cmp	lr, r1
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	458e      	cmp	lr, r1
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9402 	umull	r9, r4, r0, r2
 8000d46:	eba1 010e 	sub.w	r1, r1, lr
 8000d4a:	42a1      	cmp	r1, r4
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46a6      	mov	lr, r4
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x212>
 8000d56:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d62:	fa22 f306 	lsr.w	r3, r2, r6
 8000d66:	40f1      	lsrs	r1, r6
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d8      	lsrs	r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa21 f303 	lsr.w	r3, r1, r3
 8000d84:	4091      	lsls	r1, r2
 8000d86:	4301      	orrs	r1, r0
 8000d88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8c:	fa1f fe8c 	uxth.w	lr, ip
 8000d90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d94:	fb07 3610 	mls	r6, r7, r0, r3
 8000d98:	0c0b      	lsrs	r3, r1, #16
 8000d9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000da2:	429e      	cmp	r6, r3
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	b289      	uxth	r1, r1
 8000dc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3e02      	subs	r6, #2
 8000de4:	4461      	add	r1, ip
 8000de6:	1ac9      	subs	r1, r1, r3
 8000de8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e705      	b.n	8000c00 <__udivmoddi4+0xa4>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e3      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f8      	b.n	8000bee <__udivmoddi4+0x92>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4646      	mov	r6, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4620      	mov	r0, r4
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4640      	mov	r0, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	3b02      	subs	r3, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	e732      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e709      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e742      	b.n	8000cb2 <__udivmoddi4+0x156>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <get_sineval>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_sineval(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_SAMPLES; i++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e038      	b.n	8000eae <get_sineval+0x7e>
		sine_val[i] = (sin(2 * PI * i / MAX_SAMPLES) + 1) * (RES_12BIT / 2);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fb29 	bl	8000494 <__aeabi_i2d>
 8000e42:	a323      	add	r3, pc, #140	; (adr r3, 8000ed0 <get_sineval+0xa0>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff fb8e 	bl	8000568 <__aeabi_dmul>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <get_sineval+0x90>)
 8000e5a:	f7ff fcaf 	bl	80007bc <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	ec43 2b17 	vmov	d7, r2, r3
 8000e66:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6a:	eef0 0a67 	vmov.f32	s1, s15
 8000e6e:	f005 f893 	bl	8005f98 <sin>
 8000e72:	ec51 0b10 	vmov	r0, r1, d0
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <get_sineval+0x94>)
 8000e7c:	f7ff f9be 	bl	80001fc <__adddf3>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <get_sineval+0x98>)
 8000e8e:	f7ff fb6b 	bl	8000568 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fe27 	bl	8000aec <__aeabi_d2uiz>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	490a      	ldr	r1, [pc, #40]	; (8000ecc <get_sineval+0x9c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_SAMPLES; i++){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eb4:	dbc2      	blt.n	8000e3c <get_sineval+0xc>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	408f4000 	.word	0x408f4000
 8000ec4:	3ff00000 	.word	0x3ff00000
 8000ec8:	40a00000 	.word	0x40a00000
 8000ecc:	20000964 	.word	0x20000964
 8000ed0:	f01b866e 	.word	0xf01b866e
 8000ed4:	401921f9 	.word	0x401921f9

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fe65 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f825 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fa2f 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eea:	f000 f9ef 	bl	80012cc <MX_DMA_Init>
  MX_ETH_Init();
 8000eee:	f000 f913 	bl	8001118 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 f993 	bl	800121c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef6:	f000 f9bb 	bl	8001270 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000efa:	f000 f883 	bl	8001004 <MX_ADC1_Init>
  MX_DAC_Init();
 8000efe:	f000 f8e1 	bl	80010c4 <MX_DAC_Init>
  MX_TIM7_Init();
 8000f02:	f000 f957 	bl	80011b4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  get_sineval();
 8000f06:	f7ff ff93 	bl	8000e30 <get_sineval>
  HAL_TIM_Base_Start(&htim7);
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <main+0x4c>)
 8000f0c:	f003 fc7c 	bl	8004808 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_val, MAX_SAMPLES, DAC_ALIGN_12B_R);
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <main+0x50>)
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <main+0x54>)
 8000f1e:	f001 fbb9 	bl	8002694 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0x4a>
 8000f24:	2000036c 	.word	0x2000036c
 8000f28:	20000964 	.word	0x20000964
 8000f2c:	20000248 	.word	0x20000248

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 f820 	bl	8005f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <SystemClock_Config+0xd0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <SystemClock_Config+0xd0>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <SystemClock_Config+0xd0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa4:	23a8      	movs	r3, #168	; 0xa8
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fac:	2307      	movs	r3, #7
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 ff3f 	bl	8003e38 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f000 fa70 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 f9a0 	bl	8004328 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fee:	f000 fa59 	bl	80014a4 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	; 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001018:	4a28      	ldr	r2, [pc, #160]	; (80010bc <MX_ADC1_Init+0xb8>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_ADC1_Init+0xb4>)
 800101e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001022:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <MX_ADC1_Init+0xb4>)
 800102c:	2201      	movs	r2, #1
 800102e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001032:	2200      	movs	r2, #0
 8001034:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001040:	2200      	movs	r2, #0
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <MX_ADC1_Init+0xbc>)
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_ADC1_Init+0xb4>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001052:	2202      	movs	r2, #2
 8001054:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001060:	2201      	movs	r2, #1
 8001062:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001064:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001066:	f000 fe37 	bl	8001cd8 <HAL_ADC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001070:	f000 fa18 	bl	80014a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001074:	2303      	movs	r3, #3
 8001076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001078:	2301      	movs	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800107c:	2307      	movs	r3, #7
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_ADC1_Init+0xb4>)
 8001086:	f000 ff99 	bl	8001fbc <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001090:	f000 fa08 	bl	80014a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001094:	2304      	movs	r3, #4
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001098:	2302      	movs	r3, #2
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC1_Init+0xb4>)
 80010a2:	f000 ff8b 	bl	8001fbc <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010ac:	f000 f9fa 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001a0 	.word	0x200001a0
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_DAC_Init+0x4c>)
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <MX_DAC_Init+0x50>)
 80010d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_DAC_Init+0x4c>)
 80010da:	f001 fab8 	bl	800264e <HAL_DAC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010e4:	f000 f9de 	bl	80014a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80010e8:	2314      	movs	r3, #20
 80010ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	2210      	movs	r2, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_DAC_Init+0x4c>)
 80010f8:	f001 fbb8 	bl	800286c <HAL_DAC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001102:	f000 f9cf 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000248 	.word	0x20000248
 8001114:	40007400 	.word	0x40007400

08001118 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ETH_Init+0x84>)
 800111e:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <MX_ETH_Init+0x88>)
 8001120:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_ETH_Init+0x8c>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_ETH_Init+0x8c>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_ETH_Init+0x8c>)
 8001130:	22e1      	movs	r2, #225	; 0xe1
 8001132:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_ETH_Init+0x8c>)
 8001136:	2200      	movs	r2, #0
 8001138:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_ETH_Init+0x8c>)
 800113c:	2200      	movs	r2, #0
 800113e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_ETH_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_ETH_Init+0x84>)
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <MX_ETH_Init+0x8c>)
 800114a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_ETH_Init+0x84>)
 800114e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001152:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_ETH_Init+0x84>)
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <MX_ETH_Init+0x90>)
 8001158:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_ETH_Init+0x84>)
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <MX_ETH_Init+0x94>)
 800115e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_ETH_Init+0x84>)
 8001162:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001166:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_ETH_Init+0x84>)
 800116a:	f002 f85b 	bl	8003224 <HAL_ETH_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001174:	f000 f996 	bl	80014a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001178:	2238      	movs	r2, #56	; 0x38
 800117a:	2100      	movs	r1, #0
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_ETH_Init+0x98>)
 800117e:	f004 ff01 	bl	8005f84 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_ETH_Init+0x98>)
 8001184:	2221      	movs	r2, #33	; 0x21
 8001186:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_ETH_Init+0x98>)
 800118a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800118e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_ETH_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200002bc 	.word	0x200002bc
 80011a0:	40028000 	.word	0x40028000
 80011a4:	20001904 	.word	0x20001904
 80011a8:	20000100 	.word	0x20000100
 80011ac:	20000060 	.word	0x20000060
 80011b0:	20000028 	.word	0x20000028

080011b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_TIM7_Init+0x60>)
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <MX_TIM7_Init+0x64>)
 80011c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_TIM7_Init+0x60>)
 80011ca:	2253      	movs	r2, #83	; 0x53
 80011cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_TIM7_Init+0x60>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_TIM7_Init+0x60>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_TIM7_Init+0x60>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <MX_TIM7_Init+0x60>)
 80011e2:	f003 fac1 	bl	8004768 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80011ec:	f000 f95a 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011f0:	2320      	movs	r3, #32
 80011f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_TIM7_Init+0x60>)
 80011fe:	f003 fc0b 	bl	8004a18 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001208:	f000 f94c 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000036c 	.word	0x2000036c
 8001218:	40001400 	.word	0x40001400

0800121c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART3_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART3_UART_Init+0x4c>)
 8001254:	f003 fc5c 	bl	8004b10 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f921 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200003b4 	.word	0x200003b4
 800126c:	40004800 	.word	0x40004800

08001270 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800127a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127e:	2204      	movs	r2, #4
 8001280:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001284:	2202      	movs	r2, #2
 8001286:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001290:	2202      	movs	r2, #2
 8001292:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001296:	2201      	movs	r2, #1
 8001298:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b4:	f002 fca3 	bl	8003bfe <HAL_PCD_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 f8f1 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000458 	.word	0x20000458

080012cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_DMA_Init+0x78>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <MX_DMA_Init+0x78>)
 80012dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_DMA_Init+0x78>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_DMA_Init+0x78>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_DMA_Init+0x78>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_DMA_Init+0x78>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	200e      	movs	r0, #14
 8001310:	f001 f967 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001314:	200e      	movs	r0, #14
 8001316:	f001 f980 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2011      	movs	r0, #17
 8001320:	f001 f95f 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001324:	2011      	movs	r0, #17
 8001326:	f001 f978 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2038      	movs	r0, #56	; 0x38
 8001330:	f001 f957 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001334:	2038      	movs	r0, #56	; 0x38
 8001336:	f001 f970 	bl	800261a <HAL_NVIC_EnableIRQ>

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <MX_GPIO_Init+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <MX_GPIO_Init+0x14c>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <MX_GPIO_Init+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <MX_GPIO_Init+0x14c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a44      	ldr	r2, [pc, #272]	; (8001494 <MX_GPIO_Init+0x14c>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b42      	ldr	r3, [pc, #264]	; (8001494 <MX_GPIO_Init+0x14c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <MX_GPIO_Init+0x14c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a3d      	ldr	r2, [pc, #244]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a36      	ldr	r2, [pc, #216]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a28      	ldr	r2, [pc, #160]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <MX_GPIO_Init+0x14c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f244 0181 	movw	r1, #16513	; 0x4081
 800140c:	4822      	ldr	r0, [pc, #136]	; (8001498 <MX_GPIO_Init+0x150>)
 800140e:	f002 fbdd 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	4821      	ldr	r0, [pc, #132]	; (800149c <MX_GPIO_Init+0x154>)
 8001418:	f002 fbd8 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <MX_GPIO_Init+0x158>)
 8001434:	f002 fa1e 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001438:	f244 0381 	movw	r3, #16513	; 0x4081
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <MX_GPIO_Init+0x150>)
 8001452:	f002 fa0f 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001456:	2340      	movs	r3, #64	; 0x40
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <MX_GPIO_Init+0x154>)
 800146e:	f002 fa01 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_GPIO_Init+0x154>)
 8001486:	f002 f9f5 	bl	8003874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40020800 	.word	0x40020800

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_MspInit+0x4c>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x4c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a33      	ldr	r2, [pc, #204]	; (80015ec <HAL_ADC_MspInit+0xec>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d15f      	bne.n	80015e2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <HAL_ADC_MspInit+0xf0>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800155a:	2318      	movs	r3, #24
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155e:	2303      	movs	r3, #3
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4821      	ldr	r0, [pc, #132]	; (80015f4 <HAL_ADC_MspInit+0xf4>)
 800156e:	f002 f981 	bl	8003874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_ADC_MspInit+0xfc>)
 8001576:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 800158c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001590:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001598:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 800159c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015b6:	4810      	ldr	r0, [pc, #64]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015b8:	f001 fa32 	bl	8002a20 <HAL_DMA_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015c2:	f7ff ff6f 	bl	80014a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2101      	movs	r1, #1
 80015d6:	2012      	movs	r0, #18
 80015d8:	f001 f803 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015dc:	2012      	movs	r0, #18
 80015de:	f001 f81c 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	200001e8 	.word	0x200001e8
 80015fc:	40026410 	.word	0x40026410

08001600 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <HAL_DAC_MspInit+0xdc>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d158      	bne.n	80016d4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <HAL_DAC_MspInit+0xe0>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a2d      	ldr	r2, [pc, #180]	; (80016e0 <HAL_DAC_MspInit+0xe0>)
 800162c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_DAC_MspInit+0xe0>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_DAC_MspInit+0xe0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_DAC_MspInit+0xe0>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_DAC_MspInit+0xe0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800165a:	2320      	movs	r3, #32
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165e:	2303      	movs	r3, #3
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	481d      	ldr	r0, [pc, #116]	; (80016e4 <HAL_DAC_MspInit+0xe4>)
 800166e:	f002 f901 	bl	8003874 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_DAC_MspInit+0xec>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 800167a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800167e:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 800168e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001692:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 8001696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169a:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 800169e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 80016a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016aa:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 80016ba:	f001 f9b1 	bl	8002a20 <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80016c4:	f7ff feee 	bl	80014a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_DAC_MspInit+0xe8>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40007400 	.word	0x40007400
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	2000025c 	.word	0x2000025c
 80016ec:	400260a0 	.word	0x400260a0

080016f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a55      	ldr	r2, [pc, #340]	; (8001864 <HAL_ETH_MspInit+0x174>)
 800170e:	4293      	cmp	r3, r2
 8001710:	f040 80a4 	bne.w	800185c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800171e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_ETH_MspInit+0x178>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <HAL_ETH_MspInit+0x178>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800173a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_ETH_MspInit+0x178>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HAL_ETH_MspInit+0x178>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	4a44      	ldr	r2, [pc, #272]	; (8001868 <HAL_ETH_MspInit+0x178>)
 8001756:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800175a:	6313      	str	r3, [r2, #48]	; 0x30
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	4a3d      	ldr	r2, [pc, #244]	; (8001868 <HAL_ETH_MspInit+0x178>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6313      	str	r3, [r2, #48]	; 0x30
 8001778:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a36      	ldr	r2, [pc, #216]	; (8001868 <HAL_ETH_MspInit+0x178>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6313      	str	r3, [r2, #48]	; 0x30
 8001794:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_ETH_MspInit+0x178>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_ETH_MspInit+0x178>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a2f      	ldr	r2, [pc, #188]	; (8001868 <HAL_ETH_MspInit+0x178>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_ETH_MspInit+0x178>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_ETH_MspInit+0x178>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_ETH_MspInit+0x178>)
 80017c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_ETH_MspInit+0x178>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017d8:	2332      	movs	r3, #50	; 0x32
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017e8:	230b      	movs	r3, #11
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	481e      	ldr	r0, [pc, #120]	; (800186c <HAL_ETH_MspInit+0x17c>)
 80017f4:	f002 f83e 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017f8:	2386      	movs	r3, #134	; 0x86
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001808:	230b      	movs	r3, #11
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4817      	ldr	r0, [pc, #92]	; (8001870 <HAL_ETH_MspInit+0x180>)
 8001814:	f002 f82e 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182a:	230b      	movs	r3, #11
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	480f      	ldr	r0, [pc, #60]	; (8001874 <HAL_ETH_MspInit+0x184>)
 8001836:	f002 f81d 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800183a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800184c:	230b      	movs	r3, #11
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <HAL_ETH_MspInit+0x188>)
 8001858:	f002 f80c 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	3738      	adds	r7, #56	; 0x38
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40028000 	.word	0x40028000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020800 	.word	0x40020800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40021800 	.word	0x40021800

0800187c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_TIM_Base_MspInit+0x3c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10d      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 8001898:	f043 0320 	orr.w	r3, r3, #32
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_TIM_Base_MspInit+0x40>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40001400 	.word	0x40001400
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a35      	ldr	r2, [pc, #212]	; (80019b4 <HAL_UART_MspInit+0xf4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d163      	bne.n	80019aa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <HAL_UART_MspInit+0xf8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <HAL_UART_MspInit+0xf8>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_UART_MspInit+0xf8>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_UART_MspInit+0xf8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <HAL_UART_MspInit+0xf8>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_UART_MspInit+0xf8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800191a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800192c:	2307      	movs	r3, #7
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4821      	ldr	r0, [pc, #132]	; (80019bc <HAL_UART_MspInit+0xfc>)
 8001938:	f001 ff9c 	bl	8003874 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_UART_MspInit+0x100>)
 800193e:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_UART_MspInit+0x104>)
 8001940:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001944:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001948:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_UART_MspInit+0x100>)
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_UART_MspInit+0x100>)
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_UART_MspInit+0x100>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001980:	f001 f84e 	bl	8002a20 <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800198a:	f7ff fd8b 	bl	80014a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_UART_MspInit+0x100>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2027      	movs	r0, #39	; 0x27
 80019a0:	f000 fe1f 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019a4:	2027      	movs	r0, #39	; 0x27
 80019a6:	f000 fe38 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40004800 	.word	0x40004800
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	200003f8 	.word	0x200003f8
 80019c4:	40026058 	.word	0x40026058

080019c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e8:	d13f      	bne.n	8001a6a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4815      	ldr	r0, [pc, #84]	; (8001a78 <HAL_PCD_MspInit+0xb0>)
 8001a24:	f001 ff26 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480e      	ldr	r0, [pc, #56]	; (8001a78 <HAL_PCD_MspInit+0xb0>)
 8001a3e:	f001 ff19 	bl	8003874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	6353      	str	r3, [r2, #52]	; 0x34
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_PCD_MspInit+0xac>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 f8c2 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <DMA1_Stream3_IRQHandler+0x10>)
 8001ad6:	f001 f93b 	bl	8002d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003f8 	.word	0x200003f8

08001ae4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <DMA1_Stream6_IRQHandler+0x10>)
 8001aea:	f001 f931 	bl	8002d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000025c 	.word	0x2000025c

08001af8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <ADC_IRQHandler+0x10>)
 8001afe:	f000 f92e 	bl	8001d5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001a0 	.word	0x200001a0

08001b0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <USART3_IRQHandler+0x10>)
 8001b12:	f003 f84b 	bl	8004bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003b4 	.word	0x200003b4

08001b20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <DMA2_Stream0_IRQHandler+0x10>)
 8001b26:	f001 f913 	bl	8002d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200001e8 	.word	0x200001e8

08001b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b82:	f7ff ffd7 	bl	8001b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f004 f9d9 	bl	8005f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff f9a5 	bl	8000ed8 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b9c:	08007250 	.word	0x08007250
  ldr r2, =_sbss
 8001ba0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ba4:	20001910 	.word	0x20001910

08001ba8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <CAN1_RX0_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 fcf9 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fc66 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fd11 	bl	8002636 <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c2c:	f000 fcd9 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	2000190c 	.word	0x2000190c

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2000190c 	.word	0x2000190c

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e033      	b.n	8001d56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fc02 	bl	8001500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d1e:	f023 0302 	bic.w	r3, r3, #2
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fa78 	bl	8002220 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
 8001d46:	e001      	b.n	8001d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d049      	beq.n	8001e28 <HAL_ADC_IRQHandler+0xca>
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d046      	beq.n	8001e28 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d105      	bne.n	8001db2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d12b      	bne.n	8001e18 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d127      	bne.n	8001e18 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d119      	bne.n	8001e18 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0220 	bic.w	r2, r2, #32
 8001df2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8b0 	bl	8001f7e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0212 	mvn.w	r2, #18
 8001e26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d057      	beq.n	8001eee <HAL_ADC_IRQHandler+0x190>
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d054      	beq.n	8001eee <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d139      	bne.n	8001ede <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d12b      	bne.n	8001ede <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d124      	bne.n	8001ede <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d11d      	bne.n	8001ede <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d119      	bne.n	8001ede <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fa9a 	bl	8002418 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 020c 	mvn.w	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d017      	beq.n	8001f34 <HAL_ADC_IRQHandler+0x1d6>
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d014      	beq.n	8001f34 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d10d      	bne.n	8001f34 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f834 	bl	8001f92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 0201 	mvn.w	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f42:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x218>
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d012      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f043 0202 	orr.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0220 	mvn.w	r2, #32
 8001f64:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f81d 	bl	8001fa6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0220 	mvn.w	r2, #32
 8001f74:	601a      	str	r2, [r3, #0]
  }
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1c>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e113      	b.n	8002200 <HAL_ADC_ConfigChannel+0x244>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d925      	bls.n	8002034 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68d9      	ldr	r1, [r3, #12]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b1e      	subs	r3, #30
 8001ffe:	2207      	movs	r2, #7
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43da      	mvns	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	400a      	ands	r2, r1
 800200c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68d9      	ldr	r1, [r3, #12]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	4603      	mov	r3, r0
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4403      	add	r3, r0
 8002026:	3b1e      	subs	r3, #30
 8002028:	409a      	lsls	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	e022      	b.n	800207a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6919      	ldr	r1, [r3, #16]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	2207      	movs	r2, #7
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	400a      	ands	r2, r1
 8002056:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4618      	mov	r0, r3
 800206a:	4603      	mov	r3, r0
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4403      	add	r3, r0
 8002070:	409a      	lsls	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b06      	cmp	r3, #6
 8002080:	d824      	bhi.n	80020cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b05      	subs	r3, #5
 8002094:	221f      	movs	r2, #31
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	400a      	ands	r2, r1
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3b05      	subs	r3, #5
 80020be:	fa00 f203 	lsl.w	r2, r0, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	e04c      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d824      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b23      	subs	r3, #35	; 0x23
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b23      	subs	r3, #35	; 0x23
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
 800211c:	e023      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b41      	subs	r3, #65	; 0x41
 8002130:	221f      	movs	r2, #31
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	400a      	ands	r2, r1
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3b41      	subs	r3, #65	; 0x41
 800215a:	fa00 f203 	lsl.w	r2, r0, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_ADC_ConfigChannel+0x250>)
 8002168:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a28      	ldr	r2, [pc, #160]	; (8002210 <HAL_ADC_ConfigChannel+0x254>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10f      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1d8>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d10b      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_ADC_ConfigChannel+0x254>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12b      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x23a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_ADC_ConfigChannel+0x258>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x1f4>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b11      	cmp	r3, #17
 80021ae:	d122      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a11      	ldr	r2, [pc, #68]	; (8002214 <HAL_ADC_ConfigChannel+0x258>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d111      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_ADC_ConfigChannel+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_ADC_ConfigChannel+0x260>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9a      	lsrs	r2, r3, #18
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40012300 	.word	0x40012300
 8002210:	40012000 	.word	0x40012000
 8002214:	10000012 	.word	0x10000012
 8002218:	20000000 	.word	0x20000000
 800221c:	431bde83 	.word	0x431bde83

08002220 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002228:	4b79      	ldr	r3, [pc, #484]	; (8002410 <ADC_Init+0x1f0>)
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	4a58      	ldr	r2, [pc, #352]	; (8002414 <ADC_Init+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e00f      	b.n	800231e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800230c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800231c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0202 	bic.w	r2, r2, #2
 800232c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e1b      	ldrb	r3, [r3, #24]
 8002338:	005a      	lsls	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01b      	beq.n	8002384 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800236a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	3b01      	subs	r3, #1
 8002378:	035a      	lsls	r2, r3, #13
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	e007      	b.n	8002394 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002392:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	051a      	lsls	r2, r3, #20
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d6:	025a      	lsls	r2, r3, #9
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	029a      	lsls	r2, r3, #10
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40012300 	.word	0x40012300
 8002414:	0f000001 	.word	0x0f000001

08002418 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e014      	b.n	800268a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe ffc5 	bl	8001600 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	795b      	ldrb	r3, [r3, #5]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_DAC_Start_DMA+0x22>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e0ab      	b.n	800280e <HAL_DAC_Start_DMA+0x17a>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2202      	movs	r2, #2
 80026c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d12f      	bne.n	8002728 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_DAC_Start_DMA+0x184>)
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a51      	ldr	r2, [pc, #324]	; (800281c <HAL_DAC_Start_DMA+0x188>)
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_DAC_Start_DMA+0x18c>)
 80026de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d013      	beq.n	800271e <HAL_DAC_Start_DMA+0x8a>
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d845      	bhi.n	8002788 <HAL_DAC_Start_DMA+0xf4>
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_DAC_Start_DMA+0x76>
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b04      	cmp	r3, #4
 8002706:	d005      	beq.n	8002714 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002708:	e03e      	b.n	8002788 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3308      	adds	r3, #8
 8002710:	613b      	str	r3, [r7, #16]
        break;
 8002712:	e03c      	b.n	800278e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	613b      	str	r3, [r7, #16]
        break;
 800271c:	e037      	b.n	800278e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3310      	adds	r3, #16
 8002724:	613b      	str	r3, [r7, #16]
        break;
 8002726:	e032      	b.n	800278e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a3d      	ldr	r2, [pc, #244]	; (8002824 <HAL_DAC_Start_DMA+0x190>)
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <HAL_DAC_Start_DMA+0x194>)
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a3b      	ldr	r2, [pc, #236]	; (800282c <HAL_DAC_Start_DMA+0x198>)
 800273e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800274e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	2b08      	cmp	r3, #8
 8002754:	d013      	beq.n	800277e <HAL_DAC_Start_DMA+0xea>
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d817      	bhi.n	800278c <HAL_DAC_Start_DMA+0xf8>
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_DAC_Start_DMA+0xd6>
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d005      	beq.n	8002774 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002768:	e010      	b.n	800278c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	613b      	str	r3, [r7, #16]
        break;
 8002772:	e00c      	b.n	800278e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3318      	adds	r3, #24
 800277a:	613b      	str	r3, [r7, #16]
        break;
 800277c:	e007      	b.n	800278e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	331c      	adds	r3, #28
 8002784:	613b      	str	r3, [r7, #16]
        break;
 8002786:	e002      	b.n	800278e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002788:	bf00      	nop
 800278a:	e000      	b.n	800278e <HAL_DAC_Start_DMA+0xfa>
        break;
 800278c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6898      	ldr	r0, [r3, #8]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	f000 f9e5 	bl	8002b7c <HAL_DMA_Start_IT>
 80027b2:	4603      	mov	r3, r0
 80027b4:	75fb      	strb	r3, [r7, #23]
 80027b6:	e010      	b.n	80027da <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68d8      	ldr	r0, [r3, #12]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	f000 f9d3 	bl	8002b7c <HAL_DMA_Start_IT>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2201      	movs	r2, #1
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e005      	b.n	800280c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f043 0204 	orr.w	r2, r3, #4
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	0800290b 	.word	0x0800290b
 800281c:	0800292d 	.word	0x0800292d
 8002820:	08002949 	.word	0x08002949
 8002824:	080029b3 	.word	0x080029b3
 8002828:	080029d5 	.word	0x080029d5
 800282c:	080029f1 	.word	0x080029f1

08002830 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	795b      	ldrb	r3, [r3, #5]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_DAC_ConfigChannel+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e03c      	b.n	80028fe <HAL_DAC_ConfigChannel+0x92>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2202      	movs	r2, #2
 800288e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4013      	ands	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	22c0      	movs	r2, #192	; 0xc0
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff ff89 	bl	8002830 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	711a      	strb	r2, [r3, #4]
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff ff82 	bl	8002844 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f043 0204 	orr.w	r2, r3, #4
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ff78 	bl	8002858 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	711a      	strb	r2, [r3, #4]
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ffd8 	bl	8002976 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	711a      	strb	r2, [r3, #4]
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff ffd1 	bl	800298a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff ffc7 	bl	800299e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	711a      	strb	r2, [r3, #4]
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff f924 	bl	8001c78 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e099      	b.n	8002b70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5c:	e00f      	b.n	8002a7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5e:	f7ff f90b 	bl	8001c78 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d908      	bls.n	8002a7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2203      	movs	r2, #3
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e078      	b.n	8002b70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e8      	bne.n	8002a5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_DMA_Init+0x158>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d107      	bne.n	8002ae8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d117      	bne.n	8002b42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fb01 	bl	800312c <DMA_CheckFifoParam>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e016      	b.n	8002b70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fab8 	bl	80030c0 <DMA_CalcBaseAndBitshift>
 8002b50:	4603      	mov	r3, r0
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	223f      	movs	r2, #63	; 0x3f
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	f010803f 	.word	0xf010803f

08002b7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DMA_Start_IT+0x26>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e040      	b.n	8002c24 <HAL_DMA_Start_IT+0xa8>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d12f      	bne.n	8002c16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa4a 	bl	8003064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	223f      	movs	r2, #63	; 0x3f
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0216 	orr.w	r2, r2, #22
 8002bea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e005      	b.n	8002c22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c3a:	f7ff f81d 	bl	8001c78 <HAL_GetTick>
 8002c3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e052      	b.n	8002d04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0216 	bic.w	r2, r2, #22
 8002c6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <HAL_DMA_Abort+0x62>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0208 	bic.w	r2, r2, #8
 8002c9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cae:	e013      	b.n	8002cd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cb0:	f7fe ffe2 	bl	8001c78 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d90c      	bls.n	8002cd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e015      	b.n	8002d04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e4      	bne.n	8002cb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	223f      	movs	r2, #63	; 0x3f
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d004      	beq.n	8002d2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00c      	b.n	8002d44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d5c:	4b8e      	ldr	r3, [pc, #568]	; (8002f98 <HAL_DMA_IRQHandler+0x248>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a8e      	ldr	r2, [pc, #568]	; (8002f9c <HAL_DMA_IRQHandler+0x24c>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01a      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	2208      	movs	r2, #8
 8002daa:	409a      	lsls	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	2201      	movs	r2, #1
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2204      	movs	r2, #4
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	2204      	movs	r2, #4
 8002e16:	409a      	lsls	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d043      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d03c      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d018      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d108      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d024      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
 8002e7e:	e01f      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01b      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
 8002e90:	e016      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0208 	bic.w	r2, r2, #8
 8002eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 808f 	beq.w	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8087 	beq.w	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d136      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0216 	bic.w	r2, r2, #22
 8002f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x1da>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0208 	bic.w	r2, r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	223f      	movs	r2, #63	; 0x3f
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d07e      	beq.n	800305c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
        }
        return;
 8002f66:	e079      	b.n	800305c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01d      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d031      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
 8002f94:	e02c      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
 8002f96:	bf00      	nop
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d023      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
 8002fb0:	e01e      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0210 	bic.w	r2, r2, #16
 8002fce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d032      	beq.n	800305e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d022      	beq.n	800304a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2205      	movs	r2, #5
 8003008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3301      	adds	r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	d307      	bcc.n	8003038 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f2      	bne.n	800301c <HAL_DMA_IRQHandler+0x2cc>
 8003036:	e000      	b.n	800303a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003038:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
 800305a:	e000      	b.n	800305e <HAL_DMA_IRQHandler+0x30e>
        return;
 800305c:	bf00      	nop
    }
  }
}
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d108      	bne.n	80030a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030a2:	e007      	b.n	80030b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3b10      	subs	r3, #16
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <DMA_CalcBaseAndBitshift+0x64>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030da:	4a13      	ldr	r2, [pc, #76]	; (8003128 <DMA_CalcBaseAndBitshift+0x68>)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d909      	bls.n	8003102 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003100:	e007      	b.n	8003112 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800310a:	f023 0303 	bic.w	r3, r3, #3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	aaaaaaab 	.word	0xaaaaaaab
 8003128:	08007060 	.word	0x08007060

0800312c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d11f      	bne.n	8003186 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d856      	bhi.n	80031fa <DMA_CheckFifoParam+0xce>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <DMA_CheckFifoParam+0x28>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003165 	.word	0x08003165
 8003158:	08003177 	.word	0x08003177
 800315c:	08003165 	.word	0x08003165
 8003160:	080031fb 	.word	0x080031fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d046      	beq.n	80031fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003174:	e043      	b.n	80031fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800317e:	d140      	bne.n	8003202 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003184:	e03d      	b.n	8003202 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318e:	d121      	bne.n	80031d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d837      	bhi.n	8003206 <DMA_CheckFifoParam+0xda>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <DMA_CheckFifoParam+0x70>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031ad 	.word	0x080031ad
 80031a0:	080031b3 	.word	0x080031b3
 80031a4:	080031ad 	.word	0x080031ad
 80031a8:	080031c5 	.word	0x080031c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e030      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d025      	beq.n	800320a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c2:	e022      	b.n	800320a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031cc:	d11f      	bne.n	800320e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031d2:	e01c      	b.n	800320e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d903      	bls.n	80031e2 <DMA_CheckFifoParam+0xb6>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d003      	beq.n	80031e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031e0:	e018      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      break;
 80031e6:	e015      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e00b      	b.n	8003212 <DMA_CheckFifoParam+0xe6>
      break;
 80031fa:	bf00      	nop
 80031fc:	e00a      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e008      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 8003202:	bf00      	nop
 8003204:	e006      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
 8003208:	e004      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;   
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <DMA_CheckFifoParam+0xe8>
      break;
 8003212:	bf00      	nop
    }
  } 
  
  return status; 
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e06c      	b.n	8003310 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2223      	movs	r2, #35	; 0x23
 8003244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fe fa51 	bl	80016f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_ETH_Init+0xf4>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	4a30      	ldr	r2, [pc, #192]	; (8003318 <HAL_ETH_Init+0xf4>)
 8003258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325c:	6453      	str	r3, [r2, #68]	; 0x44
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_ETH_Init+0xf4>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_ETH_Init+0xf8>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a2b      	ldr	r2, [pc, #172]	; (800331c <HAL_ETH_Init+0xf8>)
 8003270:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003274:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_ETH_Init+0xf8>)
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4927      	ldr	r1, [pc, #156]	; (800331c <HAL_ETH_Init+0xf8>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_ETH_Init+0xf8>)
 8003286:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800329e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a0:	f7fe fcea 	bl	8001c78 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032a6:	e011      	b.n	80032cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80032a8:	f7fe fce6 	bl	8001c78 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032b6:	d909      	bls.n	80032cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2204      	movs	r2, #4
 80032bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	22e0      	movs	r2, #224	; 0xe0
 80032c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e021      	b.n	8003310 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e4      	bne.n	80032a8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f958 	bl	8003594 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f9ff 	bl	80036e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa55 	bl	800379a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	461a      	mov	r2, r3
 80032f6:	2100      	movs	r1, #0
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f9bd 	bl	8003678 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2210      	movs	r2, #16
 800330a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800

08003320 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4b51      	ldr	r3, [pc, #324]	; (800347c <ETH_SetMACConfig+0x15c>)
 8003336:	4013      	ands	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	7c1b      	ldrb	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <ETH_SetMACConfig+0x28>
 8003342:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003346:	e000      	b.n	800334a <ETH_SetMACConfig+0x2a>
 8003348:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	7c5b      	ldrb	r3, [r3, #17]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <ETH_SetMACConfig+0x38>
 8003352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003356:	e000      	b.n	800335a <ETH_SetMACConfig+0x3a>
 8003358:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800335a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003360:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	7fdb      	ldrb	r3, [r3, #31]
 8003366:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003368:	431a      	orrs	r2, r3
                        macconf->Speed |
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800336e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	7f92      	ldrb	r2, [r2, #30]
 8003374:	2a00      	cmp	r2, #0
 8003376:	d102      	bne.n	800337e <ETH_SetMACConfig+0x5e>
 8003378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800337c:	e000      	b.n	8003380 <ETH_SetMACConfig+0x60>
 800337e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003380:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	7f1b      	ldrb	r3, [r3, #28]
 8003386:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003388:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800338e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	791b      	ldrb	r3, [r3, #4]
 8003394:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003396:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800339e:	2a00      	cmp	r2, #0
 80033a0:	d102      	bne.n	80033a8 <ETH_SetMACConfig+0x88>
 80033a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a6:	e000      	b.n	80033aa <ETH_SetMACConfig+0x8a>
 80033a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80033aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	7bdb      	ldrb	r3, [r3, #15]
 80033b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80033b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80033b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033c2:	4313      	orrs	r3, r2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033da:	2001      	movs	r0, #1
 80033dc:	f7fe fc58 	bl	8001c90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003406:	2a00      	cmp	r2, #0
 8003408:	d101      	bne.n	800340e <ETH_SetMACConfig+0xee>
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	e000      	b.n	8003410 <ETH_SetMACConfig+0xf0>
 800340e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003410:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003416:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800341e:	2a01      	cmp	r2, #1
 8003420:	d101      	bne.n	8003426 <ETH_SetMACConfig+0x106>
 8003422:	2208      	movs	r2, #8
 8003424:	e000      	b.n	8003428 <ETH_SetMACConfig+0x108>
 8003426:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003428:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003430:	2a01      	cmp	r2, #1
 8003432:	d101      	bne.n	8003438 <ETH_SetMACConfig+0x118>
 8003434:	2204      	movs	r2, #4
 8003436:	e000      	b.n	800343a <ETH_SetMACConfig+0x11a>
 8003438:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800343a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003442:	2a01      	cmp	r2, #1
 8003444:	d101      	bne.n	800344a <ETH_SetMACConfig+0x12a>
 8003446:	2202      	movs	r2, #2
 8003448:	e000      	b.n	800344c <ETH_SetMACConfig+0x12c>
 800344a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800344c:	4313      	orrs	r3, r2
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003464:	2001      	movs	r0, #1
 8003466:	f7fe fc13 	bl	8001c90 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	619a      	str	r2, [r3, #24]
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	ff20810f 	.word	0xff20810f

08003480 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <ETH_SetDMAConfig+0x110>)
 800349a:	4013      	ands	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	7b1b      	ldrb	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <ETH_SetDMAConfig+0x2c>
 80034a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034aa:	e000      	b.n	80034ae <ETH_SetDMAConfig+0x2e>
 80034ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	7b5b      	ldrb	r3, [r3, #13]
 80034b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	7f52      	ldrb	r2, [r2, #29]
 80034ba:	2a00      	cmp	r2, #0
 80034bc:	d102      	bne.n	80034c4 <ETH_SetDMAConfig+0x44>
 80034be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034c2:	e000      	b.n	80034c6 <ETH_SetDMAConfig+0x46>
 80034c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80034c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	7b9b      	ldrb	r3, [r3, #14]
 80034cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80034ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80034d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7f1b      	ldrb	r3, [r3, #28]
 80034da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80034dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	7f9b      	ldrb	r3, [r3, #30]
 80034e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80034e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80034ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80034f4:	4313      	orrs	r3, r2
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003504:	461a      	mov	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003516:	2001      	movs	r0, #1
 8003518:	f7fe fbba 	bl	8001c90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003524:	461a      	mov	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	791b      	ldrb	r3, [r3, #4]
 800352e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003534:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800353a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003540:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003548:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800354a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003552:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003558:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003566:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003574:	2001      	movs	r0, #1
 8003576:	f7fe fb8b 	bl	8001c90 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6013      	str	r3, [r2, #0]
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	f8de3f23 	.word	0xf8de3f23

08003594 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b0a6      	sub	sp, #152	; 0x98
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80035d0:	2300      	movs	r3, #0
 80035d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80035fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003600:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003602:	2300      	movs	r3, #0
 8003604:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003608:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fe86 	bl	8003320 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003614:	2301      	movs	r3, #1
 8003616:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003618:	2301      	movs	r3, #1
 800361a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003622:	2301      	movs	r3, #1
 8003624:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003636:	2300      	movs	r3, #0
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003640:	2301      	movs	r3, #1
 8003642:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003648:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800364a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800364e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003654:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800365c:	2300      	movs	r3, #0
 800365e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ff08 	bl	8003480 <ETH_SetDMAConfig>
}
 8003670:	bf00      	nop
 8003672:	3798      	adds	r7, #152	; 0x98
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3305      	adds	r3, #5
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	3204      	adds	r2, #4
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <ETH_MACAddressConfig+0x68>)
 800369a:	4413      	add	r3, r2
 800369c:	461a      	mov	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3303      	adds	r3, #3
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	061a      	lsls	r2, r3, #24
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3302      	adds	r3, #2
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3301      	adds	r3, #1
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	4313      	orrs	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <ETH_MACAddressConfig+0x6c>)
 80036ca:	4413      	add	r3, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	6013      	str	r3, [r2, #0]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40028040 	.word	0x40028040
 80036e4:	40028044 	.word	0x40028044

080036e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e03e      	b.n	8003774 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	440b      	add	r3, r1
 8003706:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2200      	movs	r2, #0
 8003712:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	3206      	adds	r2, #6
 8003728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d80c      	bhi.n	8003758 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	440b      	add	r3, r1
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e004      	b.n	8003762 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3301      	adds	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d9bd      	bls.n	80036f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	611a      	str	r2, [r3, #16]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e046      	b.n	8003836 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6919      	ldr	r1, [r3, #16]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80037ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	3212      	adds	r2, #18
 8003802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d80c      	bhi.n	8003826 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6919      	ldr	r1, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	e004      	b.n	8003830 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d9b5      	bls.n	80037a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003866:	60da      	str	r2, [r3, #12]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e177      	b.n	8003b80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f040 8166 	bne.w	8003b7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d005      	beq.n	80038c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d130      	bne.n	8003928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038fc:	2201      	movs	r2, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 0201 	and.w	r2, r3, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b03      	cmp	r3, #3
 8003932:	d017      	beq.n	8003964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d123      	bne.n	80039b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0203 	and.w	r2, r3, #3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80c0 	beq.w	8003b7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	4a65      	ldr	r2, [pc, #404]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a08:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a16:	4a61      	ldr	r2, [pc, #388]	; (8003b9c <HAL_GPIO_Init+0x328>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_GPIO_Init+0x32c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d037      	beq.n	8003ab2 <HAL_GPIO_Init+0x23e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a57      	ldr	r2, [pc, #348]	; (8003ba4 <HAL_GPIO_Init+0x330>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d031      	beq.n	8003aae <HAL_GPIO_Init+0x23a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_GPIO_Init+0x334>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02b      	beq.n	8003aaa <HAL_GPIO_Init+0x236>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a55      	ldr	r2, [pc, #340]	; (8003bac <HAL_GPIO_Init+0x338>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d025      	beq.n	8003aa6 <HAL_GPIO_Init+0x232>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a54      	ldr	r2, [pc, #336]	; (8003bb0 <HAL_GPIO_Init+0x33c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01f      	beq.n	8003aa2 <HAL_GPIO_Init+0x22e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a53      	ldr	r2, [pc, #332]	; (8003bb4 <HAL_GPIO_Init+0x340>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d019      	beq.n	8003a9e <HAL_GPIO_Init+0x22a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_GPIO_Init+0x344>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_GPIO_Init+0x226>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <HAL_GPIO_Init+0x348>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00d      	beq.n	8003a96 <HAL_GPIO_Init+0x222>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <HAL_GPIO_Init+0x21e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4f      	ldr	r2, [pc, #316]	; (8003bc4 <HAL_GPIO_Init+0x350>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_GPIO_Init+0x21a>
 8003a8a:	2309      	movs	r3, #9
 8003a8c:	e012      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a8e:	230a      	movs	r3, #10
 8003a90:	e010      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a92:	2308      	movs	r3, #8
 8003a94:	e00e      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a96:	2307      	movs	r3, #7
 8003a98:	e00c      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a9a:	2306      	movs	r3, #6
 8003a9c:	e00a      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <HAL_GPIO_Init+0x328>)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af6:	4a34      	ldr	r2, [pc, #208]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b26:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f ae84 	bls.w	8003890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40021800 	.word	0x40021800
 8003bbc:	40021c00 	.word	0x40021c00
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40022400 	.word	0x40022400
 8003bc8:	40013c00 	.word	0x40013c00

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be8:	e003      	b.n	8003bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c00:	b08f      	sub	sp, #60	; 0x3c
 8003c02:	af0a      	add	r7, sp, #40	; 0x28
 8003c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e10f      	b.n	8003e30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd fecc 	bl	80019c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2203      	movs	r2, #3
 8003c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fed3 	bl	80059fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	687e      	ldr	r6, [r7, #4]
 8003c5c:	466d      	mov	r5, sp
 8003c5e:	f106 0410 	add.w	r4, r6, #16
 8003c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c72:	1d33      	adds	r3, r6, #4
 8003c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c76:	6838      	ldr	r0, [r7, #0]
 8003c78:	f001 fe5e 	bl	8005938 <USB_CoreInit>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0d0      	b.n	8003e30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fec1 	bl	8005a1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	e04a      	b.n	8003d36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	333d      	adds	r3, #61	; 0x3d
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	333c      	adds	r3, #60	; 0x3c
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	b298      	uxth	r0, r3
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3344      	adds	r3, #68	; 0x44
 8003cdc:	4602      	mov	r2, r0
 8003cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3340      	adds	r3, #64	; 0x40
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	3348      	adds	r3, #72	; 0x48
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d08:	7bfa      	ldrb	r2, [r7, #15]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	334c      	adds	r3, #76	; 0x4c
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	3354      	adds	r3, #84	; 0x54
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	3301      	adds	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3af      	bcc.n	8003ca0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e044      	b.n	8003dd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d9e:	7bfa      	ldrb	r2, [r7, #15]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3b5      	bcc.n	8003d46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	687e      	ldr	r6, [r7, #4]
 8003de2:	466d      	mov	r5, sp
 8003de4:	f106 0410 	add.w	r4, r6, #16
 8003de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003df0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003df4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003df8:	1d33      	adds	r3, r6, #4
 8003dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dfc:	6838      	ldr	r0, [r7, #0]
 8003dfe:	f001 fe59 	bl	8005ab4 <USB_DevInit>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e00d      	b.n	8003e30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f002 f824 	bl	8005e76 <USB_DevDisconnect>

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e267      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d075      	beq.n	8003f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e56:	4b88      	ldr	r3, [pc, #544]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e62:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d112      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b82      	ldr	r3, [pc, #520]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7a:	d10b      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	4b7e      	ldr	r3, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05b      	beq.n	8003f40 <HAL_RCC_OscConfig+0x108>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d157      	bne.n	8003f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e242      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d106      	bne.n	8003eac <HAL_RCC_OscConfig+0x74>
 8003e9e:	4b76      	ldr	r3, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a75      	ldr	r2, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e01d      	b.n	8003ee8 <HAL_RCC_OscConfig+0xb0>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x98>
 8003eb6:	4b70      	ldr	r3, [pc, #448]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6f      	ldr	r2, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6c      	ldr	r2, [pc, #432]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0xb0>
 8003ed0:	4b69      	ldr	r3, [pc, #420]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d013      	beq.n	8003f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fec2 	bl	8001c78 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd febe 	bl	8001c78 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e207      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xc0>
 8003f16:	e014      	b.n	8003f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fd feae 	bl	8001c78 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fd feaa 	bl	8001c78 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1f3      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	4b51      	ldr	r3, [pc, #324]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0xe8>
 8003f3e:	e000      	b.n	8003f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d063      	beq.n	8004016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d11c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f66:	4b44      	ldr	r3, [pc, #272]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d116      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_RCC_OscConfig+0x152>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e1c7      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4937      	ldr	r1, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	e03a      	b.n	8004016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa8:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCC_OscConfig+0x244>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fd fe63 	bl	8001c78 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb6:	f7fd fe5f 	bl	8001c78 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e1a8      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4925      	ldr	r1, [pc, #148]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x244>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fe42 	bl	8001c78 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fd fe3e 	bl	8001c78 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e187      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d036      	beq.n	8004090 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <HAL_RCC_OscConfig+0x248>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fd fe22 	bl	8001c78 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004038:	f7fd fe1e 	bl	8001c78 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e167      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x200>
 8004056:	e01b      	b.n	8004090 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x248>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405e:	f7fd fe0b 	bl	8001c78 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	e00e      	b.n	8004084 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004066:	f7fd fe07 	bl	8001c78 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d907      	bls.n	8004084 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e150      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
 8004078:	40023800 	.word	0x40023800
 800407c:	42470000 	.word	0x42470000
 8004080:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004084:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ea      	bne.n	8004066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8097 	beq.w	80041cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a2:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6413      	str	r3, [r2, #64]	; 0x40
 80040be:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b77      	ldr	r3, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d118      	bne.n	800410c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040da:	4b74      	ldr	r3, [pc, #464]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a73      	ldr	r2, [pc, #460]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e6:	f7fd fdc7 	bl	8001c78 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ee:	f7fd fdc3 	bl	8001c78 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e10c      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x2ea>
 8004114:	4b64      	ldr	r3, [pc, #400]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	4a63      	ldr	r2, [pc, #396]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x324>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b05      	cmp	r3, #5
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x30c>
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a5e      	ldr	r2, [pc, #376]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
 8004136:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4a5b      	ldr	r2, [pc, #364]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6713      	str	r3, [r2, #112]	; 0x70
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0x324>
 8004144:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	4a57      	ldr	r2, [pc, #348]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	6713      	str	r3, [r2, #112]	; 0x70
 8004150:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004156:	f023 0304 	bic.w	r3, r3, #4
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d015      	beq.n	8004190 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd fd88 	bl	8001c78 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fd fd84 	bl	8001c78 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0cb      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ee      	beq.n	800416c <HAL_RCC_OscConfig+0x334>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004190:	f7fd fd72 	bl	8001c78 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fd fd6e 	bl	8001c78 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0b5      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ee      	bne.n	8004198 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a1 	beq.w	8004318 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041d6:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d05c      	beq.n	800429c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d141      	bne.n	800426e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ea:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd fd42 	bl	8001c78 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd fd3e 	bl	8001c78 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e087      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	019b      	lsls	r3, r3, #6
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	491b      	ldr	r1, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fd fd17 	bl	8001c78 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fd fd13 	bl	8001c78 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e05c      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x416>
 800426c:	e054      	b.n	8004318 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fd fd00 	bl	8001c78 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd fcfc 	bl	8001c78 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e045      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x444>
 800429a:	e03d      	b.n	8004318 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e038      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000
 80042b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x4ec>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d028      	beq.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d121      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d11a      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d111      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	3b01      	subs	r3, #1
 80042fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0cc      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d90c      	bls.n	8004364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b63      	ldr	r3, [pc, #396]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0b8      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800437c:	4b59      	ldr	r3, [pc, #356]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a58      	ldr	r2, [pc, #352]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004394:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a52      	ldr	r2, [pc, #328]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800439e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a0:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	494d      	ldr	r1, [pc, #308]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d044      	beq.n	8004448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d119      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e06f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e067      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4934      	ldr	r1, [pc, #208]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004418:	f7fd fc2e 	bl	8001c78 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fd fc2a 	bl	8001c78 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e04f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 020c 	and.w	r2, r3, #12
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	429a      	cmp	r2, r3
 8004446:	d1eb      	bne.n	8004420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d20c      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e032      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4916      	ldr	r1, [pc, #88]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	490e      	ldr	r1, [pc, #56]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ae:	f000 f821 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	490a      	ldr	r1, [pc, #40]	; (80044e8 <HAL_RCC_ClockConfig+0x1c0>)
 80044c0:	5ccb      	ldrb	r3, [r1, r3]
 80044c2:	fa22 f303 	lsr.w	r3, r2, r3
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd fb8e 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023c00 	.word	0x40023c00
 80044e4:	40023800 	.word	0x40023800
 80044e8:	08007048 	.word	0x08007048
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000004 	.word	0x20000004

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f8:	b094      	sub	sp, #80	; 0x50
 80044fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004500:	2300      	movs	r3, #0
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004504:	2300      	movs	r3, #0
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800450c:	4b79      	ldr	r3, [pc, #484]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b08      	cmp	r3, #8
 8004516:	d00d      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x40>
 8004518:	2b08      	cmp	r3, #8
 800451a:	f200 80e1 	bhi.w	80046e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x34>
 8004522:	2b04      	cmp	r3, #4
 8004524:	d003      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x3a>
 8004526:	e0db      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b73      	ldr	r3, [pc, #460]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800452a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800452c:	e0db      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800452e:	4b73      	ldr	r3, [pc, #460]	; (80046fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004530:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004532:	e0d8      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4b6f      	ldr	r3, [pc, #444]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800453e:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	2200      	movs	r2, #0
 8004552:	63bb      	str	r3, [r7, #56]	; 0x38
 8004554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	633b      	str	r3, [r7, #48]	; 0x30
 800455e:	2300      	movs	r3, #0
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
 8004562:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	f04f 0000 	mov.w	r0, #0
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	0159      	lsls	r1, r3, #5
 8004574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004578:	0150      	lsls	r0, r2, #5
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4621      	mov	r1, r4
 8004580:	1a51      	subs	r1, r2, r1
 8004582:	6139      	str	r1, [r7, #16]
 8004584:	4629      	mov	r1, r5
 8004586:	eb63 0301 	sbc.w	r3, r3, r1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004598:	4659      	mov	r1, fp
 800459a:	018b      	lsls	r3, r1, #6
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045a2:	4651      	mov	r1, sl
 80045a4:	018a      	lsls	r2, r1, #6
 80045a6:	4651      	mov	r1, sl
 80045a8:	ebb2 0801 	subs.w	r8, r2, r1
 80045ac:	4659      	mov	r1, fp
 80045ae:	eb63 0901 	sbc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	462b      	mov	r3, r5
 80045d4:	eb49 0303 	adc.w	r3, r9, r3
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045e6:	4629      	mov	r1, r5
 80045e8:	024b      	lsls	r3, r1, #9
 80045ea:	4621      	mov	r1, r4
 80045ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045f0:	4621      	mov	r1, r4
 80045f2:	024a      	lsls	r2, r1, #9
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fa:	2200      	movs	r2, #0
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004600:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004604:	f7fc fa92 	bl	8000b2c <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4613      	mov	r3, r2
 800460e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004610:	e058      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004612:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	2200      	movs	r2, #0
 800461a:	4618      	mov	r0, r3
 800461c:	4611      	mov	r1, r2
 800461e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	2300      	movs	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	f04f 0000 	mov.w	r0, #0
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	0159      	lsls	r1, r3, #5
 800463a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800463e:	0150      	lsls	r0, r2, #5
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4641      	mov	r1, r8
 8004646:	ebb2 0a01 	subs.w	sl, r2, r1
 800464a:	4649      	mov	r1, r9
 800464c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800465c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004660:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004664:	ebb2 040a 	subs.w	r4, r2, sl
 8004668:	eb63 050b 	sbc.w	r5, r3, fp
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	00eb      	lsls	r3, r5, #3
 8004676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800467a:	00e2      	lsls	r2, r4, #3
 800467c:	4614      	mov	r4, r2
 800467e:	461d      	mov	r5, r3
 8004680:	4643      	mov	r3, r8
 8004682:	18e3      	adds	r3, r4, r3
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	464b      	mov	r3, r9
 8004688:	eb45 0303 	adc.w	r3, r5, r3
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800469a:	4629      	mov	r1, r5
 800469c:	028b      	lsls	r3, r1, #10
 800469e:	4621      	mov	r1, r4
 80046a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046a4:	4621      	mov	r1, r4
 80046a6:	028a      	lsls	r2, r1, #10
 80046a8:	4610      	mov	r0, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ae:	2200      	movs	r2, #0
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	61fa      	str	r2, [r7, #28]
 80046b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b8:	f7fc fa38 	bl	8000b2c <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	3301      	adds	r3, #1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046de:	e002      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3750      	adds	r7, #80	; 0x50
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	007a1200 	.word	0x007a1200

08004700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <HAL_RCC_GetHCLKFreq+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000000 	.word	0x20000000

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800471c:	f7ff fff0 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0a9b      	lsrs	r3, r3, #10
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	; (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40023800 	.word	0x40023800
 800473c:	08007058 	.word	0x08007058

08004740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004744:	f7ff ffdc 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0b5b      	lsrs	r3, r3, #13
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	08007058 	.word	0x08007058

08004768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e041      	b.n	80047fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd f874 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 f896 	bl	80048d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e046      	b.n	80048ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a23      	ldr	r2, [pc, #140]	; (80048bc <HAL_TIM_Base_Start+0xb4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d01d      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_TIM_Base_Start+0xb8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <HAL_TIM_Base_Start+0xbc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_TIM_Base_Start+0xc0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <HAL_TIM_Base_Start+0xc4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_Base_Start+0xc8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_TIM_Base_Start+0xcc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40010400 	.word	0x40010400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40001800 	.word	0x40001800

080048d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a40      	ldr	r2, [pc, #256]	; (80049ec <TIM_Base_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d00f      	beq.n	8004918 <TIM_Base_SetConfig+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a3d      	ldr	r2, [pc, #244]	; (80049f0 <TIM_Base_SetConfig+0x118>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00b      	beq.n	8004918 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a3c      	ldr	r2, [pc, #240]	; (80049f4 <TIM_Base_SetConfig+0x11c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d007      	beq.n	8004918 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3b      	ldr	r2, [pc, #236]	; (80049f8 <TIM_Base_SetConfig+0x120>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3a      	ldr	r2, [pc, #232]	; (80049fc <TIM_Base_SetConfig+0x124>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d108      	bne.n	800492a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <TIM_Base_SetConfig+0x114>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02b      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004938:	d027      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2c      	ldr	r2, [pc, #176]	; (80049f0 <TIM_Base_SetConfig+0x118>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d023      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2b      	ldr	r2, [pc, #172]	; (80049f4 <TIM_Base_SetConfig+0x11c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01f      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2a      	ldr	r2, [pc, #168]	; (80049f8 <TIM_Base_SetConfig+0x120>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01b      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a29      	ldr	r2, [pc, #164]	; (80049fc <TIM_Base_SetConfig+0x124>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d017      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <TIM_Base_SetConfig+0x128>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <TIM_Base_SetConfig+0x12c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00f      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <TIM_Base_SetConfig+0x130>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00b      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a25      	ldr	r2, [pc, #148]	; (8004a0c <TIM_Base_SetConfig+0x134>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <TIM_Base_SetConfig+0x138>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a23      	ldr	r2, [pc, #140]	; (8004a14 <TIM_Base_SetConfig+0x13c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d108      	bne.n	800499c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <TIM_Base_SetConfig+0x114>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0xf8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <TIM_Base_SetConfig+0x124>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d103      	bne.n	80049d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	615a      	str	r2, [r3, #20]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40010400 	.word	0x40010400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800
 8004a0c:	40001800 	.word	0x40001800
 8004a10:	40001c00 	.word	0x40001c00
 8004a14:	40002000 	.word	0x40002000

08004a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e05a      	b.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a21      	ldr	r2, [pc, #132]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d022      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7c:	d01d      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40010400 	.word	0x40010400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40001800 	.word	0x40001800

08004b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e03f      	b.n	8004ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc fec2 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2224      	movs	r2, #36	; 0x24
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fc7b 	bl	8005450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b0ba      	sub	sp, #232	; 0xe8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10f      	bne.n	8004c12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_UART_IRQHandler+0x66>
 8004bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fb65 	bl	80052da <UART_Receive_IT>
      return;
 8004c10:	e256      	b.n	80050c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80de 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x22c>
 8004c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80d1 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <HAL_UART_IRQHandler+0xae>
 8004c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f043 0201 	orr.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_UART_IRQHandler+0xd2>
 8004c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0202 	orr.w	r2, r3, #2
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xf6>
 8004c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d011      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x126>
 8004cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d105      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0208 	orr.w	r2, r3, #8
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 81ed 	beq.w	80050b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_UART_IRQHandler+0x14e>
 8004ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 faf0 	bl	80052da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <HAL_UART_IRQHandler+0x17a>
 8004d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d04f      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9f8 	bl	800511c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d141      	bne.n	8004dbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1d9      	bne.n	8004d3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d013      	beq.n	8004db6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	4a7d      	ldr	r2, [pc, #500]	; (8004f88 <HAL_UART_IRQHandler+0x3dc>)
 8004d94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd ffb6 	bl	8002d0c <HAL_DMA_Abort_IT>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004db0:	4610      	mov	r0, r2
 8004db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e00e      	b.n	8004dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f99a 	bl	80050f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	e00a      	b.n	8004dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f996 	bl	80050f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	e006      	b.n	8004dd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f992 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004dd2:	e170      	b.n	80050b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd4:	bf00      	nop
    return;
 8004dd6:	e16e      	b.n	80050b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f040 814a 	bne.w	8005076 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8143 	beq.w	8005076 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 813c 	beq.w	8005076 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	f040 80b4 	bne.w	8004f8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8140 	beq.w	80050ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e42:	429a      	cmp	r2, r3
 8004e44:	f080 8139 	bcs.w	80050ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5a:	f000 8088 	beq.w	8004f6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1d9      	bne.n	8004e5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3314      	adds	r3, #20
 8004eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3314      	adds	r3, #20
 8004eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e1      	bne.n	8004eaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3314      	adds	r3, #20
 8004eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e3      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3e:	f023 0310 	bic.w	r3, r3, #16
 8004f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f50:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e3      	bne.n	8004f2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd fe5f 	bl	8002c2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8c0 	bl	8005104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f84:	e099      	b.n	80050ba <HAL_UART_IRQHandler+0x50e>
 8004f86:	bf00      	nop
 8004f88:	080051e3 	.word	0x080051e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 808b 	beq.w	80050be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8086 	beq.w	80050be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fd6:	647a      	str	r2, [r7, #68]	; 0x44
 8004fd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e3      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3314      	adds	r3, #20
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3314      	adds	r3, #20
 800500a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800500e:	633a      	str	r2, [r7, #48]	; 0x30
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e3      	bne.n	8004fea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0310 	bic.w	r3, r3, #16
 8005046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	330c      	adds	r3, #12
 8005050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	69b9      	ldr	r1, [r7, #24]
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	617b      	str	r3, [r7, #20]
   return(result);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e3      	bne.n	8005030 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f848 	bl	8005104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005074:	e023      	b.n	80050be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_UART_IRQHandler+0x4ea>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f8bb 	bl	800520a <UART_Transmit_IT>
    return;
 8005094:	e014      	b.n	80050c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00e      	beq.n	80050c0 <HAL_UART_IRQHandler+0x514>
 80050a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8fb 	bl	80052aa <UART_EndTransmit_IT>
    return;
 80050b4:	e004      	b.n	80050c0 <HAL_UART_IRQHandler+0x514>
    return;
 80050b6:	bf00      	nop
 80050b8:	e002      	b.n	80050c0 <HAL_UART_IRQHandler+0x514>
      return;
 80050ba:	bf00      	nop
 80050bc:	e000      	b.n	80050c0 <HAL_UART_IRQHandler+0x514>
      return;
 80050be:	bf00      	nop
  }
}
 80050c0:	37e8      	adds	r7, #232	; 0xe8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop

080050c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b095      	sub	sp, #84	; 0x54
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800513a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005144:	643a      	str	r2, [r7, #64]	; 0x40
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800514a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e5      	bne.n	8005124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3314      	adds	r3, #20
 800515e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	61fb      	str	r3, [r7, #28]
   return(result);
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3314      	adds	r3, #20
 8005176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800517e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e5      	bne.n	8005158 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	d119      	bne.n	80051c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b4:	61ba      	str	r2, [r7, #24]
 80051b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6979      	ldr	r1, [r7, #20]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	613b      	str	r3, [r7, #16]
   return(result);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051d6:	bf00      	nop
 80051d8:	3754      	adds	r7, #84	; 0x54
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff ff77 	bl	80050f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b21      	cmp	r3, #33	; 0x21
 800521c:	d13e      	bne.n	800529c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d114      	bne.n	8005252 <UART_Transmit_IT+0x48>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d110      	bne.n	8005252 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005244:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	1c9a      	adds	r2, r3, #2
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	621a      	str	r2, [r3, #32]
 8005250:	e008      	b.n	8005264 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	1c59      	adds	r1, r3, #1
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6211      	str	r1, [r2, #32]
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29b      	uxth	r3, r3
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4619      	mov	r1, r3
 8005272:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005286:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005296:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	e000      	b.n	800529e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800529c:	2302      	movs	r3, #2
  }
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fefc 	bl	80050c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b08c      	sub	sp, #48	; 0x30
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b22      	cmp	r3, #34	; 0x22
 80052ec:	f040 80ab 	bne.w	8005446 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f8:	d117      	bne.n	800532a <UART_Receive_IT+0x50>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d113      	bne.n	800532a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005318:	b29a      	uxth	r2, r3
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	1c9a      	adds	r2, r3, #2
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
 8005328:	e026      	b.n	8005378 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	d007      	beq.n	800534e <UART_Receive_IT+0x74>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <UART_Receive_IT+0x82>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e008      	b.n	800536e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005368:	b2da      	uxtb	r2, r3
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4619      	mov	r1, r3
 8005386:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005388:	2b00      	cmp	r3, #0
 800538a:	d15a      	bne.n	8005442 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0220 	bic.w	r2, r2, #32
 800539a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d135      	bne.n	8005438 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	613b      	str	r3, [r7, #16]
   return(result);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f023 0310 	bic.w	r3, r3, #16
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	623a      	str	r2, [r7, #32]
 80053f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	69f9      	ldr	r1, [r7, #28]
 80053f8:	6a3a      	ldr	r2, [r7, #32]
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b10      	cmp	r3, #16
 8005412:	d10a      	bne.n	800542a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fe67 	bl	8005104 <HAL_UARTEx_RxEventCallback>
 8005436:	e002      	b.n	800543e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff fe4f 	bl	80050dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e002      	b.n	8005448 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	e000      	b.n	8005448 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005446:	2302      	movs	r3, #2
  }
}
 8005448:	4618      	mov	r0, r3
 800544a:	3730      	adds	r7, #48	; 0x30
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005454:	b0c0      	sub	sp, #256	; 0x100
 8005456:	af00      	add	r7, sp, #0
 8005458:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	68d9      	ldr	r1, [r3, #12]
 800546e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	ea40 0301 	orr.w	r3, r0, r1
 8005478:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	431a      	orrs	r2, r3
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	431a      	orrs	r2, r3
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054a8:	f021 010c 	bic.w	r1, r1, #12
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054b6:	430b      	orrs	r3, r1
 80054b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ca:	6999      	ldr	r1, [r3, #24]
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	ea40 0301 	orr.w	r3, r0, r1
 80054d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b8f      	ldr	r3, [pc, #572]	; (800571c <UART_SetConfig+0x2cc>)
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d005      	beq.n	80054f0 <UART_SetConfig+0xa0>
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b8d      	ldr	r3, [pc, #564]	; (8005720 <UART_SetConfig+0x2d0>)
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d104      	bne.n	80054fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054f0:	f7ff f926 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 80054f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054f8:	e003      	b.n	8005502 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054fa:	f7ff f90d 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80054fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550c:	f040 810c 	bne.w	8005728 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005514:	2200      	movs	r2, #0
 8005516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800551a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800551e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005522:	4622      	mov	r2, r4
 8005524:	462b      	mov	r3, r5
 8005526:	1891      	adds	r1, r2, r2
 8005528:	65b9      	str	r1, [r7, #88]	; 0x58
 800552a:	415b      	adcs	r3, r3
 800552c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005532:	4621      	mov	r1, r4
 8005534:	eb12 0801 	adds.w	r8, r2, r1
 8005538:	4629      	mov	r1, r5
 800553a:	eb43 0901 	adc.w	r9, r3, r1
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800554a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800554e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005552:	4690      	mov	r8, r2
 8005554:	4699      	mov	r9, r3
 8005556:	4623      	mov	r3, r4
 8005558:	eb18 0303 	adds.w	r3, r8, r3
 800555c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005560:	462b      	mov	r3, r5
 8005562:	eb49 0303 	adc.w	r3, r9, r3
 8005566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005576:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800557a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800557e:	460b      	mov	r3, r1
 8005580:	18db      	adds	r3, r3, r3
 8005582:	653b      	str	r3, [r7, #80]	; 0x50
 8005584:	4613      	mov	r3, r2
 8005586:	eb42 0303 	adc.w	r3, r2, r3
 800558a:	657b      	str	r3, [r7, #84]	; 0x54
 800558c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005590:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005594:	f7fb faca 	bl	8000b2c <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4b61      	ldr	r3, [pc, #388]	; (8005724 <UART_SetConfig+0x2d4>)
 800559e:	fba3 2302 	umull	r2, r3, r3, r2
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	011c      	lsls	r4, r3, #4
 80055a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	1891      	adds	r1, r2, r2
 80055be:	64b9      	str	r1, [r7, #72]	; 0x48
 80055c0:	415b      	adcs	r3, r3
 80055c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055c8:	4641      	mov	r1, r8
 80055ca:	eb12 0a01 	adds.w	sl, r2, r1
 80055ce:	4649      	mov	r1, r9
 80055d0:	eb43 0b01 	adc.w	fp, r3, r1
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055e8:	4692      	mov	sl, r2
 80055ea:	469b      	mov	fp, r3
 80055ec:	4643      	mov	r3, r8
 80055ee:	eb1a 0303 	adds.w	r3, sl, r3
 80055f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055f6:	464b      	mov	r3, r9
 80055f8:	eb4b 0303 	adc.w	r3, fp, r3
 80055fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800560c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005610:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005614:	460b      	mov	r3, r1
 8005616:	18db      	adds	r3, r3, r3
 8005618:	643b      	str	r3, [r7, #64]	; 0x40
 800561a:	4613      	mov	r3, r2
 800561c:	eb42 0303 	adc.w	r3, r2, r3
 8005620:	647b      	str	r3, [r7, #68]	; 0x44
 8005622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005626:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800562a:	f7fb fa7f 	bl	8000b2c <__aeabi_uldivmod>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4611      	mov	r1, r2
 8005634:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <UART_SetConfig+0x2d4>)
 8005636:	fba3 2301 	umull	r2, r3, r3, r1
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2264      	movs	r2, #100	; 0x64
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	1acb      	subs	r3, r1, r3
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800564a:	4b36      	ldr	r3, [pc, #216]	; (8005724 <UART_SetConfig+0x2d4>)
 800564c:	fba3 2302 	umull	r2, r3, r3, r2
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005658:	441c      	add	r4, r3
 800565a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800565e:	2200      	movs	r2, #0
 8005660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005664:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005668:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800566c:	4642      	mov	r2, r8
 800566e:	464b      	mov	r3, r9
 8005670:	1891      	adds	r1, r2, r2
 8005672:	63b9      	str	r1, [r7, #56]	; 0x38
 8005674:	415b      	adcs	r3, r3
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800567c:	4641      	mov	r1, r8
 800567e:	1851      	adds	r1, r2, r1
 8005680:	6339      	str	r1, [r7, #48]	; 0x30
 8005682:	4649      	mov	r1, r9
 8005684:	414b      	adcs	r3, r1
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005694:	4659      	mov	r1, fp
 8005696:	00cb      	lsls	r3, r1, #3
 8005698:	4651      	mov	r1, sl
 800569a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569e:	4651      	mov	r1, sl
 80056a0:	00ca      	lsls	r2, r1, #3
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	4642      	mov	r2, r8
 80056aa:	189b      	adds	r3, r3, r2
 80056ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b0:	464b      	mov	r3, r9
 80056b2:	460a      	mov	r2, r1
 80056b4:	eb42 0303 	adc.w	r3, r2, r3
 80056b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056d0:	460b      	mov	r3, r1
 80056d2:	18db      	adds	r3, r3, r3
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d6:	4613      	mov	r3, r2
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056e6:	f7fb fa21 	bl	8000b2c <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <UART_SetConfig+0x2d4>)
 80056f0:	fba3 1302 	umull	r1, r3, r3, r2
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	2164      	movs	r1, #100	; 0x64
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	3332      	adds	r3, #50	; 0x32
 8005702:	4a08      	ldr	r2, [pc, #32]	; (8005724 <UART_SetConfig+0x2d4>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	f003 0207 	and.w	r2, r3, #7
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4422      	add	r2, r4
 8005716:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005718:	e105      	b.n	8005926 <UART_SetConfig+0x4d6>
 800571a:	bf00      	nop
 800571c:	40011000 	.word	0x40011000
 8005720:	40011400 	.word	0x40011400
 8005724:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800572c:	2200      	movs	r2, #0
 800572e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005732:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005736:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800573a:	4642      	mov	r2, r8
 800573c:	464b      	mov	r3, r9
 800573e:	1891      	adds	r1, r2, r2
 8005740:	6239      	str	r1, [r7, #32]
 8005742:	415b      	adcs	r3, r3
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
 8005746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800574a:	4641      	mov	r1, r8
 800574c:	1854      	adds	r4, r2, r1
 800574e:	4649      	mov	r1, r9
 8005750:	eb43 0501 	adc.w	r5, r3, r1
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	00eb      	lsls	r3, r5, #3
 800575e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005762:	00e2      	lsls	r2, r4, #3
 8005764:	4614      	mov	r4, r2
 8005766:	461d      	mov	r5, r3
 8005768:	4643      	mov	r3, r8
 800576a:	18e3      	adds	r3, r4, r3
 800576c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005770:	464b      	mov	r3, r9
 8005772:	eb45 0303 	adc.w	r3, r5, r3
 8005776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005786:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005796:	4629      	mov	r1, r5
 8005798:	008b      	lsls	r3, r1, #2
 800579a:	4621      	mov	r1, r4
 800579c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057a0:	4621      	mov	r1, r4
 80057a2:	008a      	lsls	r2, r1, #2
 80057a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057a8:	f7fb f9c0 	bl	8000b2c <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4b60      	ldr	r3, [pc, #384]	; (8005934 <UART_SetConfig+0x4e4>)
 80057b2:	fba3 2302 	umull	r2, r3, r3, r2
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	011c      	lsls	r4, r3, #4
 80057ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057cc:	4642      	mov	r2, r8
 80057ce:	464b      	mov	r3, r9
 80057d0:	1891      	adds	r1, r2, r2
 80057d2:	61b9      	str	r1, [r7, #24]
 80057d4:	415b      	adcs	r3, r3
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057dc:	4641      	mov	r1, r8
 80057de:	1851      	adds	r1, r2, r1
 80057e0:	6139      	str	r1, [r7, #16]
 80057e2:	4649      	mov	r1, r9
 80057e4:	414b      	adcs	r3, r1
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057f4:	4659      	mov	r1, fp
 80057f6:	00cb      	lsls	r3, r1, #3
 80057f8:	4651      	mov	r1, sl
 80057fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fe:	4651      	mov	r1, sl
 8005800:	00ca      	lsls	r2, r1, #3
 8005802:	4610      	mov	r0, r2
 8005804:	4619      	mov	r1, r3
 8005806:	4603      	mov	r3, r0
 8005808:	4642      	mov	r2, r8
 800580a:	189b      	adds	r3, r3, r2
 800580c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005810:	464b      	mov	r3, r9
 8005812:	460a      	mov	r2, r1
 8005814:	eb42 0303 	adc.w	r3, r2, r3
 8005818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	67bb      	str	r3, [r7, #120]	; 0x78
 8005826:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005834:	4649      	mov	r1, r9
 8005836:	008b      	lsls	r3, r1, #2
 8005838:	4641      	mov	r1, r8
 800583a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800583e:	4641      	mov	r1, r8
 8005840:	008a      	lsls	r2, r1, #2
 8005842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005846:	f7fb f971 	bl	8000b2c <__aeabi_uldivmod>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4b39      	ldr	r3, [pc, #228]	; (8005934 <UART_SetConfig+0x4e4>)
 8005850:	fba3 1302 	umull	r1, r3, r3, r2
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	2164      	movs	r1, #100	; 0x64
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	3332      	adds	r3, #50	; 0x32
 8005862:	4a34      	ldr	r2, [pc, #208]	; (8005934 <UART_SetConfig+0x4e4>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800586e:	441c      	add	r4, r3
 8005870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005874:	2200      	movs	r2, #0
 8005876:	673b      	str	r3, [r7, #112]	; 0x70
 8005878:	677a      	str	r2, [r7, #116]	; 0x74
 800587a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800587e:	4642      	mov	r2, r8
 8005880:	464b      	mov	r3, r9
 8005882:	1891      	adds	r1, r2, r2
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	415b      	adcs	r3, r3
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800588e:	4641      	mov	r1, r8
 8005890:	1851      	adds	r1, r2, r1
 8005892:	6039      	str	r1, [r7, #0]
 8005894:	4649      	mov	r1, r9
 8005896:	414b      	adcs	r3, r1
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058a6:	4659      	mov	r1, fp
 80058a8:	00cb      	lsls	r3, r1, #3
 80058aa:	4651      	mov	r1, sl
 80058ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b0:	4651      	mov	r1, sl
 80058b2:	00ca      	lsls	r2, r1, #3
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	4603      	mov	r3, r0
 80058ba:	4642      	mov	r2, r8
 80058bc:	189b      	adds	r3, r3, r2
 80058be:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	663b      	str	r3, [r7, #96]	; 0x60
 80058d4:	667a      	str	r2, [r7, #100]	; 0x64
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058e2:	4649      	mov	r1, r9
 80058e4:	008b      	lsls	r3, r1, #2
 80058e6:	4641      	mov	r1, r8
 80058e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ec:	4641      	mov	r1, r8
 80058ee:	008a      	lsls	r2, r1, #2
 80058f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058f4:	f7fb f91a 	bl	8000b2c <__aeabi_uldivmod>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <UART_SetConfig+0x4e4>)
 80058fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2164      	movs	r1, #100	; 0x64
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	3332      	adds	r3, #50	; 0x32
 8005910:	4a08      	ldr	r2, [pc, #32]	; (8005934 <UART_SetConfig+0x4e4>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	f003 020f 	and.w	r2, r3, #15
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4422      	add	r2, r4
 8005924:	609a      	str	r2, [r3, #8]
}
 8005926:	bf00      	nop
 8005928:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800592c:	46bd      	mov	sp, r7
 800592e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005932:	bf00      	nop
 8005934:	51eb851f 	.word	0x51eb851f

08005938 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005938:	b084      	sub	sp, #16
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	f107 001c 	add.w	r0, r7, #28
 8005946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2b01      	cmp	r3, #1
 800594e:	d122      	bne.n	8005996 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 faa2 	bl	8005ed4 <USB_CoreReset>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e01a      	b.n	80059cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa96 	bl	8005ed4 <USB_CoreReset>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
 80059be:	e005      	b.n	80059cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10b      	bne.n	80059ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f043 0206 	orr.w	r2, r3, #6
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059f6:	b004      	add	sp, #16
 80059f8:	4770      	bx	lr

080059fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f023 0201 	bic.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d115      	bne.n	8005a6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	f7fc f920 	bl	8001c90 <HAL_Delay>
      ms++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3301      	adds	r3, #1
 8005a54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa2e 	bl	8005eb8 <USB_GetMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d01e      	beq.n	8005aa0 <USB_SetCurrentMode+0x84>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b31      	cmp	r3, #49	; 0x31
 8005a66:	d9f0      	bls.n	8005a4a <USB_SetCurrentMode+0x2e>
 8005a68:	e01a      	b.n	8005aa0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d115      	bne.n	8005a9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	f7fc f907 	bl	8001c90 <HAL_Delay>
      ms++;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fa15 	bl	8005eb8 <USB_GetMode>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <USB_SetCurrentMode+0x84>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b31      	cmp	r3, #49	; 0x31
 8005a98:	d9f0      	bls.n	8005a7c <USB_SetCurrentMode+0x60>
 8005a9a:	e001      	b.n	8005aa0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e005      	b.n	8005aac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b32      	cmp	r3, #50	; 0x32
 8005aa4:	d101      	bne.n	8005aaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e009      	b.n	8005ae8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3340      	adds	r3, #64	; 0x40
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	2200      	movs	r2, #0
 8005ae0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b0e      	cmp	r3, #14
 8005aec:	d9f2      	bls.n	8005ad4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d11c      	bne.n	8005b2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b02:	f043 0302 	orr.w	r3, r3, #2
 8005b06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b2c:	e00b      	b.n	8005b46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	4619      	mov	r1, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	461a      	mov	r2, r3
 8005b62:	680b      	ldr	r3, [r1, #0]
 8005b64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d10c      	bne.n	8005b86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b72:	2100      	movs	r1, #0
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f965 	bl	8005e44 <USB_SetDevSpeed>
 8005b7a:	e008      	b.n	8005b8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f960 	bl	8005e44 <USB_SetDevSpeed>
 8005b84:	e003      	b.n	8005b8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b86:	2103      	movs	r1, #3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f95b 	bl	8005e44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b8e:	2110      	movs	r1, #16
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8f3 	bl	8005d7c <USB_FlushTxFifo>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f91f 	bl	8005de4 <USB_FlushRxFifo>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	e043      	b.n	8005c62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf0:	d118      	bne.n	8005c24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	461a      	mov	r2, r3
 8005c06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	e013      	b.n	8005c36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e008      	b.n	8005c36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	461a      	mov	r2, r3
 8005c56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d3b7      	bcc.n	8005bda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e043      	b.n	8005cf8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c86:	d118      	bne.n	8005cba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e013      	b.n	8005ccc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e008      	b.n	8005ccc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	461a      	mov	r2, r3
 8005cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d3b7      	bcc.n	8005c70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f043 0210 	orr.w	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <USB_DevInit+0x2c4>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f043 0208 	orr.w	r2, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d60:	f043 0304 	orr.w	r3, r3, #4
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d74:	b004      	add	sp, #16
 8005d76:	4770      	bx	lr
 8005d78:	803c3800 	.word	0x803c3800

08005d7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <USB_FlushTxFifo+0x64>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d901      	bls.n	8005d9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e01b      	b.n	8005dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	daf2      	bge.n	8005d8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	019b      	lsls	r3, r3, #6
 8005dac:	f043 0220 	orr.w	r2, r3, #32
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a08      	ldr	r2, [pc, #32]	; (8005de0 <USB_FlushTxFifo+0x64>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e006      	b.n	8005dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d0f0      	beq.n	8005db4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	00030d40 	.word	0x00030d40

08005de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <USB_FlushRxFifo+0x5c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e018      	b.n	8005e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	daf2      	bge.n	8005df0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2210      	movs	r2, #16
 8005e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a08      	ldr	r2, [pc, #32]	; (8005e40 <USB_FlushRxFifo+0x5c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e006      	b.n	8005e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d0f0      	beq.n	8005e14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	00030d40 	.word	0x00030d40

08005e44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e64:	4313      	orrs	r3, r2
 8005e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e90:	f023 0303 	bic.w	r3, r3, #3
 8005e94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea4:	f043 0302 	orr.w	r3, r3, #2
 8005ea8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <USB_CoreReset+0x64>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e01b      	b.n	8005f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	daf2      	bge.n	8005ee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f043 0201 	orr.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <USB_CoreReset+0x64>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d901      	bls.n	8005f1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e006      	b.n	8005f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d0f0      	beq.n	8005f0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	00030d40 	.word	0x00030d40

08005f3c <__libc_init_array>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4d0d      	ldr	r5, [pc, #52]	; (8005f74 <__libc_init_array+0x38>)
 8005f40:	4c0d      	ldr	r4, [pc, #52]	; (8005f78 <__libc_init_array+0x3c>)
 8005f42:	1b64      	subs	r4, r4, r5
 8005f44:	10a4      	asrs	r4, r4, #2
 8005f46:	2600      	movs	r6, #0
 8005f48:	42a6      	cmp	r6, r4
 8005f4a:	d109      	bne.n	8005f60 <__libc_init_array+0x24>
 8005f4c:	4d0b      	ldr	r5, [pc, #44]	; (8005f7c <__libc_init_array+0x40>)
 8005f4e:	4c0c      	ldr	r4, [pc, #48]	; (8005f80 <__libc_init_array+0x44>)
 8005f50:	f001 f86c 	bl	800702c <_init>
 8005f54:	1b64      	subs	r4, r4, r5
 8005f56:	10a4      	asrs	r4, r4, #2
 8005f58:	2600      	movs	r6, #0
 8005f5a:	42a6      	cmp	r6, r4
 8005f5c:	d105      	bne.n	8005f6a <__libc_init_array+0x2e>
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
 8005f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f64:	4798      	blx	r3
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7ee      	b.n	8005f48 <__libc_init_array+0xc>
 8005f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6e:	4798      	blx	r3
 8005f70:	3601      	adds	r6, #1
 8005f72:	e7f2      	b.n	8005f5a <__libc_init_array+0x1e>
 8005f74:	08007248 	.word	0x08007248
 8005f78:	08007248 	.word	0x08007248
 8005f7c:	08007248 	.word	0x08007248
 8005f80:	0800724c 	.word	0x0800724c

08005f84 <memset>:
 8005f84:	4402      	add	r2, r0
 8005f86:	4603      	mov	r3, r0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d100      	bne.n	8005f8e <memset+0xa>
 8005f8c:	4770      	bx	lr
 8005f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f92:	e7f9      	b.n	8005f88 <memset+0x4>
 8005f94:	0000      	movs	r0, r0
	...

08005f98 <sin>:
 8005f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f9a:	ec53 2b10 	vmov	r2, r3, d0
 8005f9e:	4828      	ldr	r0, [pc, #160]	; (8006040 <sin+0xa8>)
 8005fa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005fa4:	4281      	cmp	r1, r0
 8005fa6:	dc07      	bgt.n	8005fb8 <sin+0x20>
 8005fa8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006038 <sin+0xa0>
 8005fac:	2000      	movs	r0, #0
 8005fae:	b005      	add	sp, #20
 8005fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fb4:	f000 be6c 	b.w	8006c90 <__kernel_sin>
 8005fb8:	4822      	ldr	r0, [pc, #136]	; (8006044 <sin+0xac>)
 8005fba:	4281      	cmp	r1, r0
 8005fbc:	dd09      	ble.n	8005fd2 <sin+0x3a>
 8005fbe:	ee10 0a10 	vmov	r0, s0
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f7fa f918 	bl	80001f8 <__aeabi_dsub>
 8005fc8:	ec41 0b10 	vmov	d0, r0, r1
 8005fcc:	b005      	add	sp, #20
 8005fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fd2:	4668      	mov	r0, sp
 8005fd4:	f000 f838 	bl	8006048 <__ieee754_rem_pio2>
 8005fd8:	f000 0003 	and.w	r0, r0, #3
 8005fdc:	2801      	cmp	r0, #1
 8005fde:	d00c      	beq.n	8005ffa <sin+0x62>
 8005fe0:	2802      	cmp	r0, #2
 8005fe2:	d011      	beq.n	8006008 <sin+0x70>
 8005fe4:	b9f0      	cbnz	r0, 8006024 <sin+0x8c>
 8005fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005fea:	ed9d 0b00 	vldr	d0, [sp]
 8005fee:	2001      	movs	r0, #1
 8005ff0:	f000 fe4e 	bl	8006c90 <__kernel_sin>
 8005ff4:	ec51 0b10 	vmov	r0, r1, d0
 8005ff8:	e7e6      	b.n	8005fc8 <sin+0x30>
 8005ffa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ffe:	ed9d 0b00 	vldr	d0, [sp]
 8006002:	f000 fa2d 	bl	8006460 <__kernel_cos>
 8006006:	e7f5      	b.n	8005ff4 <sin+0x5c>
 8006008:	ed9d 1b02 	vldr	d1, [sp, #8]
 800600c:	ed9d 0b00 	vldr	d0, [sp]
 8006010:	2001      	movs	r0, #1
 8006012:	f000 fe3d 	bl	8006c90 <__kernel_sin>
 8006016:	ec53 2b10 	vmov	r2, r3, d0
 800601a:	ee10 0a10 	vmov	r0, s0
 800601e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006022:	e7d1      	b.n	8005fc8 <sin+0x30>
 8006024:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006028:	ed9d 0b00 	vldr	d0, [sp]
 800602c:	f000 fa18 	bl	8006460 <__kernel_cos>
 8006030:	e7f1      	b.n	8006016 <sin+0x7e>
 8006032:	bf00      	nop
 8006034:	f3af 8000 	nop.w
	...
 8006040:	3fe921fb 	.word	0x3fe921fb
 8006044:	7fefffff 	.word	0x7fefffff

08006048 <__ieee754_rem_pio2>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	ed2d 8b02 	vpush	{d8}
 8006050:	ec55 4b10 	vmov	r4, r5, d0
 8006054:	4bca      	ldr	r3, [pc, #808]	; (8006380 <__ieee754_rem_pio2+0x338>)
 8006056:	b08b      	sub	sp, #44	; 0x2c
 8006058:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800605c:	4598      	cmp	r8, r3
 800605e:	4682      	mov	sl, r0
 8006060:	9502      	str	r5, [sp, #8]
 8006062:	dc08      	bgt.n	8006076 <__ieee754_rem_pio2+0x2e>
 8006064:	2200      	movs	r2, #0
 8006066:	2300      	movs	r3, #0
 8006068:	ed80 0b00 	vstr	d0, [r0]
 800606c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006070:	f04f 0b00 	mov.w	fp, #0
 8006074:	e028      	b.n	80060c8 <__ieee754_rem_pio2+0x80>
 8006076:	4bc3      	ldr	r3, [pc, #780]	; (8006384 <__ieee754_rem_pio2+0x33c>)
 8006078:	4598      	cmp	r8, r3
 800607a:	dc78      	bgt.n	800616e <__ieee754_rem_pio2+0x126>
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	4ec2      	ldr	r6, [pc, #776]	; (8006388 <__ieee754_rem_pio2+0x340>)
 8006080:	2b00      	cmp	r3, #0
 8006082:	ee10 0a10 	vmov	r0, s0
 8006086:	a3b0      	add	r3, pc, #704	; (adr r3, 8006348 <__ieee754_rem_pio2+0x300>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	4629      	mov	r1, r5
 800608e:	dd39      	ble.n	8006104 <__ieee754_rem_pio2+0xbc>
 8006090:	f7fa f8b2 	bl	80001f8 <__aeabi_dsub>
 8006094:	45b0      	cmp	r8, r6
 8006096:	4604      	mov	r4, r0
 8006098:	460d      	mov	r5, r1
 800609a:	d01b      	beq.n	80060d4 <__ieee754_rem_pio2+0x8c>
 800609c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006350 <__ieee754_rem_pio2+0x308>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	f7fa f8a9 	bl	80001f8 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	e9ca 2300 	strd	r2, r3, [sl]
 80060ae:	4620      	mov	r0, r4
 80060b0:	4629      	mov	r1, r5
 80060b2:	f7fa f8a1 	bl	80001f8 <__aeabi_dsub>
 80060b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006350 <__ieee754_rem_pio2+0x308>)
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f7fa f89c 	bl	80001f8 <__aeabi_dsub>
 80060c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80060c4:	f04f 0b01 	mov.w	fp, #1
 80060c8:	4658      	mov	r0, fp
 80060ca:	b00b      	add	sp, #44	; 0x2c
 80060cc:	ecbd 8b02 	vpop	{d8}
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006358 <__ieee754_rem_pio2+0x310>)
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f7fa f88d 	bl	80001f8 <__aeabi_dsub>
 80060de:	a3a0      	add	r3, pc, #640	; (adr r3, 8006360 <__ieee754_rem_pio2+0x318>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	4604      	mov	r4, r0
 80060e6:	460d      	mov	r5, r1
 80060e8:	f7fa f886 	bl	80001f8 <__aeabi_dsub>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	e9ca 2300 	strd	r2, r3, [sl]
 80060f4:	4620      	mov	r0, r4
 80060f6:	4629      	mov	r1, r5
 80060f8:	f7fa f87e 	bl	80001f8 <__aeabi_dsub>
 80060fc:	a398      	add	r3, pc, #608	; (adr r3, 8006360 <__ieee754_rem_pio2+0x318>)
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	e7db      	b.n	80060bc <__ieee754_rem_pio2+0x74>
 8006104:	f7fa f87a 	bl	80001fc <__adddf3>
 8006108:	45b0      	cmp	r8, r6
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	d016      	beq.n	800613e <__ieee754_rem_pio2+0xf6>
 8006110:	a38f      	add	r3, pc, #572	; (adr r3, 8006350 <__ieee754_rem_pio2+0x308>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fa f871 	bl	80001fc <__adddf3>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	e9ca 2300 	strd	r2, r3, [sl]
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f7fa f867 	bl	80001f8 <__aeabi_dsub>
 800612a:	a389      	add	r3, pc, #548	; (adr r3, 8006350 <__ieee754_rem_pio2+0x308>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f7fa f864 	bl	80001fc <__adddf3>
 8006134:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006138:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800613c:	e7c4      	b.n	80060c8 <__ieee754_rem_pio2+0x80>
 800613e:	a386      	add	r3, pc, #536	; (adr r3, 8006358 <__ieee754_rem_pio2+0x310>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa f85a 	bl	80001fc <__adddf3>
 8006148:	a385      	add	r3, pc, #532	; (adr r3, 8006360 <__ieee754_rem_pio2+0x318>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	4604      	mov	r4, r0
 8006150:	460d      	mov	r5, r1
 8006152:	f7fa f853 	bl	80001fc <__adddf3>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9ca 2300 	strd	r2, r3, [sl]
 800615e:	4620      	mov	r0, r4
 8006160:	4629      	mov	r1, r5
 8006162:	f7fa f849 	bl	80001f8 <__aeabi_dsub>
 8006166:	a37e      	add	r3, pc, #504	; (adr r3, 8006360 <__ieee754_rem_pio2+0x318>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	e7e0      	b.n	8006130 <__ieee754_rem_pio2+0xe8>
 800616e:	4b87      	ldr	r3, [pc, #540]	; (800638c <__ieee754_rem_pio2+0x344>)
 8006170:	4598      	cmp	r8, r3
 8006172:	f300 80d9 	bgt.w	8006328 <__ieee754_rem_pio2+0x2e0>
 8006176:	f000 fe49 	bl	8006e0c <fabs>
 800617a:	ec55 4b10 	vmov	r4, r5, d0
 800617e:	ee10 0a10 	vmov	r0, s0
 8006182:	a379      	add	r3, pc, #484	; (adr r3, 8006368 <__ieee754_rem_pio2+0x320>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa f9ed 	bl	8000568 <__aeabi_dmul>
 800618e:	4b80      	ldr	r3, [pc, #512]	; (8006390 <__ieee754_rem_pio2+0x348>)
 8006190:	2200      	movs	r2, #0
 8006192:	f7fa f833 	bl	80001fc <__adddf3>
 8006196:	f7fa fc81 	bl	8000a9c <__aeabi_d2iz>
 800619a:	4683      	mov	fp, r0
 800619c:	f7fa f97a 	bl	8000494 <__aeabi_i2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	ec43 2b18 	vmov	d8, r2, r3
 80061a8:	a367      	add	r3, pc, #412	; (adr r3, 8006348 <__ieee754_rem_pio2+0x300>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa f9db 	bl	8000568 <__aeabi_dmul>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa f81d 	bl	80001f8 <__aeabi_dsub>
 80061be:	a364      	add	r3, pc, #400	; (adr r3, 8006350 <__ieee754_rem_pio2+0x308>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	4606      	mov	r6, r0
 80061c6:	460f      	mov	r7, r1
 80061c8:	ec51 0b18 	vmov	r0, r1, d8
 80061cc:	f7fa f9cc 	bl	8000568 <__aeabi_dmul>
 80061d0:	f1bb 0f1f 	cmp.w	fp, #31
 80061d4:	4604      	mov	r4, r0
 80061d6:	460d      	mov	r5, r1
 80061d8:	dc0d      	bgt.n	80061f6 <__ieee754_rem_pio2+0x1ae>
 80061da:	4b6e      	ldr	r3, [pc, #440]	; (8006394 <__ieee754_rem_pio2+0x34c>)
 80061dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	4543      	cmp	r3, r8
 80061e6:	d006      	beq.n	80061f6 <__ieee754_rem_pio2+0x1ae>
 80061e8:	4622      	mov	r2, r4
 80061ea:	462b      	mov	r3, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	4639      	mov	r1, r7
 80061f0:	f7fa f802 	bl	80001f8 <__aeabi_dsub>
 80061f4:	e00f      	b.n	8006216 <__ieee754_rem_pio2+0x1ce>
 80061f6:	462b      	mov	r3, r5
 80061f8:	4622      	mov	r2, r4
 80061fa:	4630      	mov	r0, r6
 80061fc:	4639      	mov	r1, r7
 80061fe:	f7f9 fffb 	bl	80001f8 <__aeabi_dsub>
 8006202:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800620c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006210:	f1b8 0f10 	cmp.w	r8, #16
 8006214:	dc02      	bgt.n	800621c <__ieee754_rem_pio2+0x1d4>
 8006216:	e9ca 0100 	strd	r0, r1, [sl]
 800621a:	e039      	b.n	8006290 <__ieee754_rem_pio2+0x248>
 800621c:	a34e      	add	r3, pc, #312	; (adr r3, 8006358 <__ieee754_rem_pio2+0x310>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	ec51 0b18 	vmov	r0, r1, d8
 8006226:	f7fa f99f 	bl	8000568 <__aeabi_dmul>
 800622a:	4604      	mov	r4, r0
 800622c:	460d      	mov	r5, r1
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4630      	mov	r0, r6
 8006234:	4639      	mov	r1, r7
 8006236:	f7f9 ffdf 	bl	80001f8 <__aeabi_dsub>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4680      	mov	r8, r0
 8006240:	4689      	mov	r9, r1
 8006242:	4630      	mov	r0, r6
 8006244:	4639      	mov	r1, r7
 8006246:	f7f9 ffd7 	bl	80001f8 <__aeabi_dsub>
 800624a:	4622      	mov	r2, r4
 800624c:	462b      	mov	r3, r5
 800624e:	f7f9 ffd3 	bl	80001f8 <__aeabi_dsub>
 8006252:	a343      	add	r3, pc, #268	; (adr r3, 8006360 <__ieee754_rem_pio2+0x318>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	4604      	mov	r4, r0
 800625a:	460d      	mov	r5, r1
 800625c:	ec51 0b18 	vmov	r0, r1, d8
 8006260:	f7fa f982 	bl	8000568 <__aeabi_dmul>
 8006264:	4622      	mov	r2, r4
 8006266:	462b      	mov	r3, r5
 8006268:	f7f9 ffc6 	bl	80001f8 <__aeabi_dsub>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4604      	mov	r4, r0
 8006272:	460d      	mov	r5, r1
 8006274:	4640      	mov	r0, r8
 8006276:	4649      	mov	r1, r9
 8006278:	f7f9 ffbe 	bl	80001f8 <__aeabi_dsub>
 800627c:	9a03      	ldr	r2, [sp, #12]
 800627e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b31      	cmp	r3, #49	; 0x31
 8006286:	dc24      	bgt.n	80062d2 <__ieee754_rem_pio2+0x28a>
 8006288:	e9ca 0100 	strd	r0, r1, [sl]
 800628c:	4646      	mov	r6, r8
 800628e:	464f      	mov	r7, r9
 8006290:	e9da 8900 	ldrd	r8, r9, [sl]
 8006294:	4630      	mov	r0, r6
 8006296:	4642      	mov	r2, r8
 8006298:	464b      	mov	r3, r9
 800629a:	4639      	mov	r1, r7
 800629c:	f7f9 ffac 	bl	80001f8 <__aeabi_dsub>
 80062a0:	462b      	mov	r3, r5
 80062a2:	4622      	mov	r2, r4
 80062a4:	f7f9 ffa8 	bl	80001f8 <__aeabi_dsub>
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80062b0:	f6bf af0a 	bge.w	80060c8 <__ieee754_rem_pio2+0x80>
 80062b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062b8:	f8ca 3004 	str.w	r3, [sl, #4]
 80062bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062c0:	f8ca 8000 	str.w	r8, [sl]
 80062c4:	f8ca 0008 	str.w	r0, [sl, #8]
 80062c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80062cc:	f1cb 0b00 	rsb	fp, fp, #0
 80062d0:	e6fa      	b.n	80060c8 <__ieee754_rem_pio2+0x80>
 80062d2:	a327      	add	r3, pc, #156	; (adr r3, 8006370 <__ieee754_rem_pio2+0x328>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	ec51 0b18 	vmov	r0, r1, d8
 80062dc:	f7fa f944 	bl	8000568 <__aeabi_dmul>
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4640      	mov	r0, r8
 80062ea:	4649      	mov	r1, r9
 80062ec:	f7f9 ff84 	bl	80001f8 <__aeabi_dsub>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4606      	mov	r6, r0
 80062f6:	460f      	mov	r7, r1
 80062f8:	4640      	mov	r0, r8
 80062fa:	4649      	mov	r1, r9
 80062fc:	f7f9 ff7c 	bl	80001f8 <__aeabi_dsub>
 8006300:	4622      	mov	r2, r4
 8006302:	462b      	mov	r3, r5
 8006304:	f7f9 ff78 	bl	80001f8 <__aeabi_dsub>
 8006308:	a31b      	add	r3, pc, #108	; (adr r3, 8006378 <__ieee754_rem_pio2+0x330>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	4604      	mov	r4, r0
 8006310:	460d      	mov	r5, r1
 8006312:	ec51 0b18 	vmov	r0, r1, d8
 8006316:	f7fa f927 	bl	8000568 <__aeabi_dmul>
 800631a:	4622      	mov	r2, r4
 800631c:	462b      	mov	r3, r5
 800631e:	f7f9 ff6b 	bl	80001f8 <__aeabi_dsub>
 8006322:	4604      	mov	r4, r0
 8006324:	460d      	mov	r5, r1
 8006326:	e75f      	b.n	80061e8 <__ieee754_rem_pio2+0x1a0>
 8006328:	4b1b      	ldr	r3, [pc, #108]	; (8006398 <__ieee754_rem_pio2+0x350>)
 800632a:	4598      	cmp	r8, r3
 800632c:	dd36      	ble.n	800639c <__ieee754_rem_pio2+0x354>
 800632e:	ee10 2a10 	vmov	r2, s0
 8006332:	462b      	mov	r3, r5
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7f9 ff5e 	bl	80001f8 <__aeabi_dsub>
 800633c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006340:	e9ca 0100 	strd	r0, r1, [sl]
 8006344:	e694      	b.n	8006070 <__ieee754_rem_pio2+0x28>
 8006346:	bf00      	nop
 8006348:	54400000 	.word	0x54400000
 800634c:	3ff921fb 	.word	0x3ff921fb
 8006350:	1a626331 	.word	0x1a626331
 8006354:	3dd0b461 	.word	0x3dd0b461
 8006358:	1a600000 	.word	0x1a600000
 800635c:	3dd0b461 	.word	0x3dd0b461
 8006360:	2e037073 	.word	0x2e037073
 8006364:	3ba3198a 	.word	0x3ba3198a
 8006368:	6dc9c883 	.word	0x6dc9c883
 800636c:	3fe45f30 	.word	0x3fe45f30
 8006370:	2e000000 	.word	0x2e000000
 8006374:	3ba3198a 	.word	0x3ba3198a
 8006378:	252049c1 	.word	0x252049c1
 800637c:	397b839a 	.word	0x397b839a
 8006380:	3fe921fb 	.word	0x3fe921fb
 8006384:	4002d97b 	.word	0x4002d97b
 8006388:	3ff921fb 	.word	0x3ff921fb
 800638c:	413921fb 	.word	0x413921fb
 8006390:	3fe00000 	.word	0x3fe00000
 8006394:	08007068 	.word	0x08007068
 8006398:	7fefffff 	.word	0x7fefffff
 800639c:	ea4f 5428 	mov.w	r4, r8, asr #20
 80063a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80063a4:	ee10 0a10 	vmov	r0, s0
 80063a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80063ac:	ee10 6a10 	vmov	r6, s0
 80063b0:	460f      	mov	r7, r1
 80063b2:	f7fa fb73 	bl	8000a9c <__aeabi_d2iz>
 80063b6:	f7fa f86d 	bl	8000494 <__aeabi_i2d>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4630      	mov	r0, r6
 80063c0:	4639      	mov	r1, r7
 80063c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063c6:	f7f9 ff17 	bl	80001f8 <__aeabi_dsub>
 80063ca:	4b23      	ldr	r3, [pc, #140]	; (8006458 <__ieee754_rem_pio2+0x410>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	f7fa f8cb 	bl	8000568 <__aeabi_dmul>
 80063d2:	460f      	mov	r7, r1
 80063d4:	4606      	mov	r6, r0
 80063d6:	f7fa fb61 	bl	8000a9c <__aeabi_d2iz>
 80063da:	f7fa f85b 	bl	8000494 <__aeabi_i2d>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063ea:	f7f9 ff05 	bl	80001f8 <__aeabi_dsub>
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <__ieee754_rem_pio2+0x410>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	f7fa f8b9 	bl	8000568 <__aeabi_dmul>
 80063f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063fa:	ad04      	add	r5, sp, #16
 80063fc:	f04f 0803 	mov.w	r8, #3
 8006400:	46a9      	mov	r9, r5
 8006402:	2600      	movs	r6, #0
 8006404:	2700      	movs	r7, #0
 8006406:	4632      	mov	r2, r6
 8006408:	463b      	mov	r3, r7
 800640a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800640e:	46c3      	mov	fp, r8
 8006410:	3d08      	subs	r5, #8
 8006412:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006416:	f7fa fb0f 	bl	8000a38 <__aeabi_dcmpeq>
 800641a:	2800      	cmp	r0, #0
 800641c:	d1f3      	bne.n	8006406 <__ieee754_rem_pio2+0x3be>
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <__ieee754_rem_pio2+0x414>)
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	2302      	movs	r3, #2
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	4622      	mov	r2, r4
 8006428:	465b      	mov	r3, fp
 800642a:	4651      	mov	r1, sl
 800642c:	4648      	mov	r0, r9
 800642e:	f000 f8df 	bl	80065f0 <__kernel_rem_pio2>
 8006432:	9b02      	ldr	r3, [sp, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	4683      	mov	fp, r0
 8006438:	f6bf ae46 	bge.w	80060c8 <__ieee754_rem_pio2+0x80>
 800643c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006440:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006444:	e9ca 2300 	strd	r2, r3, [sl]
 8006448:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800644c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006450:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006454:	e73a      	b.n	80062cc <__ieee754_rem_pio2+0x284>
 8006456:	bf00      	nop
 8006458:	41700000 	.word	0x41700000
 800645c:	080070e8 	.word	0x080070e8

08006460 <__kernel_cos>:
 8006460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	ec57 6b10 	vmov	r6, r7, d0
 8006468:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800646c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006470:	ed8d 1b00 	vstr	d1, [sp]
 8006474:	da07      	bge.n	8006486 <__kernel_cos+0x26>
 8006476:	ee10 0a10 	vmov	r0, s0
 800647a:	4639      	mov	r1, r7
 800647c:	f7fa fb0e 	bl	8000a9c <__aeabi_d2iz>
 8006480:	2800      	cmp	r0, #0
 8006482:	f000 8088 	beq.w	8006596 <__kernel_cos+0x136>
 8006486:	4632      	mov	r2, r6
 8006488:	463b      	mov	r3, r7
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7fa f86b 	bl	8000568 <__aeabi_dmul>
 8006492:	4b51      	ldr	r3, [pc, #324]	; (80065d8 <__kernel_cos+0x178>)
 8006494:	2200      	movs	r2, #0
 8006496:	4604      	mov	r4, r0
 8006498:	460d      	mov	r5, r1
 800649a:	f7fa f865 	bl	8000568 <__aeabi_dmul>
 800649e:	a340      	add	r3, pc, #256	; (adr r3, 80065a0 <__kernel_cos+0x140>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	4682      	mov	sl, r0
 80064a6:	468b      	mov	fp, r1
 80064a8:	4620      	mov	r0, r4
 80064aa:	4629      	mov	r1, r5
 80064ac:	f7fa f85c 	bl	8000568 <__aeabi_dmul>
 80064b0:	a33d      	add	r3, pc, #244	; (adr r3, 80065a8 <__kernel_cos+0x148>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7f9 fea1 	bl	80001fc <__adddf3>
 80064ba:	4622      	mov	r2, r4
 80064bc:	462b      	mov	r3, r5
 80064be:	f7fa f853 	bl	8000568 <__aeabi_dmul>
 80064c2:	a33b      	add	r3, pc, #236	; (adr r3, 80065b0 <__kernel_cos+0x150>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7f9 fe96 	bl	80001f8 <__aeabi_dsub>
 80064cc:	4622      	mov	r2, r4
 80064ce:	462b      	mov	r3, r5
 80064d0:	f7fa f84a 	bl	8000568 <__aeabi_dmul>
 80064d4:	a338      	add	r3, pc, #224	; (adr r3, 80065b8 <__kernel_cos+0x158>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f7f9 fe8f 	bl	80001fc <__adddf3>
 80064de:	4622      	mov	r2, r4
 80064e0:	462b      	mov	r3, r5
 80064e2:	f7fa f841 	bl	8000568 <__aeabi_dmul>
 80064e6:	a336      	add	r3, pc, #216	; (adr r3, 80065c0 <__kernel_cos+0x160>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7f9 fe84 	bl	80001f8 <__aeabi_dsub>
 80064f0:	4622      	mov	r2, r4
 80064f2:	462b      	mov	r3, r5
 80064f4:	f7fa f838 	bl	8000568 <__aeabi_dmul>
 80064f8:	a333      	add	r3, pc, #204	; (adr r3, 80065c8 <__kernel_cos+0x168>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7f9 fe7d 	bl	80001fc <__adddf3>
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	f7fa f82f 	bl	8000568 <__aeabi_dmul>
 800650a:	4622      	mov	r2, r4
 800650c:	462b      	mov	r3, r5
 800650e:	f7fa f82b 	bl	8000568 <__aeabi_dmul>
 8006512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006516:	4604      	mov	r4, r0
 8006518:	460d      	mov	r5, r1
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7fa f823 	bl	8000568 <__aeabi_dmul>
 8006522:	460b      	mov	r3, r1
 8006524:	4602      	mov	r2, r0
 8006526:	4629      	mov	r1, r5
 8006528:	4620      	mov	r0, r4
 800652a:	f7f9 fe65 	bl	80001f8 <__aeabi_dsub>
 800652e:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <__kernel_cos+0x17c>)
 8006530:	4598      	cmp	r8, r3
 8006532:	4606      	mov	r6, r0
 8006534:	460f      	mov	r7, r1
 8006536:	dc10      	bgt.n	800655a <__kernel_cos+0xfa>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4650      	mov	r0, sl
 800653e:	4659      	mov	r1, fp
 8006540:	f7f9 fe5a 	bl	80001f8 <__aeabi_dsub>
 8006544:	460b      	mov	r3, r1
 8006546:	4926      	ldr	r1, [pc, #152]	; (80065e0 <__kernel_cos+0x180>)
 8006548:	4602      	mov	r2, r0
 800654a:	2000      	movs	r0, #0
 800654c:	f7f9 fe54 	bl	80001f8 <__aeabi_dsub>
 8006550:	ec41 0b10 	vmov	d0, r0, r1
 8006554:	b003      	add	sp, #12
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	4b22      	ldr	r3, [pc, #136]	; (80065e4 <__kernel_cos+0x184>)
 800655c:	4920      	ldr	r1, [pc, #128]	; (80065e0 <__kernel_cos+0x180>)
 800655e:	4598      	cmp	r8, r3
 8006560:	bfcc      	ite	gt
 8006562:	4d21      	ldrgt	r5, [pc, #132]	; (80065e8 <__kernel_cos+0x188>)
 8006564:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006568:	2400      	movs	r4, #0
 800656a:	4622      	mov	r2, r4
 800656c:	462b      	mov	r3, r5
 800656e:	2000      	movs	r0, #0
 8006570:	f7f9 fe42 	bl	80001f8 <__aeabi_dsub>
 8006574:	4622      	mov	r2, r4
 8006576:	4680      	mov	r8, r0
 8006578:	4689      	mov	r9, r1
 800657a:	462b      	mov	r3, r5
 800657c:	4650      	mov	r0, sl
 800657e:	4659      	mov	r1, fp
 8006580:	f7f9 fe3a 	bl	80001f8 <__aeabi_dsub>
 8006584:	4632      	mov	r2, r6
 8006586:	463b      	mov	r3, r7
 8006588:	f7f9 fe36 	bl	80001f8 <__aeabi_dsub>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4640      	mov	r0, r8
 8006592:	4649      	mov	r1, r9
 8006594:	e7da      	b.n	800654c <__kernel_cos+0xec>
 8006596:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80065d0 <__kernel_cos+0x170>
 800659a:	e7db      	b.n	8006554 <__kernel_cos+0xf4>
 800659c:	f3af 8000 	nop.w
 80065a0:	be8838d4 	.word	0xbe8838d4
 80065a4:	bda8fae9 	.word	0xbda8fae9
 80065a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80065ac:	3e21ee9e 	.word	0x3e21ee9e
 80065b0:	809c52ad 	.word	0x809c52ad
 80065b4:	3e927e4f 	.word	0x3e927e4f
 80065b8:	19cb1590 	.word	0x19cb1590
 80065bc:	3efa01a0 	.word	0x3efa01a0
 80065c0:	16c15177 	.word	0x16c15177
 80065c4:	3f56c16c 	.word	0x3f56c16c
 80065c8:	5555554c 	.word	0x5555554c
 80065cc:	3fa55555 	.word	0x3fa55555
 80065d0:	00000000 	.word	0x00000000
 80065d4:	3ff00000 	.word	0x3ff00000
 80065d8:	3fe00000 	.word	0x3fe00000
 80065dc:	3fd33332 	.word	0x3fd33332
 80065e0:	3ff00000 	.word	0x3ff00000
 80065e4:	3fe90000 	.word	0x3fe90000
 80065e8:	3fd20000 	.word	0x3fd20000
 80065ec:	00000000 	.word	0x00000000

080065f0 <__kernel_rem_pio2>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	ed2d 8b02 	vpush	{d8}
 80065f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80065fc:	f112 0f14 	cmn.w	r2, #20
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	9101      	str	r1, [sp, #4]
 8006604:	4bc4      	ldr	r3, [pc, #784]	; (8006918 <__kernel_rem_pio2+0x328>)
 8006606:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006608:	900b      	str	r0, [sp, #44]	; 0x2c
 800660a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800660e:	9302      	str	r3, [sp, #8]
 8006610:	9b08      	ldr	r3, [sp, #32]
 8006612:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006616:	bfa8      	it	ge
 8006618:	1ed4      	subge	r4, r2, #3
 800661a:	9306      	str	r3, [sp, #24]
 800661c:	bfb2      	itee	lt
 800661e:	2400      	movlt	r4, #0
 8006620:	2318      	movge	r3, #24
 8006622:	fb94 f4f3 	sdivge	r4, r4, r3
 8006626:	f06f 0317 	mvn.w	r3, #23
 800662a:	fb04 3303 	mla	r3, r4, r3, r3
 800662e:	eb03 0a02 	add.w	sl, r3, r2
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	9a06      	ldr	r2, [sp, #24]
 8006636:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006908 <__kernel_rem_pio2+0x318>
 800663a:	eb03 0802 	add.w	r8, r3, r2
 800663e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006640:	1aa7      	subs	r7, r4, r2
 8006642:	ae22      	add	r6, sp, #136	; 0x88
 8006644:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006648:	2500      	movs	r5, #0
 800664a:	4545      	cmp	r5, r8
 800664c:	dd13      	ble.n	8006676 <__kernel_rem_pio2+0x86>
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006908 <__kernel_rem_pio2+0x318>
 8006654:	aa22      	add	r2, sp, #136	; 0x88
 8006656:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800665a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	9b02      	ldr	r3, [sp, #8]
 8006664:	4598      	cmp	r8, r3
 8006666:	dc2f      	bgt.n	80066c8 <__kernel_rem_pio2+0xd8>
 8006668:	ed8d 8b04 	vstr	d8, [sp, #16]
 800666c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006670:	462f      	mov	r7, r5
 8006672:	2600      	movs	r6, #0
 8006674:	e01b      	b.n	80066ae <__kernel_rem_pio2+0xbe>
 8006676:	42ef      	cmn	r7, r5
 8006678:	d407      	bmi.n	800668a <__kernel_rem_pio2+0x9a>
 800667a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800667e:	f7f9 ff09 	bl	8000494 <__aeabi_i2d>
 8006682:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006686:	3501      	adds	r5, #1
 8006688:	e7df      	b.n	800664a <__kernel_rem_pio2+0x5a>
 800668a:	ec51 0b18 	vmov	r0, r1, d8
 800668e:	e7f8      	b.n	8006682 <__kernel_rem_pio2+0x92>
 8006690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006694:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006698:	f7f9 ff66 	bl	8000568 <__aeabi_dmul>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066a4:	f7f9 fdaa 	bl	80001fc <__adddf3>
 80066a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066ac:	3601      	adds	r6, #1
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	429e      	cmp	r6, r3
 80066b2:	f1a7 0708 	sub.w	r7, r7, #8
 80066b6:	ddeb      	ble.n	8006690 <__kernel_rem_pio2+0xa0>
 80066b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80066bc:	f108 0801 	add.w	r8, r8, #1
 80066c0:	ecab 7b02 	vstmia	fp!, {d7}
 80066c4:	3508      	adds	r5, #8
 80066c6:	e7cc      	b.n	8006662 <__kernel_rem_pio2+0x72>
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	aa0e      	add	r2, sp, #56	; 0x38
 80066cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066d0:	930d      	str	r3, [sp, #52]	; 0x34
 80066d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80066d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80066d8:	9c02      	ldr	r4, [sp, #8]
 80066da:	930c      	str	r3, [sp, #48]	; 0x30
 80066dc:	00e3      	lsls	r3, r4, #3
 80066de:	930a      	str	r3, [sp, #40]	; 0x28
 80066e0:	ab9a      	add	r3, sp, #616	; 0x268
 80066e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80066ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80066ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80066f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80066f4:	46c3      	mov	fp, r8
 80066f6:	46a1      	mov	r9, r4
 80066f8:	f1b9 0f00 	cmp.w	r9, #0
 80066fc:	f1a5 0508 	sub.w	r5, r5, #8
 8006700:	dc77      	bgt.n	80067f2 <__kernel_rem_pio2+0x202>
 8006702:	ec47 6b10 	vmov	d0, r6, r7
 8006706:	4650      	mov	r0, sl
 8006708:	f000 fc0a 	bl	8006f20 <scalbn>
 800670c:	ec57 6b10 	vmov	r6, r7, d0
 8006710:	2200      	movs	r2, #0
 8006712:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006716:	ee10 0a10 	vmov	r0, s0
 800671a:	4639      	mov	r1, r7
 800671c:	f7f9 ff24 	bl	8000568 <__aeabi_dmul>
 8006720:	ec41 0b10 	vmov	d0, r0, r1
 8006724:	f000 fb7c 	bl	8006e20 <floor>
 8006728:	4b7c      	ldr	r3, [pc, #496]	; (800691c <__kernel_rem_pio2+0x32c>)
 800672a:	ec51 0b10 	vmov	r0, r1, d0
 800672e:	2200      	movs	r2, #0
 8006730:	f7f9 ff1a 	bl	8000568 <__aeabi_dmul>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4630      	mov	r0, r6
 800673a:	4639      	mov	r1, r7
 800673c:	f7f9 fd5c 	bl	80001f8 <__aeabi_dsub>
 8006740:	460f      	mov	r7, r1
 8006742:	4606      	mov	r6, r0
 8006744:	f7fa f9aa 	bl	8000a9c <__aeabi_d2iz>
 8006748:	9004      	str	r0, [sp, #16]
 800674a:	f7f9 fea3 	bl	8000494 <__aeabi_i2d>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4630      	mov	r0, r6
 8006754:	4639      	mov	r1, r7
 8006756:	f7f9 fd4f 	bl	80001f8 <__aeabi_dsub>
 800675a:	f1ba 0f00 	cmp.w	sl, #0
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	dd6d      	ble.n	8006840 <__kernel_rem_pio2+0x250>
 8006764:	1e62      	subs	r2, r4, #1
 8006766:	ab0e      	add	r3, sp, #56	; 0x38
 8006768:	9d04      	ldr	r5, [sp, #16]
 800676a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800676e:	f1ca 0118 	rsb	r1, sl, #24
 8006772:	fa40 f301 	asr.w	r3, r0, r1
 8006776:	441d      	add	r5, r3
 8006778:	408b      	lsls	r3, r1
 800677a:	1ac0      	subs	r0, r0, r3
 800677c:	ab0e      	add	r3, sp, #56	; 0x38
 800677e:	9504      	str	r5, [sp, #16]
 8006780:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006784:	f1ca 0317 	rsb	r3, sl, #23
 8006788:	fa40 fb03 	asr.w	fp, r0, r3
 800678c:	f1bb 0f00 	cmp.w	fp, #0
 8006790:	dd65      	ble.n	800685e <__kernel_rem_pio2+0x26e>
 8006792:	9b04      	ldr	r3, [sp, #16]
 8006794:	2200      	movs	r2, #0
 8006796:	3301      	adds	r3, #1
 8006798:	9304      	str	r3, [sp, #16]
 800679a:	4615      	mov	r5, r2
 800679c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80067a0:	4294      	cmp	r4, r2
 80067a2:	f300 809c 	bgt.w	80068de <__kernel_rem_pio2+0x2ee>
 80067a6:	f1ba 0f00 	cmp.w	sl, #0
 80067aa:	dd07      	ble.n	80067bc <__kernel_rem_pio2+0x1cc>
 80067ac:	f1ba 0f01 	cmp.w	sl, #1
 80067b0:	f000 80c0 	beq.w	8006934 <__kernel_rem_pio2+0x344>
 80067b4:	f1ba 0f02 	cmp.w	sl, #2
 80067b8:	f000 80c6 	beq.w	8006948 <__kernel_rem_pio2+0x358>
 80067bc:	f1bb 0f02 	cmp.w	fp, #2
 80067c0:	d14d      	bne.n	800685e <__kernel_rem_pio2+0x26e>
 80067c2:	4632      	mov	r2, r6
 80067c4:	463b      	mov	r3, r7
 80067c6:	4956      	ldr	r1, [pc, #344]	; (8006920 <__kernel_rem_pio2+0x330>)
 80067c8:	2000      	movs	r0, #0
 80067ca:	f7f9 fd15 	bl	80001f8 <__aeabi_dsub>
 80067ce:	4606      	mov	r6, r0
 80067d0:	460f      	mov	r7, r1
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	d043      	beq.n	800685e <__kernel_rem_pio2+0x26e>
 80067d6:	4650      	mov	r0, sl
 80067d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006910 <__kernel_rem_pio2+0x320>
 80067dc:	f000 fba0 	bl	8006f20 <scalbn>
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	ec53 2b10 	vmov	r2, r3, d0
 80067e8:	f7f9 fd06 	bl	80001f8 <__aeabi_dsub>
 80067ec:	4606      	mov	r6, r0
 80067ee:	460f      	mov	r7, r1
 80067f0:	e035      	b.n	800685e <__kernel_rem_pio2+0x26e>
 80067f2:	4b4c      	ldr	r3, [pc, #304]	; (8006924 <__kernel_rem_pio2+0x334>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7f9 feb5 	bl	8000568 <__aeabi_dmul>
 80067fe:	f7fa f94d 	bl	8000a9c <__aeabi_d2iz>
 8006802:	f7f9 fe47 	bl	8000494 <__aeabi_i2d>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	ec43 2b18 	vmov	d8, r2, r3
 800680e:	4b46      	ldr	r3, [pc, #280]	; (8006928 <__kernel_rem_pio2+0x338>)
 8006810:	2200      	movs	r2, #0
 8006812:	f7f9 fea9 	bl	8000568 <__aeabi_dmul>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4630      	mov	r0, r6
 800681c:	4639      	mov	r1, r7
 800681e:	f7f9 fceb 	bl	80001f8 <__aeabi_dsub>
 8006822:	f7fa f93b 	bl	8000a9c <__aeabi_d2iz>
 8006826:	e9d5 2300 	ldrd	r2, r3, [r5]
 800682a:	f84b 0b04 	str.w	r0, [fp], #4
 800682e:	ec51 0b18 	vmov	r0, r1, d8
 8006832:	f7f9 fce3 	bl	80001fc <__adddf3>
 8006836:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	e75b      	b.n	80066f8 <__kernel_rem_pio2+0x108>
 8006840:	d106      	bne.n	8006850 <__kernel_rem_pio2+0x260>
 8006842:	1e63      	subs	r3, r4, #1
 8006844:	aa0e      	add	r2, sp, #56	; 0x38
 8006846:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800684a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800684e:	e79d      	b.n	800678c <__kernel_rem_pio2+0x19c>
 8006850:	4b36      	ldr	r3, [pc, #216]	; (800692c <__kernel_rem_pio2+0x33c>)
 8006852:	2200      	movs	r2, #0
 8006854:	f7fa f90e 	bl	8000a74 <__aeabi_dcmpge>
 8006858:	2800      	cmp	r0, #0
 800685a:	d13d      	bne.n	80068d8 <__kernel_rem_pio2+0x2e8>
 800685c:	4683      	mov	fp, r0
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7fa f8e7 	bl	8000a38 <__aeabi_dcmpeq>
 800686a:	2800      	cmp	r0, #0
 800686c:	f000 80c0 	beq.w	80069f0 <__kernel_rem_pio2+0x400>
 8006870:	1e65      	subs	r5, r4, #1
 8006872:	462b      	mov	r3, r5
 8006874:	2200      	movs	r2, #0
 8006876:	9902      	ldr	r1, [sp, #8]
 8006878:	428b      	cmp	r3, r1
 800687a:	da6c      	bge.n	8006956 <__kernel_rem_pio2+0x366>
 800687c:	2a00      	cmp	r2, #0
 800687e:	f000 8089 	beq.w	8006994 <__kernel_rem_pio2+0x3a4>
 8006882:	ab0e      	add	r3, sp, #56	; 0x38
 8006884:	f1aa 0a18 	sub.w	sl, sl, #24
 8006888:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80ad 	beq.w	80069ec <__kernel_rem_pio2+0x3fc>
 8006892:	4650      	mov	r0, sl
 8006894:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006910 <__kernel_rem_pio2+0x320>
 8006898:	f000 fb42 	bl	8006f20 <scalbn>
 800689c:	ab9a      	add	r3, sp, #616	; 0x268
 800689e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80068a2:	ec57 6b10 	vmov	r6, r7, d0
 80068a6:	00ec      	lsls	r4, r5, #3
 80068a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80068ac:	46aa      	mov	sl, r5
 80068ae:	f1ba 0f00 	cmp.w	sl, #0
 80068b2:	f280 80d6 	bge.w	8006a62 <__kernel_rem_pio2+0x472>
 80068b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006908 <__kernel_rem_pio2+0x318>
 80068ba:	462e      	mov	r6, r5
 80068bc:	2e00      	cmp	r6, #0
 80068be:	f2c0 8104 	blt.w	8006aca <__kernel_rem_pio2+0x4da>
 80068c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80068c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80068c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006930 <__kernel_rem_pio2+0x340>
 80068cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80068d0:	f04f 0800 	mov.w	r8, #0
 80068d4:	1baf      	subs	r7, r5, r6
 80068d6:	e0ea      	b.n	8006aae <__kernel_rem_pio2+0x4be>
 80068d8:	f04f 0b02 	mov.w	fp, #2
 80068dc:	e759      	b.n	8006792 <__kernel_rem_pio2+0x1a2>
 80068de:	f8d8 3000 	ldr.w	r3, [r8]
 80068e2:	b955      	cbnz	r5, 80068fa <__kernel_rem_pio2+0x30a>
 80068e4:	b123      	cbz	r3, 80068f0 <__kernel_rem_pio2+0x300>
 80068e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80068ea:	f8c8 3000 	str.w	r3, [r8]
 80068ee:	2301      	movs	r3, #1
 80068f0:	3201      	adds	r2, #1
 80068f2:	f108 0804 	add.w	r8, r8, #4
 80068f6:	461d      	mov	r5, r3
 80068f8:	e752      	b.n	80067a0 <__kernel_rem_pio2+0x1b0>
 80068fa:	1acb      	subs	r3, r1, r3
 80068fc:	f8c8 3000 	str.w	r3, [r8]
 8006900:	462b      	mov	r3, r5
 8006902:	e7f5      	b.n	80068f0 <__kernel_rem_pio2+0x300>
 8006904:	f3af 8000 	nop.w
	...
 8006914:	3ff00000 	.word	0x3ff00000
 8006918:	08007230 	.word	0x08007230
 800691c:	40200000 	.word	0x40200000
 8006920:	3ff00000 	.word	0x3ff00000
 8006924:	3e700000 	.word	0x3e700000
 8006928:	41700000 	.word	0x41700000
 800692c:	3fe00000 	.word	0x3fe00000
 8006930:	080071f0 	.word	0x080071f0
 8006934:	1e62      	subs	r2, r4, #1
 8006936:	ab0e      	add	r3, sp, #56	; 0x38
 8006938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006940:	a90e      	add	r1, sp, #56	; 0x38
 8006942:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006946:	e739      	b.n	80067bc <__kernel_rem_pio2+0x1cc>
 8006948:	1e62      	subs	r2, r4, #1
 800694a:	ab0e      	add	r3, sp, #56	; 0x38
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006954:	e7f4      	b.n	8006940 <__kernel_rem_pio2+0x350>
 8006956:	a90e      	add	r1, sp, #56	; 0x38
 8006958:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800695c:	3b01      	subs	r3, #1
 800695e:	430a      	orrs	r2, r1
 8006960:	e789      	b.n	8006876 <__kernel_rem_pio2+0x286>
 8006962:	3301      	adds	r3, #1
 8006964:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006968:	2900      	cmp	r1, #0
 800696a:	d0fa      	beq.n	8006962 <__kernel_rem_pio2+0x372>
 800696c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800696e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006972:	446a      	add	r2, sp
 8006974:	3a98      	subs	r2, #152	; 0x98
 8006976:	920a      	str	r2, [sp, #40]	; 0x28
 8006978:	9a08      	ldr	r2, [sp, #32]
 800697a:	18e3      	adds	r3, r4, r3
 800697c:	18a5      	adds	r5, r4, r2
 800697e:	aa22      	add	r2, sp, #136	; 0x88
 8006980:	f104 0801 	add.w	r8, r4, #1
 8006984:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006988:	9304      	str	r3, [sp, #16]
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	4543      	cmp	r3, r8
 800698e:	da04      	bge.n	800699a <__kernel_rem_pio2+0x3aa>
 8006990:	461c      	mov	r4, r3
 8006992:	e6a3      	b.n	80066dc <__kernel_rem_pio2+0xec>
 8006994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006996:	2301      	movs	r3, #1
 8006998:	e7e4      	b.n	8006964 <__kernel_rem_pio2+0x374>
 800699a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800699c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80069a0:	f7f9 fd78 	bl	8000494 <__aeabi_i2d>
 80069a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80069a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069aa:	46ab      	mov	fp, r5
 80069ac:	461c      	mov	r4, r3
 80069ae:	f04f 0900 	mov.w	r9, #0
 80069b2:	2600      	movs	r6, #0
 80069b4:	2700      	movs	r7, #0
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	4599      	cmp	r9, r3
 80069ba:	dd06      	ble.n	80069ca <__kernel_rem_pio2+0x3da>
 80069bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069be:	e8e3 6702 	strd	r6, r7, [r3], #8
 80069c2:	f108 0801 	add.w	r8, r8, #1
 80069c6:	930a      	str	r3, [sp, #40]	; 0x28
 80069c8:	e7df      	b.n	800698a <__kernel_rem_pio2+0x39a>
 80069ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80069ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80069d2:	f7f9 fdc9 	bl	8000568 <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7f9 fc0d 	bl	80001fc <__adddf3>
 80069e2:	f109 0901 	add.w	r9, r9, #1
 80069e6:	4606      	mov	r6, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	e7e4      	b.n	80069b6 <__kernel_rem_pio2+0x3c6>
 80069ec:	3d01      	subs	r5, #1
 80069ee:	e748      	b.n	8006882 <__kernel_rem_pio2+0x292>
 80069f0:	ec47 6b10 	vmov	d0, r6, r7
 80069f4:	f1ca 0000 	rsb	r0, sl, #0
 80069f8:	f000 fa92 	bl	8006f20 <scalbn>
 80069fc:	ec57 6b10 	vmov	r6, r7, d0
 8006a00:	4ba0      	ldr	r3, [pc, #640]	; (8006c84 <__kernel_rem_pio2+0x694>)
 8006a02:	ee10 0a10 	vmov	r0, s0
 8006a06:	2200      	movs	r2, #0
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7fa f833 	bl	8000a74 <__aeabi_dcmpge>
 8006a0e:	b1f8      	cbz	r0, 8006a50 <__kernel_rem_pio2+0x460>
 8006a10:	4b9d      	ldr	r3, [pc, #628]	; (8006c88 <__kernel_rem_pio2+0x698>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	4630      	mov	r0, r6
 8006a16:	4639      	mov	r1, r7
 8006a18:	f7f9 fda6 	bl	8000568 <__aeabi_dmul>
 8006a1c:	f7fa f83e 	bl	8000a9c <__aeabi_d2iz>
 8006a20:	4680      	mov	r8, r0
 8006a22:	f7f9 fd37 	bl	8000494 <__aeabi_i2d>
 8006a26:	4b97      	ldr	r3, [pc, #604]	; (8006c84 <__kernel_rem_pio2+0x694>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7f9 fd9d 	bl	8000568 <__aeabi_dmul>
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4602      	mov	r2, r0
 8006a32:	4639      	mov	r1, r7
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7f9 fbdf 	bl	80001f8 <__aeabi_dsub>
 8006a3a:	f7fa f82f 	bl	8000a9c <__aeabi_d2iz>
 8006a3e:	1c65      	adds	r5, r4, #1
 8006a40:	ab0e      	add	r3, sp, #56	; 0x38
 8006a42:	f10a 0a18 	add.w	sl, sl, #24
 8006a46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006a4a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006a4e:	e720      	b.n	8006892 <__kernel_rem_pio2+0x2a2>
 8006a50:	4630      	mov	r0, r6
 8006a52:	4639      	mov	r1, r7
 8006a54:	f7fa f822 	bl	8000a9c <__aeabi_d2iz>
 8006a58:	ab0e      	add	r3, sp, #56	; 0x38
 8006a5a:	4625      	mov	r5, r4
 8006a5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006a60:	e717      	b.n	8006892 <__kernel_rem_pio2+0x2a2>
 8006a62:	ab0e      	add	r3, sp, #56	; 0x38
 8006a64:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006a68:	f7f9 fd14 	bl	8000494 <__aeabi_i2d>
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	463b      	mov	r3, r7
 8006a70:	f7f9 fd7a 	bl	8000568 <__aeabi_dmul>
 8006a74:	4b84      	ldr	r3, [pc, #528]	; (8006c88 <__kernel_rem_pio2+0x698>)
 8006a76:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fd72 	bl	8000568 <__aeabi_dmul>
 8006a84:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a88:	4606      	mov	r6, r0
 8006a8a:	460f      	mov	r7, r1
 8006a8c:	e70f      	b.n	80068ae <__kernel_rem_pio2+0x2be>
 8006a8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006a92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006a96:	f7f9 fd67 	bl	8000568 <__aeabi_dmul>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa2:	f7f9 fbab 	bl	80001fc <__adddf3>
 8006aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aaa:	f108 0801 	add.w	r8, r8, #1
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	4598      	cmp	r8, r3
 8006ab2:	dc01      	bgt.n	8006ab8 <__kernel_rem_pio2+0x4c8>
 8006ab4:	45b8      	cmp	r8, r7
 8006ab6:	ddea      	ble.n	8006a8e <__kernel_rem_pio2+0x49e>
 8006ab8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006abc:	ab4a      	add	r3, sp, #296	; 0x128
 8006abe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006ac2:	ed87 7b00 	vstr	d7, [r7]
 8006ac6:	3e01      	subs	r6, #1
 8006ac8:	e6f8      	b.n	80068bc <__kernel_rem_pio2+0x2cc>
 8006aca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	dc0b      	bgt.n	8006ae8 <__kernel_rem_pio2+0x4f8>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dc35      	bgt.n	8006b40 <__kernel_rem_pio2+0x550>
 8006ad4:	d059      	beq.n	8006b8a <__kernel_rem_pio2+0x59a>
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	f003 0007 	and.w	r0, r3, #7
 8006adc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006ae0:	ecbd 8b02 	vpop	{d8}
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d1f3      	bne.n	8006ad6 <__kernel_rem_pio2+0x4e6>
 8006aee:	ab4a      	add	r3, sp, #296	; 0x128
 8006af0:	4423      	add	r3, r4
 8006af2:	9306      	str	r3, [sp, #24]
 8006af4:	461c      	mov	r4, r3
 8006af6:	469a      	mov	sl, r3
 8006af8:	9502      	str	r5, [sp, #8]
 8006afa:	9b02      	ldr	r3, [sp, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f1aa 0a08 	sub.w	sl, sl, #8
 8006b02:	dc6b      	bgt.n	8006bdc <__kernel_rem_pio2+0x5ec>
 8006b04:	46aa      	mov	sl, r5
 8006b06:	f1ba 0f01 	cmp.w	sl, #1
 8006b0a:	f1a4 0408 	sub.w	r4, r4, #8
 8006b0e:	f300 8085 	bgt.w	8006c1c <__kernel_rem_pio2+0x62c>
 8006b12:	9c06      	ldr	r4, [sp, #24]
 8006b14:	2000      	movs	r0, #0
 8006b16:	3408      	adds	r4, #8
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2d01      	cmp	r5, #1
 8006b1c:	f300 809d 	bgt.w	8006c5a <__kernel_rem_pio2+0x66a>
 8006b20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006b24:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006b28:	f1bb 0f00 	cmp.w	fp, #0
 8006b2c:	f040 809b 	bne.w	8006c66 <__kernel_rem_pio2+0x676>
 8006b30:	9b01      	ldr	r3, [sp, #4]
 8006b32:	e9c3 5600 	strd	r5, r6, [r3]
 8006b36:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006b3a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006b3e:	e7ca      	b.n	8006ad6 <__kernel_rem_pio2+0x4e6>
 8006b40:	3408      	adds	r4, #8
 8006b42:	ab4a      	add	r3, sp, #296	; 0x128
 8006b44:	441c      	add	r4, r3
 8006b46:	462e      	mov	r6, r5
 8006b48:	2000      	movs	r0, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	2e00      	cmp	r6, #0
 8006b4e:	da36      	bge.n	8006bbe <__kernel_rem_pio2+0x5ce>
 8006b50:	f1bb 0f00 	cmp.w	fp, #0
 8006b54:	d039      	beq.n	8006bca <__kernel_rem_pio2+0x5da>
 8006b56:	4602      	mov	r2, r0
 8006b58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b5c:	9c01      	ldr	r4, [sp, #4]
 8006b5e:	e9c4 2300 	strd	r2, r3, [r4]
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006b6a:	f7f9 fb45 	bl	80001f8 <__aeabi_dsub>
 8006b6e:	ae4c      	add	r6, sp, #304	; 0x130
 8006b70:	2401      	movs	r4, #1
 8006b72:	42a5      	cmp	r5, r4
 8006b74:	da2c      	bge.n	8006bd0 <__kernel_rem_pio2+0x5e0>
 8006b76:	f1bb 0f00 	cmp.w	fp, #0
 8006b7a:	d002      	beq.n	8006b82 <__kernel_rem_pio2+0x592>
 8006b7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b80:	4619      	mov	r1, r3
 8006b82:	9b01      	ldr	r3, [sp, #4]
 8006b84:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006b88:	e7a5      	b.n	8006ad6 <__kernel_rem_pio2+0x4e6>
 8006b8a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006b8e:	eb0d 0403 	add.w	r4, sp, r3
 8006b92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006b96:	2000      	movs	r0, #0
 8006b98:	2100      	movs	r1, #0
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	da09      	bge.n	8006bb2 <__kernel_rem_pio2+0x5c2>
 8006b9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ba2:	d002      	beq.n	8006baa <__kernel_rem_pio2+0x5ba>
 8006ba4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ba8:	4619      	mov	r1, r3
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	e9c3 0100 	strd	r0, r1, [r3]
 8006bb0:	e791      	b.n	8006ad6 <__kernel_rem_pio2+0x4e6>
 8006bb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bb6:	f7f9 fb21 	bl	80001fc <__adddf3>
 8006bba:	3d01      	subs	r5, #1
 8006bbc:	e7ed      	b.n	8006b9a <__kernel_rem_pio2+0x5aa>
 8006bbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bc2:	f7f9 fb1b 	bl	80001fc <__adddf3>
 8006bc6:	3e01      	subs	r6, #1
 8006bc8:	e7c0      	b.n	8006b4c <__kernel_rem_pio2+0x55c>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	e7c5      	b.n	8006b5c <__kernel_rem_pio2+0x56c>
 8006bd0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006bd4:	f7f9 fb12 	bl	80001fc <__adddf3>
 8006bd8:	3401      	adds	r4, #1
 8006bda:	e7ca      	b.n	8006b72 <__kernel_rem_pio2+0x582>
 8006bdc:	e9da 8900 	ldrd	r8, r9, [sl]
 8006be0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006be4:	9b02      	ldr	r3, [sp, #8]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	4632      	mov	r2, r6
 8006bec:	463b      	mov	r3, r7
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	f7f9 fb03 	bl	80001fc <__adddf3>
 8006bf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4649      	mov	r1, r9
 8006c02:	f7f9 faf9 	bl	80001f8 <__aeabi_dsub>
 8006c06:	4632      	mov	r2, r6
 8006c08:	463b      	mov	r3, r7
 8006c0a:	f7f9 faf7 	bl	80001fc <__adddf3>
 8006c0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006c12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c16:	ed8a 7b00 	vstr	d7, [sl]
 8006c1a:	e76e      	b.n	8006afa <__kernel_rem_pio2+0x50a>
 8006c1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006c20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006c24:	4640      	mov	r0, r8
 8006c26:	4632      	mov	r2, r6
 8006c28:	463b      	mov	r3, r7
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	f7f9 fae6 	bl	80001fc <__adddf3>
 8006c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 fadc 	bl	80001f8 <__aeabi_dsub>
 8006c40:	4632      	mov	r2, r6
 8006c42:	463b      	mov	r3, r7
 8006c44:	f7f9 fada 	bl	80001fc <__adddf3>
 8006c48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c50:	ed84 7b00 	vstr	d7, [r4]
 8006c54:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006c58:	e755      	b.n	8006b06 <__kernel_rem_pio2+0x516>
 8006c5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c5e:	f7f9 facd 	bl	80001fc <__adddf3>
 8006c62:	3d01      	subs	r5, #1
 8006c64:	e759      	b.n	8006b1a <__kernel_rem_pio2+0x52a>
 8006c66:	9b01      	ldr	r3, [sp, #4]
 8006c68:	9a01      	ldr	r2, [sp, #4]
 8006c6a:	601d      	str	r5, [r3, #0]
 8006c6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006c70:	605c      	str	r4, [r3, #4]
 8006c72:	609f      	str	r7, [r3, #8]
 8006c74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006c78:	60d3      	str	r3, [r2, #12]
 8006c7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c7e:	6110      	str	r0, [r2, #16]
 8006c80:	6153      	str	r3, [r2, #20]
 8006c82:	e728      	b.n	8006ad6 <__kernel_rem_pio2+0x4e6>
 8006c84:	41700000 	.word	0x41700000
 8006c88:	3e700000 	.word	0x3e700000
 8006c8c:	00000000 	.word	0x00000000

08006c90 <__kernel_sin>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	ed2d 8b04 	vpush	{d8-d9}
 8006c98:	eeb0 8a41 	vmov.f32	s16, s2
 8006c9c:	eef0 8a61 	vmov.f32	s17, s3
 8006ca0:	ec55 4b10 	vmov	r4, r5, d0
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006caa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006cae:	9001      	str	r0, [sp, #4]
 8006cb0:	da06      	bge.n	8006cc0 <__kernel_sin+0x30>
 8006cb2:	ee10 0a10 	vmov	r0, s0
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	f7f9 fef0 	bl	8000a9c <__aeabi_d2iz>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d051      	beq.n	8006d64 <__kernel_sin+0xd4>
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	f7f9 fc4e 	bl	8000568 <__aeabi_dmul>
 8006ccc:	4682      	mov	sl, r0
 8006cce:	468b      	mov	fp, r1
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 fc46 	bl	8000568 <__aeabi_dmul>
 8006cdc:	a341      	add	r3, pc, #260	; (adr r3, 8006de4 <__kernel_sin+0x154>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4689      	mov	r9, r1
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	4659      	mov	r1, fp
 8006cea:	f7f9 fc3d 	bl	8000568 <__aeabi_dmul>
 8006cee:	a33f      	add	r3, pc, #252	; (adr r3, 8006dec <__kernel_sin+0x15c>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f7f9 fa80 	bl	80001f8 <__aeabi_dsub>
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	f7f9 fc34 	bl	8000568 <__aeabi_dmul>
 8006d00:	a33c      	add	r3, pc, #240	; (adr r3, 8006df4 <__kernel_sin+0x164>)
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f7f9 fa79 	bl	80001fc <__adddf3>
 8006d0a:	4652      	mov	r2, sl
 8006d0c:	465b      	mov	r3, fp
 8006d0e:	f7f9 fc2b 	bl	8000568 <__aeabi_dmul>
 8006d12:	a33a      	add	r3, pc, #232	; (adr r3, 8006dfc <__kernel_sin+0x16c>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f7f9 fa6e 	bl	80001f8 <__aeabi_dsub>
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	465b      	mov	r3, fp
 8006d20:	f7f9 fc22 	bl	8000568 <__aeabi_dmul>
 8006d24:	a337      	add	r3, pc, #220	; (adr r3, 8006e04 <__kernel_sin+0x174>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	f7f9 fa67 	bl	80001fc <__adddf3>
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	4606      	mov	r6, r0
 8006d32:	460f      	mov	r7, r1
 8006d34:	b9eb      	cbnz	r3, 8006d72 <__kernel_sin+0xe2>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	f7f9 fc13 	bl	8000568 <__aeabi_dmul>
 8006d42:	a325      	add	r3, pc, #148	; (adr r3, 8006dd8 <__kernel_sin+0x148>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 fa56 	bl	80001f8 <__aeabi_dsub>
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	f7f9 fc0a 	bl	8000568 <__aeabi_dmul>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4620      	mov	r0, r4
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	f7f9 fa4e 	bl	80001fc <__adddf3>
 8006d60:	4604      	mov	r4, r0
 8006d62:	460d      	mov	r5, r1
 8006d64:	ec45 4b10 	vmov	d0, r4, r5
 8006d68:	b003      	add	sp, #12
 8006d6a:	ecbd 8b04 	vpop	{d8-d9}
 8006d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d72:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <__kernel_sin+0x150>)
 8006d74:	ec51 0b18 	vmov	r0, r1, d8
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f7f9 fbf5 	bl	8000568 <__aeabi_dmul>
 8006d7e:	4632      	mov	r2, r6
 8006d80:	ec41 0b19 	vmov	d9, r0, r1
 8006d84:	463b      	mov	r3, r7
 8006d86:	4640      	mov	r0, r8
 8006d88:	4649      	mov	r1, r9
 8006d8a:	f7f9 fbed 	bl	8000568 <__aeabi_dmul>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	ec51 0b19 	vmov	r0, r1, d9
 8006d96:	f7f9 fa2f 	bl	80001f8 <__aeabi_dsub>
 8006d9a:	4652      	mov	r2, sl
 8006d9c:	465b      	mov	r3, fp
 8006d9e:	f7f9 fbe3 	bl	8000568 <__aeabi_dmul>
 8006da2:	ec53 2b18 	vmov	r2, r3, d8
 8006da6:	f7f9 fa27 	bl	80001f8 <__aeabi_dsub>
 8006daa:	a30b      	add	r3, pc, #44	; (adr r3, 8006dd8 <__kernel_sin+0x148>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	4606      	mov	r6, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	4640      	mov	r0, r8
 8006db6:	4649      	mov	r1, r9
 8006db8:	f7f9 fbd6 	bl	8000568 <__aeabi_dmul>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fa1a 	bl	80001fc <__adddf3>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 fa12 	bl	80001f8 <__aeabi_dsub>
 8006dd4:	e7c4      	b.n	8006d60 <__kernel_sin+0xd0>
 8006dd6:	bf00      	nop
 8006dd8:	55555549 	.word	0x55555549
 8006ddc:	3fc55555 	.word	0x3fc55555
 8006de0:	3fe00000 	.word	0x3fe00000
 8006de4:	5acfd57c 	.word	0x5acfd57c
 8006de8:	3de5d93a 	.word	0x3de5d93a
 8006dec:	8a2b9ceb 	.word	0x8a2b9ceb
 8006df0:	3e5ae5e6 	.word	0x3e5ae5e6
 8006df4:	57b1fe7d 	.word	0x57b1fe7d
 8006df8:	3ec71de3 	.word	0x3ec71de3
 8006dfc:	19c161d5 	.word	0x19c161d5
 8006e00:	3f2a01a0 	.word	0x3f2a01a0
 8006e04:	1110f8a6 	.word	0x1110f8a6
 8006e08:	3f811111 	.word	0x3f811111

08006e0c <fabs>:
 8006e0c:	ec51 0b10 	vmov	r0, r1, d0
 8006e10:	ee10 2a10 	vmov	r2, s0
 8006e14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e18:	ec43 2b10 	vmov	d0, r2, r3
 8006e1c:	4770      	bx	lr
	...

08006e20 <floor>:
 8006e20:	ec51 0b10 	vmov	r0, r1, d0
 8006e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006e2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006e30:	2e13      	cmp	r6, #19
 8006e32:	ee10 5a10 	vmov	r5, s0
 8006e36:	ee10 8a10 	vmov	r8, s0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	dc32      	bgt.n	8006ea4 <floor+0x84>
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	da14      	bge.n	8006e6c <floor+0x4c>
 8006e42:	a333      	add	r3, pc, #204	; (adr r3, 8006f10 <floor+0xf0>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f7f9 f9d8 	bl	80001fc <__adddf3>
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f7f9 fe1a 	bl	8000a88 <__aeabi_dcmpgt>
 8006e54:	b138      	cbz	r0, 8006e66 <floor+0x46>
 8006e56:	2c00      	cmp	r4, #0
 8006e58:	da57      	bge.n	8006f0a <floor+0xea>
 8006e5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006e5e:	431d      	orrs	r5, r3
 8006e60:	d001      	beq.n	8006e66 <floor+0x46>
 8006e62:	4c2d      	ldr	r4, [pc, #180]	; (8006f18 <floor+0xf8>)
 8006e64:	2500      	movs	r5, #0
 8006e66:	4621      	mov	r1, r4
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e025      	b.n	8006eb8 <floor+0x98>
 8006e6c:	4f2b      	ldr	r7, [pc, #172]	; (8006f1c <floor+0xfc>)
 8006e6e:	4137      	asrs	r7, r6
 8006e70:	ea01 0307 	and.w	r3, r1, r7
 8006e74:	4303      	orrs	r3, r0
 8006e76:	d01f      	beq.n	8006eb8 <floor+0x98>
 8006e78:	a325      	add	r3, pc, #148	; (adr r3, 8006f10 <floor+0xf0>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 f9bd 	bl	80001fc <__adddf3>
 8006e82:	2200      	movs	r2, #0
 8006e84:	2300      	movs	r3, #0
 8006e86:	f7f9 fdff 	bl	8000a88 <__aeabi_dcmpgt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d0eb      	beq.n	8006e66 <floor+0x46>
 8006e8e:	2c00      	cmp	r4, #0
 8006e90:	bfbe      	ittt	lt
 8006e92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006e96:	fa43 f606 	asrlt.w	r6, r3, r6
 8006e9a:	19a4      	addlt	r4, r4, r6
 8006e9c:	ea24 0407 	bic.w	r4, r4, r7
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	e7e0      	b.n	8006e66 <floor+0x46>
 8006ea4:	2e33      	cmp	r6, #51	; 0x33
 8006ea6:	dd0b      	ble.n	8006ec0 <floor+0xa0>
 8006ea8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006eac:	d104      	bne.n	8006eb8 <floor+0x98>
 8006eae:	ee10 2a10 	vmov	r2, s0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	f7f9 f9a2 	bl	80001fc <__adddf3>
 8006eb8:	ec41 0b10 	vmov	d0, r0, r1
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ec8:	fa23 f707 	lsr.w	r7, r3, r7
 8006ecc:	4207      	tst	r7, r0
 8006ece:	d0f3      	beq.n	8006eb8 <floor+0x98>
 8006ed0:	a30f      	add	r3, pc, #60	; (adr r3, 8006f10 <floor+0xf0>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 f991 	bl	80001fc <__adddf3>
 8006eda:	2200      	movs	r2, #0
 8006edc:	2300      	movs	r3, #0
 8006ede:	f7f9 fdd3 	bl	8000a88 <__aeabi_dcmpgt>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d0bf      	beq.n	8006e66 <floor+0x46>
 8006ee6:	2c00      	cmp	r4, #0
 8006ee8:	da02      	bge.n	8006ef0 <floor+0xd0>
 8006eea:	2e14      	cmp	r6, #20
 8006eec:	d103      	bne.n	8006ef6 <floor+0xd6>
 8006eee:	3401      	adds	r4, #1
 8006ef0:	ea25 0507 	bic.w	r5, r5, r7
 8006ef4:	e7b7      	b.n	8006e66 <floor+0x46>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006efc:	fa03 f606 	lsl.w	r6, r3, r6
 8006f00:	4435      	add	r5, r6
 8006f02:	4545      	cmp	r5, r8
 8006f04:	bf38      	it	cc
 8006f06:	18e4      	addcc	r4, r4, r3
 8006f08:	e7f2      	b.n	8006ef0 <floor+0xd0>
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	462c      	mov	r4, r5
 8006f0e:	e7aa      	b.n	8006e66 <floor+0x46>
 8006f10:	8800759c 	.word	0x8800759c
 8006f14:	7e37e43c 	.word	0x7e37e43c
 8006f18:	bff00000 	.word	0xbff00000
 8006f1c:	000fffff 	.word	0x000fffff

08006f20 <scalbn>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	ec55 4b10 	vmov	r4, r5, d0
 8006f26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	b99a      	cbnz	r2, 8006f58 <scalbn+0x38>
 8006f30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f34:	4323      	orrs	r3, r4
 8006f36:	d036      	beq.n	8006fa6 <scalbn+0x86>
 8006f38:	4b39      	ldr	r3, [pc, #228]	; (8007020 <scalbn+0x100>)
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	ee10 0a10 	vmov	r0, s0
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 fb11 	bl	8000568 <__aeabi_dmul>
 8006f46:	4b37      	ldr	r3, [pc, #220]	; (8007024 <scalbn+0x104>)
 8006f48:	429e      	cmp	r6, r3
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	da10      	bge.n	8006f72 <scalbn+0x52>
 8006f50:	a32b      	add	r3, pc, #172	; (adr r3, 8007000 <scalbn+0xe0>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	e03a      	b.n	8006fce <scalbn+0xae>
 8006f58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006f5c:	428a      	cmp	r2, r1
 8006f5e:	d10c      	bne.n	8006f7a <scalbn+0x5a>
 8006f60:	ee10 2a10 	vmov	r2, s0
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	f7f9 f948 	bl	80001fc <__adddf3>
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	460d      	mov	r5, r1
 8006f70:	e019      	b.n	8006fa6 <scalbn+0x86>
 8006f72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f76:	460b      	mov	r3, r1
 8006f78:	3a36      	subs	r2, #54	; 0x36
 8006f7a:	4432      	add	r2, r6
 8006f7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f80:	428a      	cmp	r2, r1
 8006f82:	dd08      	ble.n	8006f96 <scalbn+0x76>
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	a120      	add	r1, pc, #128	; (adr r1, 8007008 <scalbn+0xe8>)
 8006f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f8c:	da1c      	bge.n	8006fc8 <scalbn+0xa8>
 8006f8e:	a120      	add	r1, pc, #128	; (adr r1, 8007010 <scalbn+0xf0>)
 8006f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f94:	e018      	b.n	8006fc8 <scalbn+0xa8>
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	dd08      	ble.n	8006fac <scalbn+0x8c>
 8006f9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fa6:	ec45 4b10 	vmov	d0, r4, r5
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006fb0:	da19      	bge.n	8006fe6 <scalbn+0xc6>
 8006fb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006fb6:	429e      	cmp	r6, r3
 8006fb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006fbc:	dd0a      	ble.n	8006fd4 <scalbn+0xb4>
 8006fbe:	a112      	add	r1, pc, #72	; (adr r1, 8007008 <scalbn+0xe8>)
 8006fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e2      	bne.n	8006f8e <scalbn+0x6e>
 8006fc8:	a30f      	add	r3, pc, #60	; (adr r3, 8007008 <scalbn+0xe8>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 facb 	bl	8000568 <__aeabi_dmul>
 8006fd2:	e7cb      	b.n	8006f6c <scalbn+0x4c>
 8006fd4:	a10a      	add	r1, pc, #40	; (adr r1, 8007000 <scalbn+0xe0>)
 8006fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0b8      	beq.n	8006f50 <scalbn+0x30>
 8006fde:	a10e      	add	r1, pc, #56	; (adr r1, 8007018 <scalbn+0xf8>)
 8006fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe4:	e7b4      	b.n	8006f50 <scalbn+0x30>
 8006fe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fea:	3236      	adds	r2, #54	; 0x36
 8006fec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ff0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <scalbn+0x108>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	e7e8      	b.n	8006fce <scalbn+0xae>
 8006ffc:	f3af 8000 	nop.w
 8007000:	c2f8f359 	.word	0xc2f8f359
 8007004:	01a56e1f 	.word	0x01a56e1f
 8007008:	8800759c 	.word	0x8800759c
 800700c:	7e37e43c 	.word	0x7e37e43c
 8007010:	8800759c 	.word	0x8800759c
 8007014:	fe37e43c 	.word	0xfe37e43c
 8007018:	c2f8f359 	.word	0xc2f8f359
 800701c:	81a56e1f 	.word	0x81a56e1f
 8007020:	43500000 	.word	0x43500000
 8007024:	ffff3cb0 	.word	0xffff3cb0
 8007028:	3c900000 	.word	0x3c900000

0800702c <_init>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr

08007038 <_fini>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	bf00      	nop
 800703c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703e:	bc08      	pop	{r3}
 8007040:	469e      	mov	lr, r3
 8007042:	4770      	bx	lr
